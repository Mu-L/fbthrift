{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
# @{{!}}generated
from __future__ import annotations

import typing
import typing as _typing

from common.thrift.patch.detail.dynamic_patch import (
    BaseStructPatch,
    ListPatch,
    SetPatch,
    MapPatch,
    OptionalFieldPatch,
)

from common.thrift.patch.detail.py_bindings.DynamicPatch import (
    BoolPatch,
    BytePatch,
    I16Patch,
    I32Patch,
    I64Patch,
    FloatPatch,
    DoublePatch,
    StringPatch,
    BinaryPatch,
    StructPatch as DynamicStructPatch,
)

import thrift.python.types as _fbthrift_python_types
import folly.iobuf as _fbthrift_iobuf

import {{program:module_path}}.thrift_types as {{program:module_mangle}}__thrift_types
import {{program:safe_patch_module_path}}.thrift_types as _fbthrift_safe_patch_types

{{#program:include_namespaces}}
{{#has_types?}}

import {{included_module_path}}.{{> ../python/types/types_import_path}} as {{included_module_mangle}}__{{> ../python/types/types_import_path}}
import {{included_module_path}}.thrift_patch
{{/has_types?}}
{{/program:include_namespaces}}

{{#program:structs}}

class {{struct:py_name}}Patch(
    BaseStructPatch[{{program:module_mangle}}__thrift_types.{{struct:py_name}}]
):
    pass

{{#struct:fields_ordered_by_id}}
    @property
    def {{field:py_name}}(self) -> OptionalFieldPatch[
            {{#field:type}}{{> ../python/types/unadapted_pep484_type}}{{/field:type}},
            {{#field:type}}{{> ../python/types/unadapted_pep484_patch_type}}{{/field:type}}]:

        return OptionalFieldPatch(
            {{#field:type}}{{> ../python/common/thrift_patch_callback}}{{/field:type}},
            self._patch,
            {{field:key}},
            {{#field:type}}{{> ../python/types/typeinfo }}{{/field:type}})

    def to_safe_patch(self) -> _fbthrift_safe_patch_types.{{struct:name}}SafePatch:
        return _fbthrift_safe_patch_types.{{struct:name}}SafePatch(
            version=1, data=self._patch.serialize_to_compact_protocol()
        )

    @staticmethod
    def from_safe_patch(safe_patch: _fbthrift_safe_patch_types.{{struct:name}}SafePatch) -> {{struct:py_name}}Patch:
        patch = {{struct:py_name}}Patch()
        patch._patch = DynamicStructPatch.deserialize_from_compact_protocol(safe_patch.data)
        return patch


{{/struct:fields_ordered_by_id}}
{{/program:structs}}
