{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This file holds pure python implementations of thrift types that
are re-exported via types.pyx

}}
{{> common/auto_generated_py}}
{{#program:inplace_migrate?}}

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib

import typing as _typing
import thrift.py3.types
import thrift.py3.exceptions
import thrift.python.exceptions
import thrift.python.types
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.thrift_enums as _fbthrift_python_enums
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.thrift_types as _fbthrift_python_types


{{#program:includeNamespaces}}
{{#hasTypes?}}
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}types_inplace_FBTHRIFT_ONLY_DO_NOT_USE as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
{{/hasTypes?}}
{{/program:includeNamespaces}}

def get_types_reflection():
    return importlib.import_module(
        "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types_reflection"
    )

def _get_py_deprecated_module():
    import thrift.util.converter # needed by _to_py_deprecated() call
    return importlib.import_module("{{program:py_deprecated_module_path}}.ttypes")

_fbthrift__module_name__ = "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types"

__all__ = []

### Enums ###
{{#program:enums}}

{{> inplace/enum_py }}

{{#program:inplace_migrate?}}
__all__.append("{{enum:name}}")

{{/program:inplace_migrate?}}
{{/program:enums}}

### Union Enums ###
{{#program:filtered_structs}}
{{#struct:union?}}

{{> inplace/union_enum_py }}

{{#program:inplace_migrate?}}
__all__.append("__{{struct:name}}Type")

{{/program:inplace_migrate?}}
{{/struct:union?}}
{{/program:filtered_structs}}

### Containers ###
{{#program:containerTypes}}
{{> inplace/container }}

{{#program:inplace_migrate?}}
__all__.append("{{type:flat_name}}")

{{/program:inplace_migrate?}}
{{/program:containerTypes}}

### Structured Types ###
{{#program:filtered_structs}}
class {{struct:name}}({{> types/python_struct_class }}):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    {{#struct:fields_and_mixin_fields}}{{#field:type}}{{#type:needs_convert?}}
        "_fbthrift_inner__{{field:py_name}}",
    {{/type:needs_convert?}}{{/field:type}}{{/struct:fields_and_mixin_fields}}{{#struct:union?}}
        "_fbthrift_inner__type",
        "_fbthrift_inner__value",
    {{/struct:union?}}
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.{{struct:name}}
    _FBTHRIFT__FIELD_NAMES = (
        {{#struct:fields_and_mixin_fields}}
        "{{field:py_name}}",
        {{/struct:fields_and_mixin_fields}}
    )
    {{#struct:allow_inheritance?}}
    _fbthrift_allow_inheritance_DO_NOT_USE = True
    {{/struct:allow_inheritance?}}
    {{#struct:union?}}
    Type = _fbthrift_python_types.{{struct:name}}.Type
    {{/struct:union?}}
    _fbthrift__inner : _fbthrift_python_types.{{struct:name}}
    {{#struct:fields_and_mixin_fields}}
    {{#field:type}}{{#type:needs_convert?}}
    _fbthrift_inner__{{field:py_name}} : {{> inplace/field_type}} | None
    {{/type:needs_convert?}}{{/field:type}}
    {{/struct:fields_and_mixin_fields}}
    {{#struct:union?}}
    _fbthrift_inner__type: Type
    _fbthrift_inner__value: {{> inplace/union_value_type }}
    {{/struct:union?}}


    def __init__(self, *args, **kwargs) -> None:
        self._fbthrift__inner = _fbthrift_python_types.{{struct:name}}(*args, **kwargs)
        {{! we deliberately omit __init__ of Struct/GeneratedError, which tries to init cpp2 object}}
        {{#struct:exception?}}
        super(thrift.python.exceptions.Error, self).__init__(*(val for _, val in self))
        {{/struct:exception?}}
        {{! There's an optimization opportunity here if convertible objects are already correct type}}

    def __new__(cls, *args, **kwargs) -> {{struct:name}}:
        instance = super().__new__(cls)
        {{#struct:fields_and_mixin_fields}}
        {{#field:type}}{{#type:needs_convert?}}
        instance._fbthrift_inner__{{field:py_name}} = None
        {{/type:needs_convert?}}{{/field:type}}
        {{/struct:fields_and_mixin_fields}}
        {{#struct:union?}}
        instance._fbthrift_inner__type = None
        instance._fbthrift_inner__value = None
        {{/struct:union?}}
        return instance

    {{^struct:exception?}}{{^struct:union?}}{{^struct:cpp_noncopyable?}}
    def __call__(self, **kwargs) -> {{struct:name}}:
        return {{struct:name}}.from_python(self._fbthrift__inner(**kwargs))

    {{/struct:cpp_noncopyable?}}{{/struct:union?}}{{/struct:exception?}}
    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.{{struct:name}}) -> {{struct:name}}:
        inst = {{struct:name}}.__new__({{struct:name}})
        inst._fbthrift__inner = thrift_python_inner
        {{#struct:exception?}}
        super(thrift.python.exceptions.Error, inst).__init__(*(val for _, val in inst))
        {{/struct:exception?}}
        return inst

    def _to_py3(self) -> {{struct:name}}:
        return self

    def _to_python(self) -> _fbthrift_python_types.{{struct:name}}:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.{{struct:name}}, self)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__{{struct:name}}()

    {{#struct:fields_and_mixin_fields}}
    @property
    def {{field:py_name}}(self) -> {{> inplace/field_type}}:
{{#field:type}}{{#type:needs_convert?}}
        if self._fbthrift_inner__{{field:py_name}} is None:
            __python_val = self._fbthrift__inner.{{field:py_name}}
            {{#field:optional?}}
            if __python_val is None:
                return None
            {{/field:optional?}}{{^field:optional?}}{{#struct:union?}}
            if __python_val is None:
                return None
            {{/struct:union?}}{{/field:optional?}}
            self._fbthrift_inner__{{field:py_name}} = {{> types/python_type}}.from_python(__python_val)

        return self._fbthrift_inner__{{field:py_name}}
{{/type:needs_convert?}}{{^type:needs_convert?}}
        return self._fbthrift__inner.{{field:py_name}}
{{/type:needs_convert?}}{{/field:type}}

    {{/struct:fields_and_mixin_fields}}
    {{#struct:union?}}
    @property
    def type(self) -> _fbthrift_python_types.{{struct:name}}.Type:
        return self._fbthrift__inner.type

    @property
    def value(self) -> {{> inplace/union_value_type }}:
        match self._fbthrift__inner.type:
{{#struct:fields_and_mixin_fields}}{{#field:type}}{{#type:needs_convert?}}
            case _fbthrift_python_types.{{struct:name}}.Type.{{field:py_name}}:
                return self.{{field:py_name}}
{{/type:needs_convert?}}{{/field:type}}{{/struct:fields_and_mixin_fields}}
            case _:
                return self._fbthrift__inner.value

    {{/struct:union?}}

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return {{struct:size}}

    def __eq__(self, other):
    {{! note that thrift-python implements what thrift-py3 calls noncomparable_eq,
    so as a result of migration we can start ignoring cpp.noncomparable annotation}}
        return isinstance(other, {{struct:name}}) and self._fbthrift__inner == other._fbthrift__inner

    {{#struct:is_struct_orderable?}}
    def __lt__(self, other):
        if not isinstance(other, {{struct:name}}):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, {{struct:name}}):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner

    {{/struct:is_struct_orderable?}}

    {{#struct:exception?}}
    def __str__(self):
        {{#struct:exception_message?}}
        field = self.{{struct:exception_message}}
        if field is None:
            {{! optional field, stringify }}
            return str(field)
        return field
        {{/struct:exception_message?}}
        {{^struct:exception_message?}}
        return super().__str__()
        {{/struct:exception_message?}}

    {{/struct:exception?}}
    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        {{#struct:cpp_noncopyable?}}
        raise TypeError("{{struct:name}} is noncopyable")
        {{/struct:cpp_noncopyable?}}
        {{^struct:cpp_noncopyable?}}
        return self{{! thrift-py3 / thrift-python is immutable}}
        {{/struct:cpp_noncopyable?}}


{{#program:inplace_migrate?}}
__all__.append("{{struct:name}}")

{{/program:inplace_migrate?}}
{{/program:filtered_structs}}

### Constants
{{#program:constants}}{{#constant:value}}
{{constant:name}} = {{> inplace/constant_value_py }}
{{/constant:value}}{{/program:constants}}
{{/program:inplace_migrate?}}
