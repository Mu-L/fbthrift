{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This file holds pure python implementations of thrift types that
are re-exported via types.pyx

}}
{{> common/auto_generated_py}}
{{#program:inplace_migrate?}}

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib

import thrift.py3.types
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.thrift_enums as _fbthrift_python_enums


{{#program:includeNamespaces}}
{{#hasTypes?}}
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}types_inplace_FBTHRIFT_ONLY_DO_NOT_USE as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
{{/hasTypes?}}
{{/program:includeNamespaces}}

def get_types_reflection():
    return importlib.import_module(
        "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types_reflection"
    )

_fbthrift__module_name__ = "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types"

__all__ = []

### Enums ###
{{#program:enums}}

{{> inplace/enum_py }}

{{#program:inplace_migrate?}}
__all__.append("{{enum:name}}")

{{/program:inplace_migrate?}}
{{/program:enums}}

### Union Enums ###
{{#program:filtered_structs}}
{{#struct:union?}}

{{> inplace/union_enum_py }}

{{#program:inplace_migrate?}}
__all__.append("__{{struct:name}}Type")

{{/program:inplace_migrate?}}
{{/struct:union?}}
{{/program:filtered_structs}}

### Containers ###
{{#program:containerTypes}}
{{> inplace/container }}

{{#program:inplace_migrate?}}
__all__.append("{{type:flat_name}}")

{{/program:inplace_migrate?}}
{{/program:containerTypes}}

### Structured Types ###
{{#program:filtered_structs}}
class {{struct:name}}:
    __module__ = _fbthrift__module_name__


{{#program:inplace_migrate?}}
__all__.append("{{struct:name}}")

{{/program:inplace_migrate?}}
{{/program:filtered_structs}}

### Constants
{{#program:constants}}{{#constant:value}}
{{constant:name}} = {{> inplace/constant_value_py }}
{{/constant:value}}{{/program:constants}}
{{/program:inplace_migrate?}}
