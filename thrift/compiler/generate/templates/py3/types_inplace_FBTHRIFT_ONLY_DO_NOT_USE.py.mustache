{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This file holds pure python implementations of thrift types that
are re-exported via types.pyx

}}
{{> common/auto_generated_py}}
{{#program:inplace_migrate?}}

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib

import typing as _typing
import thrift.py3.types
import thrift.python.types
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.thrift_enums as _fbthrift_python_enums
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.thrift_types as _fbthrift_python_types


{{#program:includeNamespaces}}
{{#hasTypes?}}
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}types_inplace_FBTHRIFT_ONLY_DO_NOT_USE as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
{{/hasTypes?}}
{{/program:includeNamespaces}}

def get_types_reflection():
    return importlib.import_module(
        "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types_reflection"
    )

_fbthrift__module_name__ = "{{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types"

__all__ = []

### Enums ###
{{#program:enums}}

{{> inplace/enum_py }}

{{#program:inplace_migrate?}}
__all__.append("{{enum:name}}")

{{/program:inplace_migrate?}}
{{/program:enums}}

### Union Enums ###
{{#program:filtered_structs}}
{{#struct:union?}}

{{> inplace/union_enum_py }}

{{#program:inplace_migrate?}}
__all__.append("__{{struct:name}}Type")

{{/program:inplace_migrate?}}
{{/struct:union?}}
{{/program:filtered_structs}}

### Containers ###
{{#program:containerTypes}}
{{> inplace/container }}

{{#program:inplace_migrate?}}
__all__.append("{{type:flat_name}}")

{{/program:inplace_migrate?}}
{{/program:containerTypes}}

### Structured Types ###
{{#program:filtered_structs}}
class {{struct:name}}(thrift.py3.types.{{!
}}{{^struct:union?}}Struct{{/struct:union?}}{{!
}}{{#struct:union?}}Union{{/struct:union?}}{{!
}}):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    {{#struct:fields_and_mixin_fields}}{{#field:type}}{{#type:needs_convert?}}
        "_fbthrift_inner__{{field:py_name}}",
    {{/type:needs_convert?}}{{/field:type}}{{/struct:fields_and_mixin_fields}}
    )
    _fbthrift__inner : _fbthrift_python_types.{{struct:name}}
    {{#struct:fields_and_mixin_fields}}
    {{#field:type}}{{#type:needs_convert?}}
    _fbthrift_inner__{{field:py_name}} : {{> inplace/field_type}} | None
    {{/type:needs_convert?}}{{/field:type}}
    {{/struct:fields_and_mixin_fields}}


    def __init__(self, *args, **kwargs) -> None:
        self._fbthrift__inner = _fbthrift_python_types.{{struct:name}}(*args, **kwargs)
        {{! There's an optimization opportunity here if convertible objects are already correct type}}

    def __new__(cls, *args, **kwargs) -> {{struct:name}}:
        instance = super().__new__(cls)
        {{#struct:fields_and_mixin_fields}}
        {{#field:type}}{{#type:needs_convert?}}
        instance._fbthrift_inner__{{field:py_name}} = None
        {{/type:needs_convert?}}{{/field:type}}
        {{/struct:fields_and_mixin_fields}}
        return instance

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.{{struct:name}}) -> {{struct:name}}:
        inst = {{struct:name}}.__new__({{struct:name}})
        inst._fbthrift__inner = thrift_python_inner
        return inst

    def _to_py3(self) -> {{struct:name}}:
        return self

    def _to_python(self) -> _fbthrift_python_types.{{struct:name}}:
        return self._fbthrift__inner


    {{#struct:fields_and_mixin_fields}}
    @property
    def {{field:py_name}}(self) -> {{> inplace/field_type}}:
{{#field:type}}{{#type:needs_convert?}}
        if self._fbthrift_inner__{{field:py_name}} is None:
            __python_val = self._fbthrift__inner.{{field:py_name}}
            {{#field:optional?}}
            if __python_val is None:
                return None
            {{/field:optional?}}{{^field:optional?}}{{#struct:union?}}
            if __python_val is None:
                return None
            {{/struct:union?}}{{/field:optional?}}
            self._fbthrift_inner__{{field:py_name}} = {{> types/python_type}}.from_python(__python_val)

        return self._fbthrift_inner__{{field:py_name}}
{{/type:needs_convert?}}{{^type:needs_convert?}}
        return self._fbthrift__inner.{{field:py_name}}
{{/type:needs_convert?}}{{/field:type}}

    {{/struct:fields_and_mixin_fields}}



{{#program:inplace_migrate?}}
__all__.append("{{struct:name}}")

{{/program:inplace_migrate?}}
{{/program:filtered_structs}}

### Constants
{{#program:constants}}{{#constant:value}}
{{constant:name}} = {{> inplace/constant_value_py }}
{{/constant:value}}{{/program:constants}}
{{/program:inplace_migrate?}}
