// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = strings.Split
var _ = thrift.ZERO


type MyEnumAlias = MyEnum

const (
    MyEnumAlias_MyValue1 MyEnumAlias = MyEnum_MyValue1
    MyEnumAlias_MyValue2 MyEnumAlias = MyEnum_MyValue2
)

// Enum value maps for MyEnum
var (
    MyEnumAliasToName  = MyEnumToName
    MyEnumAliasToValue = MyEnumToValue
)

// Deprecated: Use MyEnumAliasToValue instead (e.g. `x, ok := MyEnumAliasToValue["name"]`).
func MyEnumAliasFromString(s string) (MyEnumAlias, error) {
    return MyEnumFromString(s)
}

func NewMyEnumAlias() MyEnumAlias {
    return 0
}

func WriteMyEnumAlias(item MyEnumAlias, p thrift.Encoder) error {
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}
    return nil
}

func ReadMyEnumAlias(p thrift.Decoder) (MyEnumAlias, error) {
    var decodeResult MyEnumAlias
    decodeErr := func() error {
        enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyDataItemAlias = MyDataItem

func NewMyDataItemAlias() *MyDataItemAlias {
    return NewMyDataItem()
}

func WriteMyDataItemAlias(item *MyDataItemAlias, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
    return err
}
    return nil
}

func ReadMyDataItemAlias(p thrift.Decoder) (*MyDataItemAlias, error) {
    var decodeResult *MyDataItemAlias
    decodeErr := func() error {
        result := NewMyDataItem()
err := result.Read(p)
if err != nil {
    return err
}
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyEnum int32

const (
    MyEnum_MyValue1 MyEnum = 0
    MyEnum_MyValue2 MyEnum = 1
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue1: "MyValue1",
        MyEnum_MyValue2: "MyValue2",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue1": MyEnum_MyValue1,
        "MyValue2": MyEnum_MyValue2,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}


type HackEnum int32

const (
    HackEnum_Value1 HackEnum = 0
    HackEnum_Value2 HackEnum = 1
)

// Enum value maps for HackEnum
var (
    HackEnumToName = map[HackEnum]string {
        HackEnum_Value1: "Value1",
        HackEnum_Value2: "Value2",
    }

    HackEnumToValue = map[string]HackEnum {
        "Value1": HackEnum_Value1,
        "Value2": HackEnum_Value2,
    }
)

func (x HackEnum) String() string {
    if v, ok := HackEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x HackEnum) Ptr() *HackEnum {
    return &x
}

// Deprecated: Use HackEnumToValue instead (e.g. `x, ok := HackEnumToValue["name"]`).
func HackEnumFromString(s string) (HackEnum, error) {
    if v, ok := HackEnumToValue[s]; ok {
        return v, nil
    }
    return HackEnum(0), fmt.Errorf("not a valid HackEnum string")
}


type MyStruct struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyDataField *MyDataItemAlias `thrift:"MyDataField,3" json:"MyDataField" db:"MyDataField"`
    MyEnum MyEnum `thrift:"myEnum,4" json:"myEnum" db:"myEnum"`
    Oneway bool `thrift:"oneway,5" json:"oneway" db:"oneway"`
    Readonly bool `thrift:"readonly,6" json:"readonly" db:"readonly"`
    Idempotent bool `thrift:"idempotent,7" json:"idempotent" db:"idempotent"`
    FloatSet []float32 `thrift:"floatSet,8" json:"floatSet" db:"floatSet"`
    NoHackCodegenField string `thrift:"no_hack_codegen_field,9" json:"no_hack_codegen_field" db:"no_hack_codegen_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).setDefaults()
}

func (x *MyStruct) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyStruct) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyStruct) GetMyDataField() *MyDataItemAlias {
    if !x.IsSetMyDataField() {
        return nil
    }
    return x.MyDataField
}

func (x *MyStruct) GetMyEnum() MyEnum {
    return x.MyEnum
}

func (x *MyStruct) GetOneway() bool {
    return x.Oneway
}

func (x *MyStruct) GetReadonly() bool {
    return x.Readonly
}

func (x *MyStruct) GetIdempotent() bool {
    return x.Idempotent
}

func (x *MyStruct) GetFloatSet() []float32 {
    if !x.IsSetFloatSet() {
        return make([]float32, 0)
    }
    return x.FloatSet
}

func (x *MyStruct) GetNoHackCodegenField() string {
    return x.NoHackCodegenField
}

func (x *MyStruct) SetMyIntFieldNonCompat(value int64) *MyStruct {
    x.MyIntField = value
    return x
}

func (x *MyStruct) SetMyIntField(value int64) *MyStruct {
    x.MyIntField = value
    return x
}

func (x *MyStruct) SetMyStringFieldNonCompat(value string) *MyStruct {
    x.MyStringField = value
    return x
}

func (x *MyStruct) SetMyStringField(value string) *MyStruct {
    x.MyStringField = value
    return x
}

func (x *MyStruct) SetMyDataFieldNonCompat(value *MyDataItemAlias) *MyStruct {
    x.MyDataField = value
    return x
}

func (x *MyStruct) SetMyDataField(value *MyDataItemAlias) *MyStruct {
    x.MyDataField = value
    return x
}

func (x *MyStruct) SetMyEnumNonCompat(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetMyEnum(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetOnewayNonCompat(value bool) *MyStruct {
    x.Oneway = value
    return x
}

func (x *MyStruct) SetOneway(value bool) *MyStruct {
    x.Oneway = value
    return x
}

func (x *MyStruct) SetReadonlyNonCompat(value bool) *MyStruct {
    x.Readonly = value
    return x
}

func (x *MyStruct) SetReadonly(value bool) *MyStruct {
    x.Readonly = value
    return x
}

func (x *MyStruct) SetIdempotentNonCompat(value bool) *MyStruct {
    x.Idempotent = value
    return x
}

func (x *MyStruct) SetIdempotent(value bool) *MyStruct {
    x.Idempotent = value
    return x
}

func (x *MyStruct) SetFloatSetNonCompat(value []float32) *MyStruct {
    x.FloatSet = value
    return x
}

func (x *MyStruct) SetFloatSet(value []float32) *MyStruct {
    x.FloatSet = value
    return x
}

func (x *MyStruct) SetNoHackCodegenFieldNonCompat(value string) *MyStruct {
    x.NoHackCodegenField = value
    return x
}

func (x *MyStruct) SetNoHackCodegenField(value string) *MyStruct {
    x.NoHackCodegenField = value
    return x
}

func (x *MyStruct) IsSetMyDataField() bool {
    return x != nil && x.MyDataField != nil
}

func (x *MyStruct) IsSetFloatSet() bool {
    return x != nil && x.FloatSet != nil
}

func (x *MyStruct) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField3(p thrift.Encoder) error {  // MyDataField
    if !x.IsSetMyDataField() {
        return nil
    }

    if err := p.WriteFieldBegin("MyDataField", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyDataField
    err := WriteMyDataItemAlias(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField4(p thrift.Encoder) error {  // MyEnum
    if err := p.WriteFieldBegin("myEnum", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyEnum
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField5(p thrift.Encoder) error {  // Oneway
    if err := p.WriteFieldBegin("oneway", thrift.BOOL, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Oneway
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField6(p thrift.Encoder) error {  // Readonly
    if err := p.WriteFieldBegin("readonly", thrift.BOOL, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Readonly
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField7(p thrift.Encoder) error {  // Idempotent
    if err := p.WriteFieldBegin("idempotent", thrift.BOOL, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Idempotent
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField8(p thrift.Encoder) error {  // FloatSet
    if err := p.WriteFieldBegin("floatSet", thrift.SET, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatSet
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteFloat(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField9(p thrift.Encoder) error {  // NoHackCodegenField
    if err := p.WriteFieldBegin("no_hack_codegen_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.NoHackCodegenField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.MyIntField = result
    return nil
}

func (x *MyStruct) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.MyStringField = result
    return nil
}

func (x *MyStruct) readField3(p thrift.Decoder) error {  // MyDataField
    result, err := ReadMyDataItemAlias(p)
if err != nil {
    return err
}

    x.MyDataField = result
    return nil
}

func (x *MyStruct) readField4(p thrift.Decoder) error {  // MyEnum
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.MyEnum = result
    return nil
}

func (x *MyStruct) readField5(p thrift.Decoder) error {  // Oneway
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Oneway = result
    return nil
}

func (x *MyStruct) readField6(p thrift.Decoder) error {  // Readonly
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Readonly = result
    return nil
}

func (x *MyStruct) readField7(p thrift.Decoder) error {  // Idempotent
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Idempotent = result
    return nil
}

func (x *MyStruct) readField8(p thrift.Decoder) error {  // FloatSet
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]float32, 0, size)
for i := 0; i < size; i++ {
    var elem float32
    {
        result, err := p.ReadFloat()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.FloatSet = result
    return nil
}

func (x *MyStruct) readField9(p thrift.Decoder) error {  // NoHackCodegenField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.NoHackCodegenField = result
    return nil
}

func (x *MyStruct) toString1() string {  // MyIntField
    return fmt.Sprintf("%v", x.MyIntField)
}

func (x *MyStruct) toString2() string {  // MyStringField
    return fmt.Sprintf("%v", x.MyStringField)
}

func (x *MyStruct) toString3() string {  // MyDataField
    return fmt.Sprintf("%v", x.MyDataField)
}

func (x *MyStruct) toString4() string {  // MyEnum
    return fmt.Sprintf("%v", x.MyEnum)
}

func (x *MyStruct) toString5() string {  // Oneway
    return fmt.Sprintf("%v", x.Oneway)
}

func (x *MyStruct) toString6() string {  // Readonly
    return fmt.Sprintf("%v", x.Readonly)
}

func (x *MyStruct) toString7() string {  // Idempotent
    return fmt.Sprintf("%v", x.Idempotent)
}

func (x *MyStruct) toString8() string {  // FloatSet
    return fmt.Sprintf("%v", x.FloatSet)
}

func (x *MyStruct) toString9() string {  // NoHackCodegenField
    return fmt.Sprintf("%v", x.NoHackCodegenField)
}

// Deprecated: Use NewMyStruct().GetMyDataField() instead.
func (x *MyStruct) DefaultGetMyDataField() *MyDataItemAlias {
    if !x.IsSetMyDataField() {
        return NewMyDataItemAlias()
    }
    return x.MyDataField
}



func (x *MyStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I64)):  // MyIntField
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // MyStringField
            fieldReadErr = x.readField2(p)
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // MyDataField
            fieldReadErr = x.readField3(p)
        case (id == 4 && wireType == thrift.Type(thrift.I32)):  // myEnum
            fieldReadErr = x.readField4(p)
        case (id == 5 && wireType == thrift.Type(thrift.BOOL)):  // oneway
            fieldReadErr = x.readField5(p)
        case (id == 6 && wireType == thrift.Type(thrift.BOOL)):  // readonly
            fieldReadErr = x.readField6(p)
        case (id == 7 && wireType == thrift.Type(thrift.BOOL)):  // idempotent
            fieldReadErr = x.readField7(p)
        case (id == 8 && wireType == thrift.Type(thrift.SET)):  // floatSet
            fieldReadErr = x.readField8(p)
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // no_hack_codegen_field
            fieldReadErr = x.readField9(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStruct({")
    sb.WriteString(fmt.Sprintf("MyIntField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("MyStringField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("MyDataField:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("MyEnum:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Oneway:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Readonly:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Idempotent:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("FloatSet:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("NoHackCodegenField:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}
func (x *MyStruct) setDefaults() *MyStruct {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyDataFieldNonCompat(NewMyDataItemAlias()).
        SetMyEnumNonCompat(0).
        SetOnewayNonCompat(false).
        SetReadonlyNonCompat(false).
        SetIdempotentNonCompat(false).
        SetFloatSetNonCompat(make([]float32, 0)).
        SetNoHackCodegenFieldNonCompat("")
}


type Containers struct {
    I32List []int32 `thrift:"I32List,1" json:"I32List" db:"I32List"`
    StringSet []string `thrift:"StringSet,2" json:"StringSet" db:"StringSet"`
    StringToI64Map map[string]int64 `thrift:"StringToI64Map,3" json:"StringToI64Map" db:"StringToI64Map"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Containers)(nil)

func NewContainers() *Containers {
    return (&Containers{}).setDefaults()
}

func (x *Containers) GetI32List() []int32 {
    if !x.IsSetI32List() {
        return make([]int32, 0)
    }
    return x.I32List
}

func (x *Containers) GetStringSet() []string {
    if !x.IsSetStringSet() {
        return make([]string, 0)
    }
    return x.StringSet
}

func (x *Containers) GetStringToI64Map() map[string]int64 {
    if !x.IsSetStringToI64Map() {
        return make(map[string]int64)
    }
    return x.StringToI64Map
}

func (x *Containers) SetI32ListNonCompat(value []int32) *Containers {
    x.I32List = value
    return x
}

func (x *Containers) SetI32List(value []int32) *Containers {
    x.I32List = value
    return x
}

func (x *Containers) SetStringSetNonCompat(value []string) *Containers {
    x.StringSet = value
    return x
}

func (x *Containers) SetStringSet(value []string) *Containers {
    x.StringSet = value
    return x
}

func (x *Containers) SetStringToI64MapNonCompat(value map[string]int64) *Containers {
    x.StringToI64Map = value
    return x
}

func (x *Containers) SetStringToI64Map(value map[string]int64) *Containers {
    x.StringToI64Map = value
    return x
}

func (x *Containers) IsSetI32List() bool {
    return x != nil && x.I32List != nil
}

func (x *Containers) IsSetStringSet() bool {
    return x != nil && x.StringSet != nil
}

func (x *Containers) IsSetStringToI64Map() bool {
    return x != nil && x.StringToI64Map != nil
}

func (x *Containers) writeField1(p thrift.Encoder) error {  // I32List
    if err := p.WriteFieldBegin("I32List", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32List
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Containers) writeField2(p thrift.Encoder) error {  // StringSet
    if err := p.WriteFieldBegin("StringSet", thrift.SET, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringSet
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Containers) writeField3(p thrift.Encoder) error {  // StringToI64Map
    if err := p.WriteFieldBegin("StringToI64Map", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringToI64Map
    if err := p.WriteMapBegin(thrift.STRING, thrift.I64, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI64(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Containers) readField1(p thrift.Decoder) error {  // I32List
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.I32List = result
    return nil
}

func (x *Containers) readField2(p thrift.Decoder) error {  // StringSet
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.StringSet = result
    return nil
}

func (x *Containers) readField3(p thrift.Decoder) error {  // StringToI64Map
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int64, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int64
    {
        result, err := p.ReadI64()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.StringToI64Map = result
    return nil
}

func (x *Containers) toString1() string {  // I32List
    return fmt.Sprintf("%v", x.I32List)
}

func (x *Containers) toString2() string {  // StringSet
    return fmt.Sprintf("%v", x.StringSet)
}

func (x *Containers) toString3() string {  // StringToI64Map
    return fmt.Sprintf("%v", x.StringToI64Map)
}



func (x *Containers) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Containers"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Containers) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // I32List
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.SET)):  // StringSet
            fieldReadErr = x.readField2(p)
        case (id == 3 && wireType == thrift.Type(thrift.MAP)):  // StringToI64Map
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Containers) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Containers({")
    sb.WriteString(fmt.Sprintf("I32List:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("StringSet:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("StringToI64Map:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}
func (x *Containers) setDefaults() *Containers {
    return x.
        SetI32ListNonCompat(make([]int32, 0)).
        SetStringSetNonCompat(make([]string, 0)).
        SetStringToI64MapNonCompat(make(map[string]int64))
}


type MyDataItem struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataItem)(nil)

func NewMyDataItem() *MyDataItem {
    return (&MyDataItem{}).setDefaults()
}



func (x *MyDataItem) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyDataItem"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataItem) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataItem) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataItem({")
    sb.WriteString("})")

    return sb.String()
}
func (x *MyDataItem) setDefaults() *MyDataItem {
    return x
}


type MyUnion struct {
    MyEnum *MyEnumAlias `thrift:"myEnum,1" json:"myEnum,omitempty" db:"myEnum"`
    MyStruct *MyStruct `thrift:"myStruct,2" json:"myStruct,omitempty" db:"myStruct"`
    MyDataItem *MyDataItem `thrift:"myDataItem,3" json:"myDataItem,omitempty" db:"myDataItem"`
    FloatSet []float32 `thrift:"floatSet,4" json:"floatSet,omitempty" db:"floatSet"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{}).setDefaults()
}

func (x *MyUnion) GetMyEnum() MyEnumAlias {
    if !x.IsSetMyEnum() {
        return NewMyEnumAlias()
    }
    return *x.MyEnum
}

func (x *MyUnion) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyUnion) GetMyDataItem() *MyDataItem {
    if !x.IsSetMyDataItem() {
        return nil
    }
    return x.MyDataItem
}

func (x *MyUnion) GetFloatSet() []float32 {
    if !x.IsSetFloatSet() {
        return make([]float32, 0)
    }
    return x.FloatSet
}

func (x *MyUnion) SetMyEnumNonCompat(value MyEnumAlias) *MyUnion {
    x.MyEnum = &value
    return x
}

func (x *MyUnion) SetMyEnum(value *MyEnumAlias) *MyUnion {
    x.MyEnum = value
    return x
}

func (x *MyUnion) SetMyStructNonCompat(value *MyStruct) *MyUnion {
    x.MyStruct = value
    return x
}

func (x *MyUnion) SetMyStruct(value *MyStruct) *MyUnion {
    x.MyStruct = value
    return x
}

func (x *MyUnion) SetMyDataItemNonCompat(value *MyDataItem) *MyUnion {
    x.MyDataItem = value
    return x
}

func (x *MyUnion) SetMyDataItem(value *MyDataItem) *MyUnion {
    x.MyDataItem = value
    return x
}

func (x *MyUnion) SetFloatSetNonCompat(value []float32) *MyUnion {
    x.FloatSet = value
    return x
}

func (x *MyUnion) SetFloatSet(value []float32) *MyUnion {
    x.FloatSet = value
    return x
}

func (x *MyUnion) IsSetMyEnum() bool {
    return x != nil && x.MyEnum != nil
}

func (x *MyUnion) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyUnion) IsSetMyDataItem() bool {
    return x != nil && x.MyDataItem != nil
}

func (x *MyUnion) IsSetFloatSet() bool {
    return x != nil && x.FloatSet != nil
}

func (x *MyUnion) writeField1(p thrift.Encoder) error {  // MyEnum
    if !x.IsSetMyEnum() {
        return nil
    }

    if err := p.WriteFieldBegin("myEnum", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.MyEnum
    err := WriteMyEnumAlias(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Encoder) error {  // MyDataItem
    if !x.IsSetMyDataItem() {
        return nil
    }

    if err := p.WriteFieldBegin("myDataItem", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyDataItem
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField4(p thrift.Encoder) error {  // FloatSet
    if !x.IsSetFloatSet() {
        return nil
    }

    if err := p.WriteFieldBegin("floatSet", thrift.SET, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatSet
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteFloat(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Decoder) error {  // MyEnum
    result, err := ReadMyEnumAlias(p)
if err != nil {
    return err
}

    x.MyEnum = &result
    return nil
}

func (x *MyUnion) readField2(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyStruct = result
    return nil
}

func (x *MyUnion) readField3(p thrift.Decoder) error {  // MyDataItem
    result := NewMyDataItem()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyDataItem = result
    return nil
}

func (x *MyUnion) readField4(p thrift.Decoder) error {  // FloatSet
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]float32, 0, size)
for i := 0; i < size; i++ {
    var elem float32
    {
        result, err := p.ReadFloat()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.FloatSet = result
    return nil
}

func (x *MyUnion) toString1() string {  // MyEnum
    if x.IsSetMyEnum() {
        return fmt.Sprintf("%v", *x.MyEnum)
    }
    return fmt.Sprintf("%v", x.MyEnum)
}

func (x *MyUnion) toString2() string {  // MyStruct
    return fmt.Sprintf("%v", x.MyStruct)
}

func (x *MyUnion) toString3() string {  // MyDataItem
    return fmt.Sprintf("%v", x.MyDataItem)
}

func (x *MyUnion) toString4() string {  // FloatSet
    return fmt.Sprintf("%v", x.FloatSet)
}


// Deprecated: Use NewMyUnion().GetMyStruct() instead.
func (x *MyUnion) DefaultGetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return NewMyStruct()
    }
    return x.MyStruct
}

// Deprecated: Use NewMyUnion().GetMyDataItem() instead.
func (x *MyUnion) DefaultGetMyDataItem() *MyDataItem {
    if !x.IsSetMyDataItem() {
        return NewMyDataItem()
    }
    return x.MyDataItem
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetMyEnum()) {
        count++
    }
    if (x.IsSetMyStruct()) {
        count++
    }
    if (x.IsSetMyDataItem()) {
        count++
    }
    if (x.IsSetFloatSet()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // myEnum
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // myStruct
            fieldReadErr = x.readField2(p)
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // myDataItem
            fieldReadErr = x.readField3(p)
        case (id == 4 && wireType == thrift.Type(thrift.SET)):  // floatSet
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnion({")
    sb.WriteString(fmt.Sprintf("MyEnum:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("MyStruct:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("MyDataItem:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("FloatSet:%s", x.toString4()))
    sb.WriteString("})")

    return sb.String()
}
func (x *MyUnion) setDefaults() *MyUnion {
    return x
}


type MyException struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyStruct *MyStruct `thrift:"myStruct,3" json:"myStruct" db:"myStruct"`
    MyUnion *MyUnion `thrift:"myUnion,4" json:"myUnion" db:"myUnion"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyException)(nil)

func NewMyException() *MyException {
    return (&MyException{}).setDefaults()
}

func (x *MyException) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyException) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyException) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyException) GetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return nil
    }
    return x.MyUnion
}

func (x *MyException) SetMyIntFieldNonCompat(value int64) *MyException {
    x.MyIntField = value
    return x
}

func (x *MyException) SetMyIntField(value int64) *MyException {
    x.MyIntField = value
    return x
}

func (x *MyException) SetMyStringFieldNonCompat(value string) *MyException {
    x.MyStringField = value
    return x
}

func (x *MyException) SetMyStringField(value string) *MyException {
    x.MyStringField = value
    return x
}

func (x *MyException) SetMyStructNonCompat(value *MyStruct) *MyException {
    x.MyStruct = value
    return x
}

func (x *MyException) SetMyStruct(value *MyStruct) *MyException {
    x.MyStruct = value
    return x
}

func (x *MyException) SetMyUnionNonCompat(value *MyUnion) *MyException {
    x.MyUnion = value
    return x
}

func (x *MyException) SetMyUnion(value *MyUnion) *MyException {
    x.MyUnion = value
    return x
}

func (x *MyException) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyException) IsSetMyUnion() bool {
    return x != nil && x.MyUnion != nil
}

func (x *MyException) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyException) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyException) writeField3(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyException) writeField4(p thrift.Encoder) error {  // MyUnion
    if !x.IsSetMyUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("myUnion", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyUnion
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyException) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.MyIntField = result
    return nil
}

func (x *MyException) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.MyStringField = result
    return nil
}

func (x *MyException) readField3(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyStruct = result
    return nil
}

func (x *MyException) readField4(p thrift.Decoder) error {  // MyUnion
    result := NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyUnion = result
    return nil
}

func (x *MyException) toString1() string {  // MyIntField
    return fmt.Sprintf("%v", x.MyIntField)
}

func (x *MyException) toString2() string {  // MyStringField
    return fmt.Sprintf("%v", x.MyStringField)
}

func (x *MyException) toString3() string {  // MyStruct
    return fmt.Sprintf("%v", x.MyStruct)
}

func (x *MyException) toString4() string {  // MyUnion
    return fmt.Sprintf("%v", x.MyUnion)
}

// Deprecated: Use NewMyException().GetMyStruct() instead.
func (x *MyException) DefaultGetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return NewMyStruct()
    }
    return x.MyStruct
}

// Deprecated: Use NewMyException().GetMyUnion() instead.
func (x *MyException) DefaultGetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return NewMyUnion()
    }
    return x.MyUnion
}



func (x *MyException) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyException"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyException) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I64)):  // MyIntField
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // MyStringField
            fieldReadErr = x.readField2(p)
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // myStruct
            fieldReadErr = x.readField3(p)
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // myUnion
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyException) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyException({")
    sb.WriteString(fmt.Sprintf("MyIntField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("MyStringField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("MyStruct:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("MyUnion:%s", x.toString4()))
    sb.WriteString("})")

    return sb.String()
}
func (x *MyException) setDefaults() *MyException {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyStructNonCompat(NewMyStruct()).
        SetMyUnionNonCompat(NewMyUnion())
}

func (x *MyException) Error() string {
    return x.String()
}

type MyExceptionWithMessage struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyStruct *MyStruct `thrift:"myStruct,3" json:"myStruct" db:"myStruct"`
    MyUnion *MyUnion `thrift:"myUnion,4" json:"myUnion" db:"myUnion"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyExceptionWithMessage)(nil)

func NewMyExceptionWithMessage() *MyExceptionWithMessage {
    return (&MyExceptionWithMessage{}).setDefaults()
}

func (x *MyExceptionWithMessage) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyExceptionWithMessage) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyExceptionWithMessage) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyExceptionWithMessage) GetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return nil
    }
    return x.MyUnion
}

func (x *MyExceptionWithMessage) SetMyIntFieldNonCompat(value int64) *MyExceptionWithMessage {
    x.MyIntField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyIntField(value int64) *MyExceptionWithMessage {
    x.MyIntField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStringFieldNonCompat(value string) *MyExceptionWithMessage {
    x.MyStringField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStringField(value string) *MyExceptionWithMessage {
    x.MyStringField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStructNonCompat(value *MyStruct) *MyExceptionWithMessage {
    x.MyStruct = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStruct(value *MyStruct) *MyExceptionWithMessage {
    x.MyStruct = value
    return x
}

func (x *MyExceptionWithMessage) SetMyUnionNonCompat(value *MyUnion) *MyExceptionWithMessage {
    x.MyUnion = value
    return x
}

func (x *MyExceptionWithMessage) SetMyUnion(value *MyUnion) *MyExceptionWithMessage {
    x.MyUnion = value
    return x
}

func (x *MyExceptionWithMessage) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyExceptionWithMessage) IsSetMyUnion() bool {
    return x != nil && x.MyUnion != nil
}

func (x *MyExceptionWithMessage) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField3(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField4(p thrift.Encoder) error {  // MyUnion
    if !x.IsSetMyUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("myUnion", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MyUnion
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyExceptionWithMessage) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.MyIntField = result
    return nil
}

func (x *MyExceptionWithMessage) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.MyStringField = result
    return nil
}

func (x *MyExceptionWithMessage) readField3(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyStruct = result
    return nil
}

func (x *MyExceptionWithMessage) readField4(p thrift.Decoder) error {  // MyUnion
    result := NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.MyUnion = result
    return nil
}

func (x *MyExceptionWithMessage) toString1() string {  // MyIntField
    return fmt.Sprintf("%v", x.MyIntField)
}

func (x *MyExceptionWithMessage) toString2() string {  // MyStringField
    return fmt.Sprintf("%v", x.MyStringField)
}

func (x *MyExceptionWithMessage) toString3() string {  // MyStruct
    return fmt.Sprintf("%v", x.MyStruct)
}

func (x *MyExceptionWithMessage) toString4() string {  // MyUnion
    return fmt.Sprintf("%v", x.MyUnion)
}

// Deprecated: Use NewMyExceptionWithMessage().GetMyStruct() instead.
func (x *MyExceptionWithMessage) DefaultGetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return NewMyStruct()
    }
    return x.MyStruct
}

// Deprecated: Use NewMyExceptionWithMessage().GetMyUnion() instead.
func (x *MyExceptionWithMessage) DefaultGetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return NewMyUnion()
    }
    return x.MyUnion
}



func (x *MyExceptionWithMessage) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyExceptionWithMessage"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyExceptionWithMessage) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I64)):  // MyIntField
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // MyStringField
            fieldReadErr = x.readField2(p)
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // myStruct
            fieldReadErr = x.readField3(p)
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // myUnion
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyExceptionWithMessage) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyExceptionWithMessage({")
    sb.WriteString(fmt.Sprintf("MyIntField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("MyStringField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("MyStruct:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("MyUnion:%s", x.toString4()))
    sb.WriteString("})")

    return sb.String()
}
func (x *MyExceptionWithMessage) setDefaults() *MyExceptionWithMessage {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyStructNonCompat(NewMyStruct()).
        SetMyUnionNonCompat(NewMyUnion())
}

func (x *MyExceptionWithMessage) Error() string {
    return x.String()
}

type ReservedKeyword struct {
    ReservedField int32 `thrift:"reserved_field,1" json:"reserved_field" db:"reserved_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ReservedKeyword)(nil)

func NewReservedKeyword() *ReservedKeyword {
    return (&ReservedKeyword{}).setDefaults()
}

func (x *ReservedKeyword) GetReservedField() int32 {
    return x.ReservedField
}

func (x *ReservedKeyword) SetReservedFieldNonCompat(value int32) *ReservedKeyword {
    x.ReservedField = value
    return x
}

func (x *ReservedKeyword) SetReservedField(value int32) *ReservedKeyword {
    x.ReservedField = value
    return x
}

func (x *ReservedKeyword) writeField1(p thrift.Encoder) error {  // ReservedField
    if err := p.WriteFieldBegin("reserved_field", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ReservedField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ReservedKeyword) readField1(p thrift.Decoder) error {  // ReservedField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.ReservedField = result
    return nil
}

func (x *ReservedKeyword) toString1() string {  // ReservedField
    return fmt.Sprintf("%v", x.ReservedField)
}



func (x *ReservedKeyword) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ReservedKeyword"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ReservedKeyword) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // reserved_field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ReservedKeyword) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ReservedKeyword({")
    sb.WriteString(fmt.Sprintf("ReservedField:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
func (x *ReservedKeyword) setDefaults() *ReservedKeyword {
    return x.
        SetReservedFieldNonCompat(0)
}


type UnionToBeRenamed struct {
    ReservedField *int32 `thrift:"reserved_field,1" json:"reserved_field,omitempty" db:"reserved_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*UnionToBeRenamed)(nil)

func NewUnionToBeRenamed() *UnionToBeRenamed {
    return (&UnionToBeRenamed{}).setDefaults()
}

func (x *UnionToBeRenamed) GetReservedField() int32 {
    if !x.IsSetReservedField() {
        return 0
    }
    return *x.ReservedField
}

func (x *UnionToBeRenamed) SetReservedFieldNonCompat(value int32) *UnionToBeRenamed {
    x.ReservedField = &value
    return x
}

func (x *UnionToBeRenamed) SetReservedField(value *int32) *UnionToBeRenamed {
    x.ReservedField = value
    return x
}

func (x *UnionToBeRenamed) IsSetReservedField() bool {
    return x != nil && x.ReservedField != nil
}

func (x *UnionToBeRenamed) writeField1(p thrift.Encoder) error {  // ReservedField
    if !x.IsSetReservedField() {
        return nil
    }

    if err := p.WriteFieldBegin("reserved_field", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.ReservedField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *UnionToBeRenamed) readField1(p thrift.Decoder) error {  // ReservedField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.ReservedField = &result
    return nil
}

func (x *UnionToBeRenamed) toString1() string {  // ReservedField
    if x.IsSetReservedField() {
        return fmt.Sprintf("%v", *x.ReservedField)
    }
    return fmt.Sprintf("%v", x.ReservedField)
}


func (x *UnionToBeRenamed) countSetFields() int {
    count := int(0)
    if (x.IsSetReservedField()) {
        count++
    }
    return count
}

func (x *UnionToBeRenamed) CountSetFieldsUnionToBeRenamed() int {
    return x.countSetFields()
}



func (x *UnionToBeRenamed) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("UnionToBeRenamed"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *UnionToBeRenamed) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // reserved_field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *UnionToBeRenamed) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("UnionToBeRenamed({")
    sb.WriteString(fmt.Sprintf("ReservedField:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
func (x *UnionToBeRenamed) setDefaults() *UnionToBeRenamed {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("test.dev/fixtures/basic/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("test.dev/fixtures/basic/Containers", func() any { return NewContainers() })
    registry.RegisterType("test.dev/fixtures/basic/MyDataItem", func() any { return NewMyDataItem() })
    registry.RegisterType("test.dev/fixtures/basic/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("test.dev/fixtures/basic/MyException", func() any { return NewMyException() })
    registry.RegisterType("test.dev/fixtures/basic/MyExceptionWithMessage", func() any { return NewMyExceptionWithMessage() })
    registry.RegisterType("test.dev/fixtures/basic/ReservedKeyword", func() any { return NewReservedKeyword() })
    registry.RegisterType("test.dev/fixtures/basic/UnionToBeRenamed", func() any { return NewUnionToBeRenamed() })

    registry.RegisterType("test.dev/fixtures/basic/MyEnum", func() any { return MyEnum(0) })
    registry.RegisterType("test.dev/fixtures/basic/HackEnum", func() any { return HackEnum(0) })
}
