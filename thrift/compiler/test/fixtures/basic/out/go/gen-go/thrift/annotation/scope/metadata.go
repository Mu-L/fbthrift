// Autogenerated by Thrift for thrift/annotation/scope.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package scope

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_scope_Transitive = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Transitive",
},

        }
    }()
    premadeThriftType_scope_Program = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Program",
},

        }
    }()
    premadeThriftType_scope_Struct = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Struct",
},

        }
    }()
    premadeThriftType_scope_Union = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Union",
},

        }
    }()
    premadeThriftType_scope_Exception = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Exception",
},

        }
    }()
    premadeThriftType_scope_Field = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Field",
},

        }
    }()
    premadeThriftType_scope_Typedef = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Typedef",
},

        }
    }()
    premadeThriftType_scope_Service = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Service",
},

        }
    }()
    premadeThriftType_scope_Interaction = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Interaction",
},

        }
    }()
    premadeThriftType_scope_Function = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Function",
},

        }
    }()
    premadeThriftType_scope_EnumValue = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.EnumValue",
},

        }
    }()
    premadeThriftType_scope_Const = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Const",
},

        }
    }()
    premadeThriftType_scope_Enum = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Enum",
},

        }
    }()
    premadeThriftType_scope_Structured = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Structured",
},

        }
    }()
    premadeThriftType_scope_Interface = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Interface",
},

        }
    }()
    premadeThriftType_scope_RootDefinition = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.RootDefinition",
},

        }
    }()
    premadeThriftType_scope_Definition = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.Definition",
},

        }
    }()
    premadeThriftType_scope_DisableSchemaConst = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "scope.DisableSchemaConst",
},

        }
    }()
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["scope.Transitive"] = premadeThriftType_scope_Transitive
    fbthriftThriftTypesMap["scope.Program"] = premadeThriftType_scope_Program
    fbthriftThriftTypesMap["scope.Struct"] = premadeThriftType_scope_Struct
    fbthriftThriftTypesMap["scope.Union"] = premadeThriftType_scope_Union
    fbthriftThriftTypesMap["scope.Exception"] = premadeThriftType_scope_Exception
    fbthriftThriftTypesMap["scope.Field"] = premadeThriftType_scope_Field
    fbthriftThriftTypesMap["scope.Typedef"] = premadeThriftType_scope_Typedef
    fbthriftThriftTypesMap["scope.Service"] = premadeThriftType_scope_Service
    fbthriftThriftTypesMap["scope.Interaction"] = premadeThriftType_scope_Interaction
    fbthriftThriftTypesMap["scope.Function"] = premadeThriftType_scope_Function
    fbthriftThriftTypesMap["scope.EnumValue"] = premadeThriftType_scope_EnumValue
    fbthriftThriftTypesMap["scope.Const"] = premadeThriftType_scope_Const
    fbthriftThriftTypesMap["scope.Enum"] = premadeThriftType_scope_Enum
    fbthriftThriftTypesMap["scope.Structured"] = premadeThriftType_scope_Structured
    fbthriftThriftTypesMap["scope.Interface"] = premadeThriftType_scope_Interface
    fbthriftThriftTypesMap["scope.RootDefinition"] = premadeThriftType_scope_RootDefinition
    fbthriftThriftTypesMap["scope.Definition"] = premadeThriftType_scope_Definition
    fbthriftThriftTypesMap["scope.DisableSchemaConst"] = premadeThriftType_scope_DisableSchemaConst
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Transitive))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Program))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Struct))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Union))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Exception))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Field))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Typedef))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Service))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Interaction))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Function))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_EnumValue))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Const))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Enum))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Structured))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Interface))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_RootDefinition))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Definition))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_DisableSchemaConst))
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    thriftMetadata := GetThriftMetadata()

    allServicesMap := thriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    thriftMetadata.SetServices(relevantServicesMap)

    return thriftMetadata
}

func getMetadataThriftPrimitiveType(s *thrift.CodecPrimitiveSpec) *metadata.ThriftPrimitiveType {
	var value metadata.ThriftPrimitiveType

	switch s.PrimitiveType {
	case thrift.CODEC_PRIMITIVE_TYPE_BYTE:
		value = metadata.ThriftPrimitiveType_THRIFT_BYTE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BOOL:
		value = metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I16:
		value = metadata.ThriftPrimitiveType_THRIFT_I16_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I32:
		value = metadata.ThriftPrimitiveType_THRIFT_I32_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I64:
		value = metadata.ThriftPrimitiveType_THRIFT_I64_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_FLOAT:
		value = metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_DOUBLE:
		value = metadata.ThriftPrimitiveType_THRIFT_DOUBLE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BINARY:
		value = metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_STRING:
		value = metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE
	}

	return thrift.Pointerize(value)
}

func getMetadataThriftEnumType(s *thrift.CodecEnumSpec) *metadata.ThriftEnumType {
	return metadata.NewThriftEnumType().
		SetName(s.ScopedName)
}

func getMetadataThriftSetType(s *thrift.CodecSetSpec) *metadata.ThriftSetType {
	return metadata.NewThriftSetType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftListType(s *thrift.CodecListSpec) *metadata.ThriftListType {
	return metadata.NewThriftListType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftMapType(s *thrift.CodecMapSpec) *metadata.ThriftMapType {
	return metadata.NewThriftMapType().
		SetKeyType(getMetadataThriftType(s.KeyTypeSpec)).
		SetValueType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftTypedefType(s *thrift.CodecTypedefSpec) *metadata.ThriftTypedefType {
	return metadata.NewThriftTypedefType().
		SetName(s.ScopedName).
		SetUnderlyingType(getMetadataThriftType(s.UnderlyingTypeSpec))
}

func getMetadataThriftStructType(s *thrift.CodecStructSpec) *metadata.ThriftStructType {
	return metadata.NewThriftStructType().
		SetName(s.ScopedName)
}

func getMetadataThriftUnionType(s *thrift.CodecStructSpec) *metadata.ThriftUnionType {
	return metadata.NewThriftUnionType().
		SetName(s.ScopedName)
}

func getMetadataThriftType(s *thrift.TypeSpec) *metadata.ThriftType {
	thriftType := metadata.NewThriftType()
	switch {
	case s.CodecPrimitiveSpec != nil:
		thriftType.SetTPrimitive(getMetadataThriftPrimitiveType(s.CodecPrimitiveSpec))
	case s.CodecEnumSpec != nil:
		thriftType.SetTEnum(getMetadataThriftEnumType(s.CodecEnumSpec))
	case s.CodecSetSpec != nil:
		thriftType.SetTSet(getMetadataThriftSetType(s.CodecSetSpec))
	case s.CodecListSpec != nil:
		thriftType.SetTList(getMetadataThriftListType(s.CodecListSpec))
	case s.CodecMapSpec != nil:
		thriftType.SetTMap(getMetadataThriftMapType(s.CodecMapSpec))
	case s.CodecTypedefSpec != nil:
		thriftType.SetTTypedef(getMetadataThriftTypedefType(s.CodecTypedefSpec))
	case s.CodecStructSpec != nil:
		if s.CodecStructSpec.IsUnion {
			thriftType.SetTUnion(getMetadataThriftUnionType(s.CodecStructSpec))
		} else {
			thriftType.SetTStruct(getMetadataThriftStructType(s.CodecStructSpec))
		}
	}
	return thriftType
}

func getMetadataThriftField(s *thrift.FieldSpec) *metadata.ThriftField {
	return metadata.NewThriftField().
		SetId(int32(s.ID)).
		SetName(s.Name).
		SetIsOptional(s.IsOptional).
		SetType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftStruct(s *thrift.StructSpec) *metadata.ThriftStruct {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftStruct().
		SetName(s.ScopedName).
		SetIsUnion(s.IsUnion).
		SetFields(metadataThriftFields)
}

func getMetadataThriftException(s *thrift.StructSpec) *metadata.ThriftException {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftException().
		SetName(s.ScopedName).
		SetFields(metadataThriftFields)
}
