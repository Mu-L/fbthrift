// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_module_MyEnum = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TEnum: &metadata.ThriftEnumType{
    Name: "module.MyEnum",
},

        }
    }()
    premadeThriftType_module_HackEnum = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TEnum: &metadata.ThriftEnumType{
    Name: "module.HackEnum",
},

        }
    }()
    premadeThriftType_i64 = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I64_TYPE),

        }
    }()
    premadeThriftType_string = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),

        }
    }()
    premadeThriftType_module_MyDataItem = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.MyDataItem",
},

        }
    }()
    premadeThriftType_module_MyDataItemAlias = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TTypedef: &metadata.ThriftTypedefType{
    Name:           "module.MyDataItemAlias",
    UnderlyingType: premadeThriftType_module_MyDataItem,
},

        }
    }()
    premadeThriftType_bool = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE),

        }
    }()
    premadeThriftType_float = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE),

        }
    }()
    premadeThriftType_set_float = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TSet: &metadata.ThriftSetType{
    ValueType: premadeThriftType_float,
},

        }
    }()
    premadeThriftType_module_MyStruct = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.MyStruct",
},

        }
    }()
    premadeThriftType_i32 = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I32_TYPE),

        }
    }()
    premadeThriftType_list_i32 = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TList: &metadata.ThriftListType{
    ValueType: premadeThriftType_i32,
},

        }
    }()
    premadeThriftType_set_string = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TSet: &metadata.ThriftSetType{
    ValueType: premadeThriftType_string,
},

        }
    }()
    premadeThriftType_map_string_i64 = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TMap: &metadata.ThriftMapType{
    KeyType:   premadeThriftType_string,
    ValueType: premadeThriftType_i64,
},

        }
    }()
    premadeThriftType_module_Containers = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.Containers",
},

        }
    }()
    premadeThriftType_module_MyEnumAlias = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TTypedef: &metadata.ThriftTypedefType{
    Name:           "module.MyEnumAlias",
    UnderlyingType: premadeThriftType_module_MyEnum,
},

        }
    }()
    premadeThriftType_module_MyUnion = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TUnion: &metadata.ThriftUnionType{
    Name: "module.MyUnion",
},

        }
    }()
    premadeThriftType_module_ReservedKeyword = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.ReservedKeyword",
},

        }
    }()
    premadeThriftType_module_UnionToBeRenamed = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TUnion: &metadata.ThriftUnionType{
    Name: "module.UnionToBeRenamed",
},

        }
    }()
    premadeThriftType_module_MyException = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.MyException",
},

        }
    }()
    premadeThriftType_module_MyExceptionWithMessage = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TStruct: &metadata.ThriftStructType{
    Name: "module.MyExceptionWithMessage",
},

        }
    }()
    premadeThriftType_void = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_VOID_TYPE),

        }
    }()
    premadeThriftType_binary = func() *metadata.ThriftType {
        return &metadata.ThriftType{
            TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE),

        }
    }()
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["module.MyEnum"] = premadeThriftType_module_MyEnum
    fbthriftThriftTypesMap["module.HackEnum"] = premadeThriftType_module_HackEnum
    fbthriftThriftTypesMap["i64"] = premadeThriftType_i64
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["module.MyDataItem"] = premadeThriftType_module_MyDataItem
    fbthriftThriftTypesMap["module.MyDataItemAlias"] = premadeThriftType_module_MyDataItemAlias
    fbthriftThriftTypesMap["bool"] = premadeThriftType_bool
    fbthriftThriftTypesMap["float"] = premadeThriftType_float
    fbthriftThriftTypesMap["module.MyStruct"] = premadeThriftType_module_MyStruct
    fbthriftThriftTypesMap["i32"] = premadeThriftType_i32
    fbthriftThriftTypesMap["module.Containers"] = premadeThriftType_module_Containers
    fbthriftThriftTypesMap["module.MyEnumAlias"] = premadeThriftType_module_MyEnumAlias
    fbthriftThriftTypesMap["module.MyUnion"] = premadeThriftType_module_MyUnion
    fbthriftThriftTypesMap["module.ReservedKeyword"] = premadeThriftType_module_ReservedKeyword
    fbthriftThriftTypesMap["module.UnionToBeRenamed"] = premadeThriftType_module_UnionToBeRenamed
    fbthriftThriftTypesMap["module.MyException"] = premadeThriftType_module_MyException
    fbthriftThriftTypesMap["module.MyExceptionWithMessage"] = premadeThriftType_module_MyExceptionWithMessage
    fbthriftThriftTypesMap["void"] = premadeThriftType_void
    fbthriftThriftTypesMap["binary"] = premadeThriftType_binary
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_MyStruct))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Containers))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_MyDataItem))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_MyUnion))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_ReservedKeyword))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_UnionToBeRenamed))
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    fbthriftResults = append(fbthriftResults, getMetadataThriftException(premadeStructSpec_MyException))
    fbthriftResults = append(fbthriftResults, getMetadataThriftException(premadeStructSpec_MyExceptionWithMessage))
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.MyEnum",
            Elements: map[int32]string{
                0: "MyValue1",
                1: "MyValue2",
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.HackEnum",
            Elements: map[int32]string{
                0: "Value1",
                1: "Value2",
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.FooService",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "simple_rpc",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.FB303Service",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "simple_rpc",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_module_ReservedKeyword,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "int_parameter",
                            IsOptional: false,
                            Type:       premadeThriftType_i32,
                        },
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.MyService",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "ping",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                },
                &metadata.ThriftFunction{
                    Name:       "getRandomData",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_string,
                },
                &metadata.ThriftFunction{
                    Name:       "sink",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "sink",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "putDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                        &metadata.ThriftField{
                            Id:         2,
                            Name:       "data",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "hasDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_bool,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "getDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_string,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "deleteDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "lobDataById",
                    IsOneway:   true,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                        &metadata.ThriftField{
                            Id:         2,
                            Name:       "data",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "invalid_return_for_hack",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_set_float,
                },
                &metadata.ThriftFunction{
                    Name:       "rpc_skipped_codegen",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.DbMixedStackArguments",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "getDataByKey0",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_binary,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "key",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "getDataByKey1",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_binary,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "key",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
            },
        },
    )
    return fbthriftResults
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    thriftMetadata := GetThriftMetadata()

    allServicesMap := thriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    thriftMetadata.SetServices(relevantServicesMap)

    return thriftMetadata
}

func getMetadataThriftPrimitiveType(s *thrift.CodecPrimitiveSpec) *metadata.ThriftPrimitiveType {
	var value metadata.ThriftPrimitiveType

	switch s.PrimitiveType {
	case thrift.CODEC_PRIMITIVE_TYPE_BYTE:
		value = metadata.ThriftPrimitiveType_THRIFT_BYTE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BOOL:
		value = metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I16:
		value = metadata.ThriftPrimitiveType_THRIFT_I16_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I32:
		value = metadata.ThriftPrimitiveType_THRIFT_I32_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I64:
		value = metadata.ThriftPrimitiveType_THRIFT_I64_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_FLOAT:
		value = metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_DOUBLE:
		value = metadata.ThriftPrimitiveType_THRIFT_DOUBLE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BINARY:
		value = metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_STRING:
		value = metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE
	}

	return thrift.Pointerize(value)
}

func getMetadataThriftEnumType(s *thrift.CodecEnumSpec) *metadata.ThriftEnumType {
	return metadata.NewThriftEnumType().
		SetName(s.ScopedName)
}

func getMetadataThriftSetType(s *thrift.CodecSetSpec) *metadata.ThriftSetType {
	return metadata.NewThriftSetType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftListType(s *thrift.CodecListSpec) *metadata.ThriftListType {
	return metadata.NewThriftListType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftMapType(s *thrift.CodecMapSpec) *metadata.ThriftMapType {
	return metadata.NewThriftMapType().
		SetKeyType(getMetadataThriftType(s.KeyTypeSpec)).
		SetValueType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftTypedefType(s *thrift.CodecTypedefSpec) *metadata.ThriftTypedefType {
	return metadata.NewThriftTypedefType().
		SetName(s.ScopedName).
		SetUnderlyingType(getMetadataThriftType(s.UnderlyingTypeSpec))
}

func getMetadataThriftStructType(s *thrift.CodecStructSpec) *metadata.ThriftStructType {
	return metadata.NewThriftStructType().
		SetName(s.ScopedName)
}

func getMetadataThriftUnionType(s *thrift.CodecStructSpec) *metadata.ThriftUnionType {
	return metadata.NewThriftUnionType().
		SetName(s.ScopedName)
}

func getMetadataThriftType(s *thrift.TypeSpec) *metadata.ThriftType {
	thriftType := metadata.NewThriftType()
	switch {
	case s.CodecPrimitiveSpec != nil:
		thriftType.SetTPrimitive(getMetadataThriftPrimitiveType(s.CodecPrimitiveSpec))
	case s.CodecEnumSpec != nil:
		thriftType.SetTEnum(getMetadataThriftEnumType(s.CodecEnumSpec))
	case s.CodecSetSpec != nil:
		thriftType.SetTSet(getMetadataThriftSetType(s.CodecSetSpec))
	case s.CodecListSpec != nil:
		thriftType.SetTList(getMetadataThriftListType(s.CodecListSpec))
	case s.CodecMapSpec != nil:
		thriftType.SetTMap(getMetadataThriftMapType(s.CodecMapSpec))
	case s.CodecTypedefSpec != nil:
		thriftType.SetTTypedef(getMetadataThriftTypedefType(s.CodecTypedefSpec))
	case s.CodecStructSpec != nil:
		if s.CodecStructSpec.IsUnion {
			thriftType.SetTUnion(getMetadataThriftUnionType(s.CodecStructSpec))
		} else {
			thriftType.SetTStruct(getMetadataThriftStructType(s.CodecStructSpec))
		}
	}
	return thriftType
}

func getMetadataThriftField(s *thrift.FieldSpec) *metadata.ThriftField {
	return metadata.NewThriftField().
		SetId(int32(s.ID)).
		SetName(s.Name).
		SetIsOptional(s.IsOptional).
		SetType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftStruct(s *thrift.StructSpec) *metadata.ThriftStruct {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftStruct().
		SetName(s.ScopedName).
		SetIsUnion(s.IsUnion).
		SetFields(metadataThriftFields)
}

func getMetadataThriftException(s *thrift.StructSpec) *metadata.ThriftException {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftException().
		SetName(s.ScopedName).
		SetFields(metadataThriftFields)
}
