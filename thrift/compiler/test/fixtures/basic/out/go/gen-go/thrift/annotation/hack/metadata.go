// Autogenerated by Thrift for thrift/annotation/hack.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package hack

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_string = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),

    }
    premadeThriftType_hack_FieldWrapper = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.FieldWrapper",
},

    }
    premadeThriftType_hack_Wrapper = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.Wrapper",
},

    }
    premadeThriftType_hack_Adapter = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.Adapter",
},

    }
    premadeThriftType_hack_SkipCodegen = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.SkipCodegen",
},

    }
    premadeThriftType_hack_Name = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.Name",
},

    }
    premadeThriftType_list_string = &metadata.ThriftType{
        TList: &metadata.ThriftListType{
    ValueType: premadeThriftType_string,
},

    }
    premadeThriftType_hack_UnionEnumAttributes = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.UnionEnumAttributes",
},

    }
    premadeThriftType_hack_StructTrait = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.StructTrait",
},

    }
    premadeThriftType_hack_Attributes = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.Attributes",
},

    }
    premadeThriftType_hack_StructAsTrait = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.StructAsTrait",
},

    }
    premadeThriftType_hack_ModuleInternal = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.ModuleInternal",
},

    }
    premadeThriftType_hack_GenerateClientMethodsWithHeaders = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "hack.GenerateClientMethodsWithHeaders",
},

    }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["hack.FieldWrapper"] = premadeThriftType_hack_FieldWrapper
    fbthriftThriftTypesMap["hack.Wrapper"] = premadeThriftType_hack_Wrapper
    fbthriftThriftTypesMap["hack.Adapter"] = premadeThriftType_hack_Adapter
    fbthriftThriftTypesMap["hack.SkipCodegen"] = premadeThriftType_hack_SkipCodegen
    fbthriftThriftTypesMap["hack.Name"] = premadeThriftType_hack_Name
    fbthriftThriftTypesMap["hack.UnionEnumAttributes"] = premadeThriftType_hack_UnionEnumAttributes
    fbthriftThriftTypesMap["hack.StructTrait"] = premadeThriftType_hack_StructTrait
    fbthriftThriftTypesMap["hack.Attributes"] = premadeThriftType_hack_Attributes
    fbthriftThriftTypesMap["hack.StructAsTrait"] = premadeThriftType_hack_StructAsTrait
    fbthriftThriftTypesMap["hack.ModuleInternal"] = premadeThriftType_hack_ModuleInternal
    fbthriftThriftTypesMap["hack.GenerateClientMethodsWithHeaders"] = premadeThriftType_hack_GenerateClientMethodsWithHeaders
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.FieldWrapper",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "name",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.Wrapper",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "name",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "underlyingName",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "extraNamespace",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.Adapter",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "name",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.SkipCodegen",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "reason",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.Name",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "name",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "reason",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.UnionEnumAttributes",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "attributes",
                    IsOptional: false,
                    Type:       premadeThriftType_list_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.StructTrait",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "name",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.Attributes",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "attributes",
                    IsOptional: false,
                    Type:       premadeThriftType_list_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.StructAsTrait",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.ModuleInternal",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "hack.GenerateClientMethodsWithHeaders",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
