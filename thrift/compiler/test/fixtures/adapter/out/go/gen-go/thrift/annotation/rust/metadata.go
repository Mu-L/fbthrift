// Autogenerated by Thrift for thrift/annotation/rust.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package rust

import (
    "maps"
    "sync"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_string *metadata.ThriftType = nil
    premadeThriftType_rust_Name *metadata.ThriftType = nil
    premadeThriftType_rust_Copy *metadata.ThriftType = nil
    premadeThriftType_rust_RequestContext *metadata.ThriftType = nil
    premadeThriftType_rust_Arc *metadata.ThriftType = nil
    premadeThriftType_rust_Box *metadata.ThriftType = nil
    premadeThriftType_rust_Exhaustive *metadata.ThriftType = nil
    premadeThriftType_rust_Ord *metadata.ThriftType = nil
    premadeThriftType_rust_NewType *metadata.ThriftType = nil
    premadeThriftType_rust_Type *metadata.ThriftType = nil
    premadeThriftType_bool *metadata.ThriftType = nil
    premadeThriftType_rust_Serde *metadata.ThriftType = nil
    premadeThriftType_rust_Mod *metadata.ThriftType = nil
    premadeThriftType_rust_Adapter *metadata.ThriftType = nil
    premadeThriftType_list_string *metadata.ThriftType = nil
    premadeThriftType_rust_Derive *metadata.ThriftType = nil
    premadeThriftType_rust_ServiceExn *metadata.ThriftType = nil
)

// Premade Thrift type initializer
var premadeThriftTypesInitOnce = sync.OnceFunc(func() {
    premadeThriftType_string = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    )
    premadeThriftType_rust_Name = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Name"),
    )
    premadeThriftType_rust_Copy = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Copy"),
    )
    premadeThriftType_rust_RequestContext = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.RequestContext"),
    )
    premadeThriftType_rust_Arc = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Arc"),
    )
    premadeThriftType_rust_Box = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Box"),
    )
    premadeThriftType_rust_Exhaustive = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Exhaustive"),
    )
    premadeThriftType_rust_Ord = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Ord"),
    )
    premadeThriftType_rust_NewType = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.NewType"),
    )
    premadeThriftType_rust_Type = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Type"),
    )
    premadeThriftType_bool = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
    )
    premadeThriftType_rust_Serde = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Serde"),
    )
    premadeThriftType_rust_Mod = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Mod"),
    )
    premadeThriftType_rust_Adapter = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Adapter"),
    )
    premadeThriftType_list_string = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_string),
    )
    premadeThriftType_rust_Derive = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.Derive"),
    )
    premadeThriftType_rust_ServiceExn = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("rust.ServiceExn"),
    )
})

// Helper type to allow us to store Thrift types in a slice at compile time,
// and put them in a map at runtime. See comment at the top of template
// about a compilation limitation that affects map literals.
type thriftTypeWithFullName struct {
    fullName   string
    thriftType *metadata.ThriftType
}

var premadeThriftTypesMapOnce = sync.OnceValue(
    func() map[string]*metadata.ThriftType {
        // Relies on premade Thrift types initialization
        premadeThriftTypesInitOnce()

        thriftTypesWithFullName := make([]thriftTypeWithFullName, 0)
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "string", premadeThriftType_string })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Name", premadeThriftType_rust_Name })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Copy", premadeThriftType_rust_Copy })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.RequestContext", premadeThriftType_rust_RequestContext })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Arc", premadeThriftType_rust_Arc })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Box", premadeThriftType_rust_Box })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Exhaustive", premadeThriftType_rust_Exhaustive })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Ord", premadeThriftType_rust_Ord })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.NewType", premadeThriftType_rust_NewType })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Type", premadeThriftType_rust_Type })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "bool", premadeThriftType_bool })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Serde", premadeThriftType_rust_Serde })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Mod", premadeThriftType_rust_Mod })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Adapter", premadeThriftType_rust_Adapter })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.Derive", premadeThriftType_rust_Derive })
        thriftTypesWithFullName = append(thriftTypesWithFullName, thriftTypeWithFullName{ "rust.ServiceExn", premadeThriftType_rust_ServiceExn })

        fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType, len(thriftTypesWithFullName))
        for _, value := range thriftTypesWithFullName {
            fbthriftThriftTypesMap[value.fullName] = value.thriftType
        }
        return fbthriftThriftTypesMap
    },
)

var structMetadatasOnce = sync.OnceValue(
    func() []*metadata.ThriftStruct {
        // Relies on premade Thrift types initialization
        premadeThriftTypesInitOnce()
        fbthriftThriftStructs := make([]*metadata.ThriftStruct, 0)
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Name").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Copy").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.RequestContext").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Arc").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Box").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Exhaustive").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Ord").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.NewType").
    SetIsUnion(false))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Type").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Serde").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("enabled").
    SetIsOptional(false).
    SetType(premadeThriftType_bool),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Mod").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Adapter").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.Derive").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("derives").
    SetIsOptional(false).
    SetType(premadeThriftType_list_string),
        },
    ))
        fbthriftThriftStructs = append(fbthriftThriftStructs, metadata.NewThriftStruct().
    SetName("rust.ServiceExn").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("anyhow_to_application_exn").
    SetIsOptional(false).
    SetType(premadeThriftType_bool),
        },
    ))
        return fbthriftThriftStructs
    },
)

var exceptionMetadatasOnce = sync.OnceValue(
    func() []*metadata.ThriftException {
        // Relies on premade Thrift types initialization
        premadeThriftTypesInitOnce()
        return []*metadata.ThriftException{
        }
    },
)

var enumMetadatasOnce = sync.OnceValue(
    func() []*metadata.ThriftEnum {
        // Relies on premade Thrift types initialization
        premadeThriftTypesInitOnce()
        return []*metadata.ThriftEnum{
        }
    },
)

var serviceMetadatasOnce = sync.OnceValue(
    func() []*metadata.ThriftService {
        // Relies on premade Thrift types initialization
        premadeThriftTypesInitOnce()
        return []*metadata.ThriftService{
        }
    },
)

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMapOnce()[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatasOnce() {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatasOnce() {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatasOnce() {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatasOnce() {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    thriftMetadata := GetThriftMetadata()

    allServicesMap := thriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    thriftMetadata.SetServices(relevantServicesMap)

    return thriftMetadata
}
