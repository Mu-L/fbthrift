

#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import abc as _abc
import typing as _typing

_fbthrift_property = property


import folly.iobuf as _fbthrift_iobuf
import thrift.python.abstract_types as _fbthrift_python_abstract_types
import b.thrift_abstract_types as _fbthrift__b__thrift_abstract_types
import c.thrift_abstract_types as _fbthrift__c__thrift_abstract_types
import typeshed_three
import typeshed_two
import typeshed_one

from a.thrift_enums import *
class MyStruct(_abc.ABC):
    @_fbthrift_property
    @_abc.abstractmethod
    def a(self) -> typeshed_one.AdapterOneType[_fbthrift__b__thrift_abstract_types.B]: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def b(self) -> typeshed_three.AdapterThreeType[_fbthrift__c__thrift_abstract_types.C1]: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def c(self) -> typeshed_two.AdapterTwoType[_fbthrift__c__thrift_abstract_types.C2]: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[typeshed_one.AdapterOneType[_fbthrift__b__thrift_abstract_types.B], typeshed_three.AdapterThreeType[_fbthrift__c__thrift_abstract_types.C1], typeshed_two.AdapterTwoType[_fbthrift__c__thrift_abstract_types.C2]]]]: ...
    @_abc.abstractmethod
    def _to_python(self) -> "a.thrift_types.MyStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "a.types.MyStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "a.ttypes.MyStruct": ...  # type: ignore
_fbthrift_MyStruct = MyStruct
