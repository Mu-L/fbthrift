/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Containers implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Containers");
  private static final TField STRUCT_LIST_FIELD_DESC = new TField("struct_list", TType.LIST, (short)1);
  private static final TField UNION_LIST_FIELD_DESC = new TField("union_list", TType.LIST, (short)2);
  private static final TField ENUM_LIST_FIELD_DESC = new TField("enum_list", TType.LIST, (short)3);
  private static final TField STRUCT_SET_FIELD_DESC = new TField("struct_set", TType.SET, (short)4);
  private static final TField UNION_SET_FIELD_DESC = new TField("union_set", TType.SET, (short)5);
  private static final TField ENUM_SET_FIELD_DESC = new TField("enum_set", TType.SET, (short)6);
  private static final TField STRUCT_MAP_FIELD_DESC = new TField("struct_map", TType.MAP, (short)7);
  private static final TField UNION_MAP_FIELD_DESC = new TField("union_map", TType.MAP, (short)8);
  private static final TField ENUM_MAP_FIELD_DESC = new TField("enum_map", TType.MAP, (short)9);
  private static final TField STRUCT_MAP_2_FIELD_DESC = new TField("struct_map_2", TType.MAP, (short)10);
  private static final TField UNION_MAP_2_FIELD_DESC = new TField("union_map_2", TType.MAP, (short)11);
  private static final TField ENUM_MAP_2_FIELD_DESC = new TField("enum_map_2", TType.MAP, (short)12);
  private static final TField LIST_MAP_FIELD_DESC = new TField("list_map", TType.MAP, (short)13);
  private static final TField LIST_MAP_2_FIELD_DESC = new TField("list_map_2", TType.MAP, (short)14);
  private static final TField SET_MAP_FIELD_DESC = new TField("set_map", TType.MAP, (short)15);
  private static final TField SET_MAP_2_FIELD_DESC = new TField("set_map_2", TType.MAP, (short)16);
  private static final TField MAP_MAP_FIELD_DESC = new TField("map_map", TType.MAP, (short)17);
  private static final TField MAP_MAP_2_FIELD_DESC = new TField("map_map_2", TType.MAP, (short)18);

  public List<MyStruct> struct_list;
  public List<MyUnion> union_list;
  public List<MyEnum> enum_list;
  public Set<MyStruct> struct_set;
  public Set<MyUnion> union_set;
  public Set<MyEnum> enum_set;
  public Map<MyStruct,Long> struct_map;
  public Map<MyUnion,Long> union_map;
  public Map<MyEnum,Long> enum_map;
  public Map<Integer,MyStruct> struct_map_2;
  public Map<Integer,MyUnion> union_map_2;
  public Map<Integer,MyEnum> enum_map_2;
  public Map<List<Integer>,Integer> list_map;
  public Map<Integer,List<Integer>> list_map_2;
  public Map<Set<Integer>,Integer> set_map;
  public Map<Integer,Set<Integer>> set_map_2;
  public Map<Map<Integer,Integer>,Integer> map_map;
  public Map<Integer,Map<Integer,Integer>> map_map_2;
  public static final int STRUCT_LIST = 1;
  public static final int UNION_LIST = 2;
  public static final int ENUM_LIST = 3;
  public static final int STRUCT_SET = 4;
  public static final int UNION_SET = 5;
  public static final int ENUM_SET = 6;
  public static final int STRUCT_MAP = 7;
  public static final int UNION_MAP = 8;
  public static final int ENUM_MAP = 9;
  public static final int STRUCT_MAP_2 = 10;
  public static final int UNION_MAP_2 = 11;
  public static final int ENUM_MAP_2 = 12;
  public static final int LIST_MAP = 13;
  public static final int LIST_MAP_2 = 14;
  public static final int SET_MAP = 15;
  public static final int SET_MAP_2 = 16;
  public static final int MAP_MAP = 17;
  public static final int MAP_MAP_2 = 18;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(STRUCT_LIST, new FieldMetaData("struct_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_LIST, new FieldMetaData("union_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_LIST, new FieldMetaData("enum_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(STRUCT_SET, new FieldMetaData("struct_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_SET, new FieldMetaData("union_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_SET, new FieldMetaData("enum_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(STRUCT_MAP, new FieldMetaData("struct_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyStruct.class), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(UNION_MAP, new FieldMetaData("union_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyUnion.class), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ENUM_MAP, new FieldMetaData("enum_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(STRUCT_MAP_2, new FieldMetaData("struct_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_MAP_2, new FieldMetaData("union_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_MAP_2, new FieldMetaData("enum_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LIST_MAP, new FieldMetaData("list_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LIST_MAP_2, new FieldMetaData("list_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_MAP, new FieldMetaData("set_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(SET_MAP_2, new FieldMetaData("set_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(MAP_MAP, new FieldMetaData("map_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAP_MAP_2, new FieldMetaData("map_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Containers.class, metaDataMap);
  }

  public Containers() {
  }

  public Containers(
      List<MyStruct> struct_list,
      List<MyUnion> union_list,
      List<MyEnum> enum_list,
      Set<MyStruct> struct_set,
      Set<MyUnion> union_set,
      Set<MyEnum> enum_set,
      Map<MyStruct,Long> struct_map,
      Map<MyUnion,Long> union_map,
      Map<MyEnum,Long> enum_map,
      Map<Integer,MyStruct> struct_map_2,
      Map<Integer,MyUnion> union_map_2,
      Map<Integer,MyEnum> enum_map_2,
      Map<List<Integer>,Integer> list_map,
      Map<Integer,List<Integer>> list_map_2,
      Map<Set<Integer>,Integer> set_map,
      Map<Integer,Set<Integer>> set_map_2,
      Map<Map<Integer,Integer>,Integer> map_map,
      Map<Integer,Map<Integer,Integer>> map_map_2) {
    this();
    this.struct_list = struct_list;
    this.union_list = union_list;
    this.enum_list = enum_list;
    this.struct_set = struct_set;
    this.union_set = union_set;
    this.enum_set = enum_set;
    this.struct_map = struct_map;
    this.union_map = union_map;
    this.enum_map = enum_map;
    this.struct_map_2 = struct_map_2;
    this.union_map_2 = union_map_2;
    this.enum_map_2 = enum_map_2;
    this.list_map = list_map;
    this.list_map_2 = list_map_2;
    this.set_map = set_map;
    this.set_map_2 = set_map_2;
    this.map_map = map_map;
    this.map_map_2 = map_map_2;
  }

  public static class Builder {
    private List<MyStruct> struct_list;
    private List<MyUnion> union_list;
    private List<MyEnum> enum_list;
    private Set<MyStruct> struct_set;
    private Set<MyUnion> union_set;
    private Set<MyEnum> enum_set;
    private Map<MyStruct,Long> struct_map;
    private Map<MyUnion,Long> union_map;
    private Map<MyEnum,Long> enum_map;
    private Map<Integer,MyStruct> struct_map_2;
    private Map<Integer,MyUnion> union_map_2;
    private Map<Integer,MyEnum> enum_map_2;
    private Map<List<Integer>,Integer> list_map;
    private Map<Integer,List<Integer>> list_map_2;
    private Map<Set<Integer>,Integer> set_map;
    private Map<Integer,Set<Integer>> set_map_2;
    private Map<Map<Integer,Integer>,Integer> map_map;
    private Map<Integer,Map<Integer,Integer>> map_map_2;

    public Builder() {
    }

    public Builder setStruct_list(final List<MyStruct> struct_list) {
      this.struct_list = struct_list;
      return this;
    }

    public Builder setUnion_list(final List<MyUnion> union_list) {
      this.union_list = union_list;
      return this;
    }

    public Builder setEnum_list(final List<MyEnum> enum_list) {
      this.enum_list = enum_list;
      return this;
    }

    public Builder setStruct_set(final Set<MyStruct> struct_set) {
      this.struct_set = struct_set;
      return this;
    }

    public Builder setUnion_set(final Set<MyUnion> union_set) {
      this.union_set = union_set;
      return this;
    }

    public Builder setEnum_set(final Set<MyEnum> enum_set) {
      this.enum_set = enum_set;
      return this;
    }

    public Builder setStruct_map(final Map<MyStruct,Long> struct_map) {
      this.struct_map = struct_map;
      return this;
    }

    public Builder setUnion_map(final Map<MyUnion,Long> union_map) {
      this.union_map = union_map;
      return this;
    }

    public Builder setEnum_map(final Map<MyEnum,Long> enum_map) {
      this.enum_map = enum_map;
      return this;
    }

    public Builder setStruct_map_2(final Map<Integer,MyStruct> struct_map_2) {
      this.struct_map_2 = struct_map_2;
      return this;
    }

    public Builder setUnion_map_2(final Map<Integer,MyUnion> union_map_2) {
      this.union_map_2 = union_map_2;
      return this;
    }

    public Builder setEnum_map_2(final Map<Integer,MyEnum> enum_map_2) {
      this.enum_map_2 = enum_map_2;
      return this;
    }

    public Builder setList_map(final Map<List<Integer>,Integer> list_map) {
      this.list_map = list_map;
      return this;
    }

    public Builder setList_map_2(final Map<Integer,List<Integer>> list_map_2) {
      this.list_map_2 = list_map_2;
      return this;
    }

    public Builder setSet_map(final Map<Set<Integer>,Integer> set_map) {
      this.set_map = set_map;
      return this;
    }

    public Builder setSet_map_2(final Map<Integer,Set<Integer>> set_map_2) {
      this.set_map_2 = set_map_2;
      return this;
    }

    public Builder setMap_map(final Map<Map<Integer,Integer>,Integer> map_map) {
      this.map_map = map_map;
      return this;
    }

    public Builder setMap_map_2(final Map<Integer,Map<Integer,Integer>> map_map_2) {
      this.map_map_2 = map_map_2;
      return this;
    }

    public Containers build() {
      Containers result = new Containers();
      result.setStruct_list(this.struct_list);
      result.setUnion_list(this.union_list);
      result.setEnum_list(this.enum_list);
      result.setStruct_set(this.struct_set);
      result.setUnion_set(this.union_set);
      result.setEnum_set(this.enum_set);
      result.setStruct_map(this.struct_map);
      result.setUnion_map(this.union_map);
      result.setEnum_map(this.enum_map);
      result.setStruct_map_2(this.struct_map_2);
      result.setUnion_map_2(this.union_map_2);
      result.setEnum_map_2(this.enum_map_2);
      result.setList_map(this.list_map);
      result.setList_map_2(this.list_map_2);
      result.setSet_map(this.set_map);
      result.setSet_map_2(this.set_map_2);
      result.setMap_map(this.map_map);
      result.setMap_map_2(this.map_map_2);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Containers(Containers other) {
    if (other.isSetStruct_list()) {
      this.struct_list = TBaseHelper.deepCopy(other.struct_list);
    }
    if (other.isSetUnion_list()) {
      this.union_list = TBaseHelper.deepCopy(other.union_list);
    }
    if (other.isSetEnum_list()) {
      this.enum_list = TBaseHelper.deepCopy(other.enum_list);
    }
    if (other.isSetStruct_set()) {
      this.struct_set = TBaseHelper.deepCopy(other.struct_set);
    }
    if (other.isSetUnion_set()) {
      this.union_set = TBaseHelper.deepCopy(other.union_set);
    }
    if (other.isSetEnum_set()) {
      this.enum_set = TBaseHelper.deepCopy(other.enum_set);
    }
    if (other.isSetStruct_map()) {
      this.struct_map = TBaseHelper.deepCopy(other.struct_map);
    }
    if (other.isSetUnion_map()) {
      this.union_map = TBaseHelper.deepCopy(other.union_map);
    }
    if (other.isSetEnum_map()) {
      this.enum_map = TBaseHelper.deepCopy(other.enum_map);
    }
    if (other.isSetStruct_map_2()) {
      this.struct_map_2 = TBaseHelper.deepCopy(other.struct_map_2);
    }
    if (other.isSetUnion_map_2()) {
      this.union_map_2 = TBaseHelper.deepCopy(other.union_map_2);
    }
    if (other.isSetEnum_map_2()) {
      this.enum_map_2 = TBaseHelper.deepCopy(other.enum_map_2);
    }
    if (other.isSetList_map()) {
      this.list_map = TBaseHelper.deepCopy(other.list_map);
    }
    if (other.isSetList_map_2()) {
      this.list_map_2 = TBaseHelper.deepCopy(other.list_map_2);
    }
    if (other.isSetSet_map()) {
      this.set_map = TBaseHelper.deepCopy(other.set_map);
    }
    if (other.isSetSet_map_2()) {
      this.set_map_2 = TBaseHelper.deepCopy(other.set_map_2);
    }
    if (other.isSetMap_map()) {
      this.map_map = TBaseHelper.deepCopy(other.map_map);
    }
    if (other.isSetMap_map_2()) {
      this.map_map_2 = TBaseHelper.deepCopy(other.map_map_2);
    }
  }

  public Containers deepCopy() {
    return new Containers(this);
  }

  public List<MyStruct> getStruct_list() {
    return this.struct_list;
  }

  public Containers setStruct_list(List<MyStruct> struct_list) {
    this.struct_list = struct_list;
    return this;
  }

  public void unsetStruct_list() {
    this.struct_list = null;
  }

  // Returns true if field struct_list is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_list() {
    return this.struct_list != null;
  }

  public void setStruct_listIsSet(boolean __value) {
    if (!__value) {
      this.struct_list = null;
    }
  }

  public List<MyUnion> getUnion_list() {
    return this.union_list;
  }

  public Containers setUnion_list(List<MyUnion> union_list) {
    this.union_list = union_list;
    return this;
  }

  public void unsetUnion_list() {
    this.union_list = null;
  }

  // Returns true if field union_list is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_list() {
    return this.union_list != null;
  }

  public void setUnion_listIsSet(boolean __value) {
    if (!__value) {
      this.union_list = null;
    }
  }

  public List<MyEnum> getEnum_list() {
    return this.enum_list;
  }

  public Containers setEnum_list(List<MyEnum> enum_list) {
    this.enum_list = enum_list;
    return this;
  }

  public void unsetEnum_list() {
    this.enum_list = null;
  }

  // Returns true if field enum_list is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_list() {
    return this.enum_list != null;
  }

  public void setEnum_listIsSet(boolean __value) {
    if (!__value) {
      this.enum_list = null;
    }
  }

  public Set<MyStruct> getStruct_set() {
    return this.struct_set;
  }

  public Containers setStruct_set(Set<MyStruct> struct_set) {
    this.struct_set = struct_set;
    return this;
  }

  public void unsetStruct_set() {
    this.struct_set = null;
  }

  // Returns true if field struct_set is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_set() {
    return this.struct_set != null;
  }

  public void setStruct_setIsSet(boolean __value) {
    if (!__value) {
      this.struct_set = null;
    }
  }

  public Set<MyUnion> getUnion_set() {
    return this.union_set;
  }

  public Containers setUnion_set(Set<MyUnion> union_set) {
    this.union_set = union_set;
    return this;
  }

  public void unsetUnion_set() {
    this.union_set = null;
  }

  // Returns true if field union_set is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_set() {
    return this.union_set != null;
  }

  public void setUnion_setIsSet(boolean __value) {
    if (!__value) {
      this.union_set = null;
    }
  }

  public Set<MyEnum> getEnum_set() {
    return this.enum_set;
  }

  public Containers setEnum_set(Set<MyEnum> enum_set) {
    this.enum_set = enum_set;
    return this;
  }

  public void unsetEnum_set() {
    this.enum_set = null;
  }

  // Returns true if field enum_set is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_set() {
    return this.enum_set != null;
  }

  public void setEnum_setIsSet(boolean __value) {
    if (!__value) {
      this.enum_set = null;
    }
  }

  public Map<MyStruct,Long> getStruct_map() {
    return this.struct_map;
  }

  public Containers setStruct_map(Map<MyStruct,Long> struct_map) {
    this.struct_map = struct_map;
    return this;
  }

  public void unsetStruct_map() {
    this.struct_map = null;
  }

  // Returns true if field struct_map is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_map() {
    return this.struct_map != null;
  }

  public void setStruct_mapIsSet(boolean __value) {
    if (!__value) {
      this.struct_map = null;
    }
  }

  public Map<MyUnion,Long> getUnion_map() {
    return this.union_map;
  }

  public Containers setUnion_map(Map<MyUnion,Long> union_map) {
    this.union_map = union_map;
    return this;
  }

  public void unsetUnion_map() {
    this.union_map = null;
  }

  // Returns true if field union_map is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_map() {
    return this.union_map != null;
  }

  public void setUnion_mapIsSet(boolean __value) {
    if (!__value) {
      this.union_map = null;
    }
  }

  public Map<MyEnum,Long> getEnum_map() {
    return this.enum_map;
  }

  public Containers setEnum_map(Map<MyEnum,Long> enum_map) {
    this.enum_map = enum_map;
    return this;
  }

  public void unsetEnum_map() {
    this.enum_map = null;
  }

  // Returns true if field enum_map is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_map() {
    return this.enum_map != null;
  }

  public void setEnum_mapIsSet(boolean __value) {
    if (!__value) {
      this.enum_map = null;
    }
  }

  public Map<Integer,MyStruct> getStruct_map_2() {
    return this.struct_map_2;
  }

  public Containers setStruct_map_2(Map<Integer,MyStruct> struct_map_2) {
    this.struct_map_2 = struct_map_2;
    return this;
  }

  public void unsetStruct_map_2() {
    this.struct_map_2 = null;
  }

  // Returns true if field struct_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_map_2() {
    return this.struct_map_2 != null;
  }

  public void setStruct_map_2IsSet(boolean __value) {
    if (!__value) {
      this.struct_map_2 = null;
    }
  }

  public Map<Integer,MyUnion> getUnion_map_2() {
    return this.union_map_2;
  }

  public Containers setUnion_map_2(Map<Integer,MyUnion> union_map_2) {
    this.union_map_2 = union_map_2;
    return this;
  }

  public void unsetUnion_map_2() {
    this.union_map_2 = null;
  }

  // Returns true if field union_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_map_2() {
    return this.union_map_2 != null;
  }

  public void setUnion_map_2IsSet(boolean __value) {
    if (!__value) {
      this.union_map_2 = null;
    }
  }

  public Map<Integer,MyEnum> getEnum_map_2() {
    return this.enum_map_2;
  }

  public Containers setEnum_map_2(Map<Integer,MyEnum> enum_map_2) {
    this.enum_map_2 = enum_map_2;
    return this;
  }

  public void unsetEnum_map_2() {
    this.enum_map_2 = null;
  }

  // Returns true if field enum_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_map_2() {
    return this.enum_map_2 != null;
  }

  public void setEnum_map_2IsSet(boolean __value) {
    if (!__value) {
      this.enum_map_2 = null;
    }
  }

  public Map<List<Integer>,Integer> getList_map() {
    return this.list_map;
  }

  public Containers setList_map(Map<List<Integer>,Integer> list_map) {
    this.list_map = list_map;
    return this;
  }

  public void unsetList_map() {
    this.list_map = null;
  }

  // Returns true if field list_map is set (has been assigned a value) and false otherwise
  public boolean isSetList_map() {
    return this.list_map != null;
  }

  public void setList_mapIsSet(boolean __value) {
    if (!__value) {
      this.list_map = null;
    }
  }

  public Map<Integer,List<Integer>> getList_map_2() {
    return this.list_map_2;
  }

  public Containers setList_map_2(Map<Integer,List<Integer>> list_map_2) {
    this.list_map_2 = list_map_2;
    return this;
  }

  public void unsetList_map_2() {
    this.list_map_2 = null;
  }

  // Returns true if field list_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetList_map_2() {
    return this.list_map_2 != null;
  }

  public void setList_map_2IsSet(boolean __value) {
    if (!__value) {
      this.list_map_2 = null;
    }
  }

  public Map<Set<Integer>,Integer> getSet_map() {
    return this.set_map;
  }

  public Containers setSet_map(Map<Set<Integer>,Integer> set_map) {
    this.set_map = set_map;
    return this;
  }

  public void unsetSet_map() {
    this.set_map = null;
  }

  // Returns true if field set_map is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map() {
    return this.set_map != null;
  }

  public void setSet_mapIsSet(boolean __value) {
    if (!__value) {
      this.set_map = null;
    }
  }

  public Map<Integer,Set<Integer>> getSet_map_2() {
    return this.set_map_2;
  }

  public Containers setSet_map_2(Map<Integer,Set<Integer>> set_map_2) {
    this.set_map_2 = set_map_2;
    return this;
  }

  public void unsetSet_map_2() {
    this.set_map_2 = null;
  }

  // Returns true if field set_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map_2() {
    return this.set_map_2 != null;
  }

  public void setSet_map_2IsSet(boolean __value) {
    if (!__value) {
      this.set_map_2 = null;
    }
  }

  public Map<Map<Integer,Integer>,Integer> getMap_map() {
    return this.map_map;
  }

  public Containers setMap_map(Map<Map<Integer,Integer>,Integer> map_map) {
    this.map_map = map_map;
    return this;
  }

  public void unsetMap_map() {
    this.map_map = null;
  }

  // Returns true if field map_map is set (has been assigned a value) and false otherwise
  public boolean isSetMap_map() {
    return this.map_map != null;
  }

  public void setMap_mapIsSet(boolean __value) {
    if (!__value) {
      this.map_map = null;
    }
  }

  public Map<Integer,Map<Integer,Integer>> getMap_map_2() {
    return this.map_map_2;
  }

  public Containers setMap_map_2(Map<Integer,Map<Integer,Integer>> map_map_2) {
    this.map_map_2 = map_map_2;
    return this;
  }

  public void unsetMap_map_2() {
    this.map_map_2 = null;
  }

  // Returns true if field map_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_map_2() {
    return this.map_map_2 != null;
  }

  public void setMap_map_2IsSet(boolean __value) {
    if (!__value) {
      this.map_map_2 = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case STRUCT_LIST:
      if (__value == null) {
        unsetStruct_list();
      } else {
        setStruct_list((List<MyStruct>)__value);
      }
      break;

    case UNION_LIST:
      if (__value == null) {
        unsetUnion_list();
      } else {
        setUnion_list((List<MyUnion>)__value);
      }
      break;

    case ENUM_LIST:
      if (__value == null) {
        unsetEnum_list();
      } else {
        setEnum_list((List<MyEnum>)__value);
      }
      break;

    case STRUCT_SET:
      if (__value == null) {
        unsetStruct_set();
      } else {
        setStruct_set((Set<MyStruct>)__value);
      }
      break;

    case UNION_SET:
      if (__value == null) {
        unsetUnion_set();
      } else {
        setUnion_set((Set<MyUnion>)__value);
      }
      break;

    case ENUM_SET:
      if (__value == null) {
        unsetEnum_set();
      } else {
        setEnum_set((Set<MyEnum>)__value);
      }
      break;

    case STRUCT_MAP:
      if (__value == null) {
        unsetStruct_map();
      } else {
        setStruct_map((Map<MyStruct,Long>)__value);
      }
      break;

    case UNION_MAP:
      if (__value == null) {
        unsetUnion_map();
      } else {
        setUnion_map((Map<MyUnion,Long>)__value);
      }
      break;

    case ENUM_MAP:
      if (__value == null) {
        unsetEnum_map();
      } else {
        setEnum_map((Map<MyEnum,Long>)__value);
      }
      break;

    case STRUCT_MAP_2:
      if (__value == null) {
        unsetStruct_map_2();
      } else {
        setStruct_map_2((Map<Integer,MyStruct>)__value);
      }
      break;

    case UNION_MAP_2:
      if (__value == null) {
        unsetUnion_map_2();
      } else {
        setUnion_map_2((Map<Integer,MyUnion>)__value);
      }
      break;

    case ENUM_MAP_2:
      if (__value == null) {
        unsetEnum_map_2();
      } else {
        setEnum_map_2((Map<Integer,MyEnum>)__value);
      }
      break;

    case LIST_MAP:
      if (__value == null) {
        unsetList_map();
      } else {
        setList_map((Map<List<Integer>,Integer>)__value);
      }
      break;

    case LIST_MAP_2:
      if (__value == null) {
        unsetList_map_2();
      } else {
        setList_map_2((Map<Integer,List<Integer>>)__value);
      }
      break;

    case SET_MAP:
      if (__value == null) {
        unsetSet_map();
      } else {
        setSet_map((Map<Set<Integer>,Integer>)__value);
      }
      break;

    case SET_MAP_2:
      if (__value == null) {
        unsetSet_map_2();
      } else {
        setSet_map_2((Map<Integer,Set<Integer>>)__value);
      }
      break;

    case MAP_MAP:
      if (__value == null) {
        unsetMap_map();
      } else {
        setMap_map((Map<Map<Integer,Integer>,Integer>)__value);
      }
      break;

    case MAP_MAP_2:
      if (__value == null) {
        unsetMap_map_2();
      } else {
        setMap_map_2((Map<Integer,Map<Integer,Integer>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case STRUCT_LIST:
      return getStruct_list();

    case UNION_LIST:
      return getUnion_list();

    case ENUM_LIST:
      return getEnum_list();

    case STRUCT_SET:
      return getStruct_set();

    case UNION_SET:
      return getUnion_set();

    case ENUM_SET:
      return getEnum_set();

    case STRUCT_MAP:
      return getStruct_map();

    case UNION_MAP:
      return getUnion_map();

    case ENUM_MAP:
      return getEnum_map();

    case STRUCT_MAP_2:
      return getStruct_map_2();

    case UNION_MAP_2:
      return getUnion_map_2();

    case ENUM_MAP_2:
      return getEnum_map_2();

    case LIST_MAP:
      return getList_map();

    case LIST_MAP_2:
      return getList_map_2();

    case SET_MAP:
      return getSet_map();

    case SET_MAP_2:
      return getSet_map_2();

    case MAP_MAP:
      return getMap_map();

    case MAP_MAP_2:
      return getMap_map_2();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Containers))
      return false;
    Containers that = (Containers)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_list(), that.isSetStruct_list(), this.struct_list, that.struct_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_list(), that.isSetUnion_list(), this.union_list, that.union_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_list(), that.isSetEnum_list(), this.enum_list, that.enum_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_set(), that.isSetStruct_set(), this.struct_set, that.struct_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_set(), that.isSetUnion_set(), this.union_set, that.union_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_set(), that.isSetEnum_set(), this.enum_set, that.enum_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_map(), that.isSetStruct_map(), this.struct_map, that.struct_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_map(), that.isSetUnion_map(), this.union_map, that.union_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_map(), that.isSetEnum_map(), this.enum_map, that.enum_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_map_2(), that.isSetStruct_map_2(), this.struct_map_2, that.struct_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_map_2(), that.isSetUnion_map_2(), this.union_map_2, that.union_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_map_2(), that.isSetEnum_map_2(), this.enum_map_2, that.enum_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map(), that.isSetList_map(), this.list_map, that.list_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map_2(), that.isSetList_map_2(), this.list_map_2, that.list_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map(), that.isSetSet_map(), this.set_map, that.set_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map_2(), that.isSetSet_map_2(), this.set_map_2, that.set_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_map(), that.isSetMap_map(), this.map_map, that.map_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_map_2(), that.isSetMap_map_2(), this.map_map_2, that.map_map_2)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {struct_list, union_list, enum_list, struct_set, union_set, enum_set, struct_map, union_map, enum_map, struct_map_2, union_map_2, enum_map_2, list_map, list_map_2, set_map, set_map_2, map_map, map_map_2});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case STRUCT_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list453 = iprot.readListBegin();
              this.struct_list = new ArrayList<MyStruct>(Math.max(0, _list453.size));
              for (int _i454 = 0; 
                   (_list453.size < 0) ? iprot.peekList() : (_i454 < _list453.size); 
                   ++_i454)
              {
                MyStruct _elem455;
                _elem455 = new MyStruct();
                _elem455.read(iprot);
                this.struct_list.add(_elem455);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list456 = iprot.readListBegin();
              this.union_list = new ArrayList<MyUnion>(Math.max(0, _list456.size));
              for (int _i457 = 0; 
                   (_list456.size < 0) ? iprot.peekList() : (_i457 < _list456.size); 
                   ++_i457)
              {
                MyUnion _elem458;
                _elem458 = new MyUnion();
                _elem458.read(iprot);
                this.union_list.add(_elem458);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list459 = iprot.readListBegin();
              this.enum_list = new ArrayList<MyEnum>(Math.max(0, _list459.size));
              for (int _i460 = 0; 
                   (_list459.size < 0) ? iprot.peekList() : (_i460 < _list459.size); 
                   ++_i460)
              {
                MyEnum _elem461;
                _elem461 = MyEnum.findByValue(iprot.readI32());
                this.enum_list.add(_elem461);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set462 = iprot.readSetBegin();
              this.struct_set = new HashSet<MyStruct>(Math.max(0, 2*_set462.size));
              for (int _i463 = 0; 
                   (_set462.size < 0) ? iprot.peekSet() : (_i463 < _set462.size); 
                   ++_i463)
              {
                MyStruct _elem464;
                _elem464 = new MyStruct();
                _elem464.read(iprot);
                this.struct_set.add(_elem464);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set465 = iprot.readSetBegin();
              this.union_set = new HashSet<MyUnion>(Math.max(0, 2*_set465.size));
              for (int _i466 = 0; 
                   (_set465.size < 0) ? iprot.peekSet() : (_i466 < _set465.size); 
                   ++_i466)
              {
                MyUnion _elem467;
                _elem467 = new MyUnion();
                _elem467.read(iprot);
                this.union_set.add(_elem467);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set468 = iprot.readSetBegin();
              this.enum_set = new HashSet<MyEnum>(Math.max(0, 2*_set468.size));
              for (int _i469 = 0; 
                   (_set468.size < 0) ? iprot.peekSet() : (_i469 < _set468.size); 
                   ++_i469)
              {
                MyEnum _elem470;
                _elem470 = MyEnum.findByValue(iprot.readI32());
                this.enum_set.add(_elem470);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map471 = iprot.readMapBegin();
              this.struct_map = new HashMap<MyStruct,Long>(Math.max(0, 2*_map471.size));
              for (int _i472 = 0; 
                   (_map471.size < 0) ? iprot.peekMap() : (_i472 < _map471.size); 
                   ++_i472)
              {
                MyStruct _key473;
                long _val474;
                _key473 = new MyStruct();
                _key473.read(iprot);
                _val474 = iprot.readI64();
                this.struct_map.put(_key473, _val474);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map475 = iprot.readMapBegin();
              this.union_map = new HashMap<MyUnion,Long>(Math.max(0, 2*_map475.size));
              for (int _i476 = 0; 
                   (_map475.size < 0) ? iprot.peekMap() : (_i476 < _map475.size); 
                   ++_i476)
              {
                MyUnion _key477;
                long _val478;
                _key477 = new MyUnion();
                _key477.read(iprot);
                _val478 = iprot.readI64();
                this.union_map.put(_key477, _val478);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map479 = iprot.readMapBegin();
              this.enum_map = new HashMap<MyEnum,Long>(Math.max(0, 2*_map479.size));
              for (int _i480 = 0; 
                   (_map479.size < 0) ? iprot.peekMap() : (_i480 < _map479.size); 
                   ++_i480)
              {
                MyEnum _key481;
                long _val482;
                _key481 = MyEnum.findByValue(iprot.readI32());
                _val482 = iprot.readI64();
                this.enum_map.put(_key481, _val482);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map483 = iprot.readMapBegin();
              this.struct_map_2 = new HashMap<Integer,MyStruct>(Math.max(0, 2*_map483.size));
              for (int _i484 = 0; 
                   (_map483.size < 0) ? iprot.peekMap() : (_i484 < _map483.size); 
                   ++_i484)
              {
                int _key485;
                MyStruct _val486;
                _key485 = iprot.readI32();
                _val486 = new MyStruct();
                _val486.read(iprot);
                this.struct_map_2.put(_key485, _val486);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map487 = iprot.readMapBegin();
              this.union_map_2 = new HashMap<Integer,MyUnion>(Math.max(0, 2*_map487.size));
              for (int _i488 = 0; 
                   (_map487.size < 0) ? iprot.peekMap() : (_i488 < _map487.size); 
                   ++_i488)
              {
                int _key489;
                MyUnion _val490;
                _key489 = iprot.readI32();
                _val490 = new MyUnion();
                _val490.read(iprot);
                this.union_map_2.put(_key489, _val490);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map491 = iprot.readMapBegin();
              this.enum_map_2 = new HashMap<Integer,MyEnum>(Math.max(0, 2*_map491.size));
              for (int _i492 = 0; 
                   (_map491.size < 0) ? iprot.peekMap() : (_i492 < _map491.size); 
                   ++_i492)
              {
                int _key493;
                MyEnum _val494;
                _key493 = iprot.readI32();
                _val494 = MyEnum.findByValue(iprot.readI32());
                this.enum_map_2.put(_key493, _val494);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map495 = iprot.readMapBegin();
              this.list_map = new HashMap<List<Integer>,Integer>(Math.max(0, 2*_map495.size));
              for (int _i496 = 0; 
                   (_map495.size < 0) ? iprot.peekMap() : (_i496 < _map495.size); 
                   ++_i496)
              {
                List<Integer> _key497;
                int _val498;
                {
                  TList _list499 = iprot.readListBegin();
                  _key497 = new ArrayList<Integer>(Math.max(0, _list499.size));
                  for (int _i500 = 0; 
                       (_list499.size < 0) ? iprot.peekList() : (_i500 < _list499.size); 
                       ++_i500)
                  {
                    int _elem501;
                    _elem501 = iprot.readI32();
                    _key497.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                _val498 = iprot.readI32();
                this.list_map.put(_key497, _val498);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map502 = iprot.readMapBegin();
              this.list_map_2 = new HashMap<Integer,List<Integer>>(Math.max(0, 2*_map502.size));
              for (int _i503 = 0; 
                   (_map502.size < 0) ? iprot.peekMap() : (_i503 < _map502.size); 
                   ++_i503)
              {
                int _key504;
                List<Integer> _val505;
                _key504 = iprot.readI32();
                {
                  TList _list506 = iprot.readListBegin();
                  _val505 = new ArrayList<Integer>(Math.max(0, _list506.size));
                  for (int _i507 = 0; 
                       (_list506.size < 0) ? iprot.peekList() : (_i507 < _list506.size); 
                       ++_i507)
                  {
                    int _elem508;
                    _elem508 = iprot.readI32();
                    _val505.add(_elem508);
                  }
                  iprot.readListEnd();
                }
                this.list_map_2.put(_key504, _val505);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map509 = iprot.readMapBegin();
              this.set_map = new HashMap<Set<Integer>,Integer>(Math.max(0, 2*_map509.size));
              for (int _i510 = 0; 
                   (_map509.size < 0) ? iprot.peekMap() : (_i510 < _map509.size); 
                   ++_i510)
              {
                Set<Integer> _key511;
                int _val512;
                {
                  TSet _set513 = iprot.readSetBegin();
                  _key511 = new HashSet<Integer>(Math.max(0, 2*_set513.size));
                  for (int _i514 = 0; 
                       (_set513.size < 0) ? iprot.peekSet() : (_i514 < _set513.size); 
                       ++_i514)
                  {
                    int _elem515;
                    _elem515 = iprot.readI32();
                    _key511.add(_elem515);
                  }
                  iprot.readSetEnd();
                }
                _val512 = iprot.readI32();
                this.set_map.put(_key511, _val512);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map516 = iprot.readMapBegin();
              this.set_map_2 = new HashMap<Integer,Set<Integer>>(Math.max(0, 2*_map516.size));
              for (int _i517 = 0; 
                   (_map516.size < 0) ? iprot.peekMap() : (_i517 < _map516.size); 
                   ++_i517)
              {
                int _key518;
                Set<Integer> _val519;
                _key518 = iprot.readI32();
                {
                  TSet _set520 = iprot.readSetBegin();
                  _val519 = new HashSet<Integer>(Math.max(0, 2*_set520.size));
                  for (int _i521 = 0; 
                       (_set520.size < 0) ? iprot.peekSet() : (_i521 < _set520.size); 
                       ++_i521)
                  {
                    int _elem522;
                    _elem522 = iprot.readI32();
                    _val519.add(_elem522);
                  }
                  iprot.readSetEnd();
                }
                this.set_map_2.put(_key518, _val519);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map523 = iprot.readMapBegin();
              this.map_map = new HashMap<Map<Integer,Integer>,Integer>(Math.max(0, 2*_map523.size));
              for (int _i524 = 0; 
                   (_map523.size < 0) ? iprot.peekMap() : (_i524 < _map523.size); 
                   ++_i524)
              {
                Map<Integer,Integer> _key525;
                int _val526;
                {
                  TMap _map527 = iprot.readMapBegin();
                  _key525 = new HashMap<Integer,Integer>(Math.max(0, 2*_map527.size));
                  for (int _i528 = 0; 
                       (_map527.size < 0) ? iprot.peekMap() : (_i528 < _map527.size); 
                       ++_i528)
                  {
                    int _key529;
                    int _val530;
                    _key529 = iprot.readI32();
                    _val530 = iprot.readI32();
                    _key525.put(_key529, _val530);
                  }
                  iprot.readMapEnd();
                }
                _val526 = iprot.readI32();
                this.map_map.put(_key525, _val526);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map531 = iprot.readMapBegin();
              this.map_map_2 = new HashMap<Integer,Map<Integer,Integer>>(Math.max(0, 2*_map531.size));
              for (int _i532 = 0; 
                   (_map531.size < 0) ? iprot.peekMap() : (_i532 < _map531.size); 
                   ++_i532)
              {
                int _key533;
                Map<Integer,Integer> _val534;
                _key533 = iprot.readI32();
                {
                  TMap _map535 = iprot.readMapBegin();
                  _val534 = new HashMap<Integer,Integer>(Math.max(0, 2*_map535.size));
                  for (int _i536 = 0; 
                       (_map535.size < 0) ? iprot.peekMap() : (_i536 < _map535.size); 
                       ++_i536)
                  {
                    int _key537;
                    int _val538;
                    _key537 = iprot.readI32();
                    _val538 = iprot.readI32();
                    _val534.put(_key537, _val538);
                  }
                  iprot.readMapEnd();
                }
                this.map_map_2.put(_key533, _val534);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.struct_list != null) {
      oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.struct_list.size()));
        for (MyStruct _iter539 : this.struct_list)        {
          _iter539.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_list != null) {
      oprot.writeFieldBegin(UNION_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.union_list.size()));
        for (MyUnion _iter540 : this.union_list)        {
          _iter540.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_list != null) {
      oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.enum_list.size()));
        for (MyEnum _iter541 : this.enum_list)        {
          oprot.writeI32(_iter541 == null ? 0 : _iter541.getValue());
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_set != null) {
      oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.struct_set.size()));
        for (MyStruct _iter542 : this.struct_set)        {
          _iter542.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_set != null) {
      oprot.writeFieldBegin(UNION_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.union_set.size()));
        for (MyUnion _iter543 : this.union_set)        {
          _iter543.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_set != null) {
      oprot.writeFieldBegin(ENUM_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.enum_set.size()));
        for (MyEnum _iter544 : this.enum_set)        {
          oprot.writeI32(_iter544 == null ? 0 : _iter544.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_map != null) {
      oprot.writeFieldBegin(STRUCT_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, this.struct_map.size()));
        for (Map.Entry<MyStruct, Long> _iter545 : this.struct_map.entrySet())        {
          _iter545.getKey().write(oprot);
          oprot.writeI64(_iter545.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_map != null) {
      oprot.writeFieldBegin(UNION_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, this.union_map.size()));
        for (Map.Entry<MyUnion, Long> _iter546 : this.union_map.entrySet())        {
          _iter546.getKey().write(oprot);
          oprot.writeI64(_iter546.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_map != null) {
      oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I64, this.enum_map.size()));
        for (Map.Entry<MyEnum, Long> _iter547 : this.enum_map.entrySet())        {
          oprot.writeI32(_iter547.getKey() == null ? 0 : _iter547.getKey().getValue());
          oprot.writeI64(_iter547.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_map_2 != null) {
      oprot.writeFieldBegin(STRUCT_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.struct_map_2.size()));
        for (Map.Entry<Integer, MyStruct> _iter548 : this.struct_map_2.entrySet())        {
          oprot.writeI32(_iter548.getKey());
          _iter548.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_map_2 != null) {
      oprot.writeFieldBegin(UNION_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.union_map_2.size()));
        for (Map.Entry<Integer, MyUnion> _iter549 : this.union_map_2.entrySet())        {
          oprot.writeI32(_iter549.getKey());
          _iter549.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_map_2 != null) {
      oprot.writeFieldBegin(ENUM_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I32, this.enum_map_2.size()));
        for (Map.Entry<Integer, MyEnum> _iter550 : this.enum_map_2.entrySet())        {
          oprot.writeI32(_iter550.getKey());
          oprot.writeI32(_iter550.getValue() == null ? 0 : _iter550.getValue().getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map != null) {
      oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, this.list_map.size()));
        for (Map.Entry<List<Integer>, Integer> _iter551 : this.list_map.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter551.getKey().size()));
            for (int _iter552 : _iter551.getKey())            {
              oprot.writeI32(_iter552);
            }
            oprot.writeListEnd();
          }
          oprot.writeI32(_iter551.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map_2 != null) {
      oprot.writeFieldBegin(LIST_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.list_map_2.size()));
        for (Map.Entry<Integer, List<Integer>> _iter553 : this.list_map_2.entrySet())        {
          oprot.writeI32(_iter553.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter553.getValue().size()));
            for (int _iter554 : _iter553.getValue())            {
              oprot.writeI32(_iter554);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map != null) {
      oprot.writeFieldBegin(SET_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, this.set_map.size()));
        for (Map.Entry<Set<Integer>, Integer> _iter555 : this.set_map.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter555.getKey().size()));
            for (int _iter556 : _iter555.getKey())            {
              oprot.writeI32(_iter556);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI32(_iter555.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map_2 != null) {
      oprot.writeFieldBegin(SET_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, this.set_map_2.size()));
        for (Map.Entry<Integer, Set<Integer>> _iter557 : this.set_map_2.entrySet())        {
          oprot.writeI32(_iter557.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter557.getValue().size()));
            for (int _iter558 : _iter557.getValue())            {
              oprot.writeI32(_iter558);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_map != null) {
      oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.I32, this.map_map.size()));
        for (Map.Entry<Map<Integer,Integer>, Integer> _iter559 : this.map_map.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter559.getKey().size()));
            for (Map.Entry<Integer, Integer> _iter560 : _iter559.getKey().entrySet())            {
              oprot.writeI32(_iter560.getKey());
              oprot.writeI32(_iter560.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeI32(_iter559.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_map_2 != null) {
      oprot.writeFieldBegin(MAP_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, this.map_map_2.size()));
        for (Map.Entry<Integer, Map<Integer,Integer>> _iter561 : this.map_map_2.entrySet())        {
          oprot.writeI32(_iter561.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter561.getValue().size()));
            for (Map.Entry<Integer, Integer> _iter562 : _iter561.getValue().entrySet())            {
              oprot.writeI32(_iter562.getKey());
              oprot.writeI32(_iter562.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Containers");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("struct_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

