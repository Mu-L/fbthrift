/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="Containers", builder=Containers.Builder.class)
public final class Containers implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public Containers(
        @com.facebook.swift.codec.ThriftField(value=1, name="struct_list", requiredness=Requiredness.NONE) final List<test.fixtures.complex_struct.MyStruct> structList,
        @com.facebook.swift.codec.ThriftField(value=2, name="union_list", requiredness=Requiredness.NONE) final List<test.fixtures.complex_struct.MyUnion> unionList,
        @com.facebook.swift.codec.ThriftField(value=3, name="enum_list", requiredness=Requiredness.NONE) final List<test.fixtures.complex_struct.MyEnum> enumList,
        @com.facebook.swift.codec.ThriftField(value=4, name="struct_set", requiredness=Requiredness.NONE) final Set<test.fixtures.complex_struct.MyStruct> structSet,
        @com.facebook.swift.codec.ThriftField(value=5, name="union_set", requiredness=Requiredness.NONE) final Set<test.fixtures.complex_struct.MyUnion> unionSet,
        @com.facebook.swift.codec.ThriftField(value=6, name="enum_set", requiredness=Requiredness.NONE) final Set<test.fixtures.complex_struct.MyEnum> enumSet,
        @com.facebook.swift.codec.ThriftField(value=7, name="struct_map", requiredness=Requiredness.NONE) final Map<test.fixtures.complex_struct.MyStruct, Long> structMap,
        @com.facebook.swift.codec.ThriftField(value=8, name="union_map", requiredness=Requiredness.NONE) final Map<test.fixtures.complex_struct.MyUnion, Long> unionMap,
        @com.facebook.swift.codec.ThriftField(value=9, name="enum_map", requiredness=Requiredness.NONE) final Map<test.fixtures.complex_struct.MyEnum, Long> enumMap,
        @com.facebook.swift.codec.ThriftField(value=10, name="struct_map_2", requiredness=Requiredness.NONE) final Map<Integer, test.fixtures.complex_struct.MyStruct> structMap2,
        @com.facebook.swift.codec.ThriftField(value=11, name="union_map_2", requiredness=Requiredness.NONE) final Map<Integer, test.fixtures.complex_struct.MyUnion> unionMap2,
        @com.facebook.swift.codec.ThriftField(value=12, name="enum_map_2", requiredness=Requiredness.NONE) final Map<Integer, test.fixtures.complex_struct.MyEnum> enumMap2,
        @com.facebook.swift.codec.ThriftField(value=13, name="list_map", requiredness=Requiredness.NONE) final Map<List<Integer>, Integer> listMap,
        @com.facebook.swift.codec.ThriftField(value=14, name="list_map_2", requiredness=Requiredness.NONE) final Map<Integer, List<Integer>> listMap2,
        @com.facebook.swift.codec.ThriftField(value=15, name="set_map", requiredness=Requiredness.NONE) final Map<Set<Integer>, Integer> setMap,
        @com.facebook.swift.codec.ThriftField(value=16, name="set_map_2", requiredness=Requiredness.NONE) final Map<Integer, Set<Integer>> setMap2,
        @com.facebook.swift.codec.ThriftField(value=17, name="map_map", requiredness=Requiredness.NONE) final Map<Map<Integer, Integer>, Integer> mapMap,
        @com.facebook.swift.codec.ThriftField(value=18, name="map_map_2", requiredness=Requiredness.NONE) final Map<Integer, Map<Integer, Integer>> mapMap2
    ) {
        this.structList = structList;
        this.unionList = unionList;
        this.enumList = enumList;
        this.structSet = structSet;
        this.unionSet = unionSet;
        this.enumSet = enumSet;
        this.structMap = structMap;
        this.unionMap = unionMap;
        this.enumMap = enumMap;
        this.structMap2 = structMap2;
        this.unionMap2 = unionMap2;
        this.enumMap2 = enumMap2;
        this.listMap = listMap;
        this.listMap2 = listMap2;
        this.setMap = setMap;
        this.setMap2 = setMap2;
        this.mapMap = mapMap;
        this.mapMap2 = mapMap2;
    }
    
    @ThriftConstructor
    protected Containers() {
      this.structList = null;
      this.unionList = null;
      this.enumList = null;
      this.structSet = null;
      this.unionSet = null;
      this.enumSet = null;
      this.structMap = null;
      this.unionMap = null;
      this.enumMap = null;
      this.structMap2 = null;
      this.unionMap2 = null;
      this.enumMap2 = null;
      this.listMap = null;
      this.listMap2 = null;
      this.setMap = null;
      this.setMap2 = null;
      this.mapMap = null;
      this.mapMap2 = null;
    }
    
    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(Containers other) {
      return new Builder(other);
    }

    public static class Builder {
        private List<test.fixtures.complex_struct.MyStruct> structList = null;
        private List<test.fixtures.complex_struct.MyUnion> unionList = null;
        private List<test.fixtures.complex_struct.MyEnum> enumList = null;
        private Set<test.fixtures.complex_struct.MyStruct> structSet = null;
        private Set<test.fixtures.complex_struct.MyUnion> unionSet = null;
        private Set<test.fixtures.complex_struct.MyEnum> enumSet = null;
        private Map<test.fixtures.complex_struct.MyStruct, Long> structMap = null;
        private Map<test.fixtures.complex_struct.MyUnion, Long> unionMap = null;
        private Map<test.fixtures.complex_struct.MyEnum, Long> enumMap = null;
        private Map<Integer, test.fixtures.complex_struct.MyStruct> structMap2 = null;
        private Map<Integer, test.fixtures.complex_struct.MyUnion> unionMap2 = null;
        private Map<Integer, test.fixtures.complex_struct.MyEnum> enumMap2 = null;
        private Map<List<Integer>, Integer> listMap = null;
        private Map<Integer, List<Integer>> listMap2 = null;
        private Map<Set<Integer>, Integer> setMap = null;
        private Map<Integer, Set<Integer>> setMap2 = null;
        private Map<Map<Integer, Integer>, Integer> mapMap = null;
        private Map<Integer, Map<Integer, Integer>> mapMap2 = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="struct_list", requiredness=Requiredness.NONE)
        public Builder setStructList(List<test.fixtures.complex_struct.MyStruct> structList) {
            this.structList = structList;
            return this;
        }
    
        public List<test.fixtures.complex_struct.MyStruct> getStructList() { return structList; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="union_list", requiredness=Requiredness.NONE)
        public Builder setUnionList(List<test.fixtures.complex_struct.MyUnion> unionList) {
            this.unionList = unionList;
            return this;
        }
    
        public List<test.fixtures.complex_struct.MyUnion> getUnionList() { return unionList; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="enum_list", requiredness=Requiredness.NONE)
        public Builder setEnumList(List<test.fixtures.complex_struct.MyEnum> enumList) {
            this.enumList = enumList;
            return this;
        }
    
        public List<test.fixtures.complex_struct.MyEnum> getEnumList() { return enumList; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="struct_set", requiredness=Requiredness.NONE)
        public Builder setStructSet(Set<test.fixtures.complex_struct.MyStruct> structSet) {
            this.structSet = structSet;
            return this;
        }
    
        public Set<test.fixtures.complex_struct.MyStruct> getStructSet() { return structSet; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="union_set", requiredness=Requiredness.NONE)
        public Builder setUnionSet(Set<test.fixtures.complex_struct.MyUnion> unionSet) {
            this.unionSet = unionSet;
            return this;
        }
    
        public Set<test.fixtures.complex_struct.MyUnion> getUnionSet() { return unionSet; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="enum_set", requiredness=Requiredness.NONE)
        public Builder setEnumSet(Set<test.fixtures.complex_struct.MyEnum> enumSet) {
            this.enumSet = enumSet;
            return this;
        }
    
        public Set<test.fixtures.complex_struct.MyEnum> getEnumSet() { return enumSet; }
    
            @com.facebook.swift.codec.ThriftField(value=7, name="struct_map", requiredness=Requiredness.NONE)
        public Builder setStructMap(Map<test.fixtures.complex_struct.MyStruct, Long> structMap) {
            this.structMap = structMap;
            return this;
        }
    
        public Map<test.fixtures.complex_struct.MyStruct, Long> getStructMap() { return structMap; }
    
            @com.facebook.swift.codec.ThriftField(value=8, name="union_map", requiredness=Requiredness.NONE)
        public Builder setUnionMap(Map<test.fixtures.complex_struct.MyUnion, Long> unionMap) {
            this.unionMap = unionMap;
            return this;
        }
    
        public Map<test.fixtures.complex_struct.MyUnion, Long> getUnionMap() { return unionMap; }
    
            @com.facebook.swift.codec.ThriftField(value=9, name="enum_map", requiredness=Requiredness.NONE)
        public Builder setEnumMap(Map<test.fixtures.complex_struct.MyEnum, Long> enumMap) {
            this.enumMap = enumMap;
            return this;
        }
    
        public Map<test.fixtures.complex_struct.MyEnum, Long> getEnumMap() { return enumMap; }
    
            @com.facebook.swift.codec.ThriftField(value=10, name="struct_map_2", requiredness=Requiredness.NONE)
        public Builder setStructMap2(Map<Integer, test.fixtures.complex_struct.MyStruct> structMap2) {
            this.structMap2 = structMap2;
            return this;
        }
    
        public Map<Integer, test.fixtures.complex_struct.MyStruct> getStructMap2() { return structMap2; }
    
            @com.facebook.swift.codec.ThriftField(value=11, name="union_map_2", requiredness=Requiredness.NONE)
        public Builder setUnionMap2(Map<Integer, test.fixtures.complex_struct.MyUnion> unionMap2) {
            this.unionMap2 = unionMap2;
            return this;
        }
    
        public Map<Integer, test.fixtures.complex_struct.MyUnion> getUnionMap2() { return unionMap2; }
    
            @com.facebook.swift.codec.ThriftField(value=12, name="enum_map_2", requiredness=Requiredness.NONE)
        public Builder setEnumMap2(Map<Integer, test.fixtures.complex_struct.MyEnum> enumMap2) {
            this.enumMap2 = enumMap2;
            return this;
        }
    
        public Map<Integer, test.fixtures.complex_struct.MyEnum> getEnumMap2() { return enumMap2; }
    
            @com.facebook.swift.codec.ThriftField(value=13, name="list_map", requiredness=Requiredness.NONE)
        public Builder setListMap(Map<List<Integer>, Integer> listMap) {
            this.listMap = listMap;
            return this;
        }
    
        public Map<List<Integer>, Integer> getListMap() { return listMap; }
    
            @com.facebook.swift.codec.ThriftField(value=14, name="list_map_2", requiredness=Requiredness.NONE)
        public Builder setListMap2(Map<Integer, List<Integer>> listMap2) {
            this.listMap2 = listMap2;
            return this;
        }
    
        public Map<Integer, List<Integer>> getListMap2() { return listMap2; }
    
            @com.facebook.swift.codec.ThriftField(value=15, name="set_map", requiredness=Requiredness.NONE)
        public Builder setSetMap(Map<Set<Integer>, Integer> setMap) {
            this.setMap = setMap;
            return this;
        }
    
        public Map<Set<Integer>, Integer> getSetMap() { return setMap; }
    
            @com.facebook.swift.codec.ThriftField(value=16, name="set_map_2", requiredness=Requiredness.NONE)
        public Builder setSetMap2(Map<Integer, Set<Integer>> setMap2) {
            this.setMap2 = setMap2;
            return this;
        }
    
        public Map<Integer, Set<Integer>> getSetMap2() { return setMap2; }
    
            @com.facebook.swift.codec.ThriftField(value=17, name="map_map", requiredness=Requiredness.NONE)
        public Builder setMapMap(Map<Map<Integer, Integer>, Integer> mapMap) {
            this.mapMap = mapMap;
            return this;
        }
    
        public Map<Map<Integer, Integer>, Integer> getMapMap() { return mapMap; }
    
            @com.facebook.swift.codec.ThriftField(value=18, name="map_map_2", requiredness=Requiredness.NONE)
        public Builder setMapMap2(Map<Integer, Map<Integer, Integer>> mapMap2) {
            this.mapMap2 = mapMap2;
            return this;
        }
    
        public Map<Integer, Map<Integer, Integer>> getMapMap2() { return mapMap2; }
    
        public Builder() { }
        public Builder(Containers other) {
            this.structList = other.structList;
            this.unionList = other.unionList;
            this.enumList = other.enumList;
            this.structSet = other.structSet;
            this.unionSet = other.unionSet;
            this.enumSet = other.enumSet;
            this.structMap = other.structMap;
            this.unionMap = other.unionMap;
            this.enumMap = other.enumMap;
            this.structMap2 = other.structMap2;
            this.unionMap2 = other.unionMap2;
            this.enumMap2 = other.enumMap2;
            this.listMap = other.listMap;
            this.listMap2 = other.listMap2;
            this.setMap = other.setMap;
            this.setMap2 = other.setMap2;
            this.mapMap = other.mapMap;
            this.mapMap2 = other.mapMap2;
        }
    
        @ThriftConstructor
        public Containers build() {
            Containers result = new Containers (
                this.structList,
                this.unionList,
                this.enumList,
                this.structSet,
                this.unionSet,
                this.enumSet,
                this.structMap,
                this.unionMap,
                this.enumMap,
                this.structMap2,
                this.unionMap2,
                this.enumMap2,
                this.listMap,
                this.listMap2,
                this.setMap,
                this.setMap2,
                this.mapMap,
                this.mapMap2
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("Containers");
    private final List<test.fixtures.complex_struct.MyStruct> structList;
    public static final int _STRUCT_LIST = 1;
    private static final TField STRUCT_LIST_FIELD_DESC = new TField("struct_list", TType.LIST, (short)1);
        private final List<test.fixtures.complex_struct.MyUnion> unionList;
    public static final int _UNION_LIST = 2;
    private static final TField UNION_LIST_FIELD_DESC = new TField("union_list", TType.LIST, (short)2);
        private final List<test.fixtures.complex_struct.MyEnum> enumList;
    public static final int _ENUM_LIST = 3;
    private static final TField ENUM_LIST_FIELD_DESC = new TField("enum_list", TType.LIST, (short)3);
        private final Set<test.fixtures.complex_struct.MyStruct> structSet;
    public static final int _STRUCT_SET = 4;
    private static final TField STRUCT_SET_FIELD_DESC = new TField("struct_set", TType.SET, (short)4);
        private final Set<test.fixtures.complex_struct.MyUnion> unionSet;
    public static final int _UNION_SET = 5;
    private static final TField UNION_SET_FIELD_DESC = new TField("union_set", TType.SET, (short)5);
        private final Set<test.fixtures.complex_struct.MyEnum> enumSet;
    public static final int _ENUM_SET = 6;
    private static final TField ENUM_SET_FIELD_DESC = new TField("enum_set", TType.SET, (short)6);
        private final Map<test.fixtures.complex_struct.MyStruct, Long> structMap;
    public static final int _STRUCT_MAP = 7;
    private static final TField STRUCT_MAP_FIELD_DESC = new TField("struct_map", TType.MAP, (short)7);
        private final Map<test.fixtures.complex_struct.MyUnion, Long> unionMap;
    public static final int _UNION_MAP = 8;
    private static final TField UNION_MAP_FIELD_DESC = new TField("union_map", TType.MAP, (short)8);
        private final Map<test.fixtures.complex_struct.MyEnum, Long> enumMap;
    public static final int _ENUM_MAP = 9;
    private static final TField ENUM_MAP_FIELD_DESC = new TField("enum_map", TType.MAP, (short)9);
        private final Map<Integer, test.fixtures.complex_struct.MyStruct> structMap2;
    public static final int _STRUCT_MAP_2 = 10;
    private static final TField STRUCT_MAP_2_FIELD_DESC = new TField("struct_map_2", TType.MAP, (short)10);
        private final Map<Integer, test.fixtures.complex_struct.MyUnion> unionMap2;
    public static final int _UNION_MAP_2 = 11;
    private static final TField UNION_MAP_2_FIELD_DESC = new TField("union_map_2", TType.MAP, (short)11);
        private final Map<Integer, test.fixtures.complex_struct.MyEnum> enumMap2;
    public static final int _ENUM_MAP_2 = 12;
    private static final TField ENUM_MAP_2_FIELD_DESC = new TField("enum_map_2", TType.MAP, (short)12);
        private final Map<List<Integer>, Integer> listMap;
    public static final int _LIST_MAP = 13;
    private static final TField LIST_MAP_FIELD_DESC = new TField("list_map", TType.MAP, (short)13);
        private final Map<Integer, List<Integer>> listMap2;
    public static final int _LIST_MAP_2 = 14;
    private static final TField LIST_MAP_2_FIELD_DESC = new TField("list_map_2", TType.MAP, (short)14);
        private final Map<Set<Integer>, Integer> setMap;
    public static final int _SET_MAP = 15;
    private static final TField SET_MAP_FIELD_DESC = new TField("set_map", TType.MAP, (short)15);
        private final Map<Integer, Set<Integer>> setMap2;
    public static final int _SET_MAP_2 = 16;
    private static final TField SET_MAP_2_FIELD_DESC = new TField("set_map_2", TType.MAP, (short)16);
        private final Map<Map<Integer, Integer>, Integer> mapMap;
    public static final int _MAP_MAP = 17;
    private static final TField MAP_MAP_FIELD_DESC = new TField("map_map", TType.MAP, (short)17);
        private final Map<Integer, Map<Integer, Integer>> mapMap2;
    public static final int _MAP_MAP_2 = 18;
    private static final TField MAP_MAP_2_FIELD_DESC = new TField("map_map_2", TType.MAP, (short)18);
    static {
      NAMES_TO_IDS.put("structList", 1);
      THRIFT_NAMES_TO_IDS.put("struct_list", 1);
      FIELD_METADATA.put(1, STRUCT_LIST_FIELD_DESC);
      NAMES_TO_IDS.put("unionList", 2);
      THRIFT_NAMES_TO_IDS.put("union_list", 2);
      FIELD_METADATA.put(2, UNION_LIST_FIELD_DESC);
      NAMES_TO_IDS.put("enumList", 3);
      THRIFT_NAMES_TO_IDS.put("enum_list", 3);
      FIELD_METADATA.put(3, ENUM_LIST_FIELD_DESC);
      NAMES_TO_IDS.put("structSet", 4);
      THRIFT_NAMES_TO_IDS.put("struct_set", 4);
      FIELD_METADATA.put(4, STRUCT_SET_FIELD_DESC);
      NAMES_TO_IDS.put("unionSet", 5);
      THRIFT_NAMES_TO_IDS.put("union_set", 5);
      FIELD_METADATA.put(5, UNION_SET_FIELD_DESC);
      NAMES_TO_IDS.put("enumSet", 6);
      THRIFT_NAMES_TO_IDS.put("enum_set", 6);
      FIELD_METADATA.put(6, ENUM_SET_FIELD_DESC);
      NAMES_TO_IDS.put("structMap", 7);
      THRIFT_NAMES_TO_IDS.put("struct_map", 7);
      FIELD_METADATA.put(7, STRUCT_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("unionMap", 8);
      THRIFT_NAMES_TO_IDS.put("union_map", 8);
      FIELD_METADATA.put(8, UNION_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("enumMap", 9);
      THRIFT_NAMES_TO_IDS.put("enum_map", 9);
      FIELD_METADATA.put(9, ENUM_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("structMap2", 10);
      THRIFT_NAMES_TO_IDS.put("struct_map_2", 10);
      FIELD_METADATA.put(10, STRUCT_MAP_2_FIELD_DESC);
      NAMES_TO_IDS.put("unionMap2", 11);
      THRIFT_NAMES_TO_IDS.put("union_map_2", 11);
      FIELD_METADATA.put(11, UNION_MAP_2_FIELD_DESC);
      NAMES_TO_IDS.put("enumMap2", 12);
      THRIFT_NAMES_TO_IDS.put("enum_map_2", 12);
      FIELD_METADATA.put(12, ENUM_MAP_2_FIELD_DESC);
      NAMES_TO_IDS.put("listMap", 13);
      THRIFT_NAMES_TO_IDS.put("list_map", 13);
      FIELD_METADATA.put(13, LIST_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("listMap2", 14);
      THRIFT_NAMES_TO_IDS.put("list_map_2", 14);
      FIELD_METADATA.put(14, LIST_MAP_2_FIELD_DESC);
      NAMES_TO_IDS.put("setMap", 15);
      THRIFT_NAMES_TO_IDS.put("set_map", 15);
      FIELD_METADATA.put(15, SET_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("setMap2", 16);
      THRIFT_NAMES_TO_IDS.put("set_map_2", 16);
      FIELD_METADATA.put(16, SET_MAP_2_FIELD_DESC);
      NAMES_TO_IDS.put("mapMap", 17);
      THRIFT_NAMES_TO_IDS.put("map_map", 17);
      FIELD_METADATA.put(17, MAP_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("mapMap2", 18);
      THRIFT_NAMES_TO_IDS.put("map_map_2", 18);
      FIELD_METADATA.put(18, MAP_MAP_2_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="struct_list", requiredness=Requiredness.NONE)
    public List<test.fixtures.complex_struct.MyStruct> getStructList() { return structList; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="union_list", requiredness=Requiredness.NONE)
    public List<test.fixtures.complex_struct.MyUnion> getUnionList() { return unionList; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="enum_list", requiredness=Requiredness.NONE)
    public List<test.fixtures.complex_struct.MyEnum> getEnumList() { return enumList; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="struct_set", requiredness=Requiredness.NONE)
    public Set<test.fixtures.complex_struct.MyStruct> getStructSet() { return structSet; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="union_set", requiredness=Requiredness.NONE)
    public Set<test.fixtures.complex_struct.MyUnion> getUnionSet() { return unionSet; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="enum_set", requiredness=Requiredness.NONE)
    public Set<test.fixtures.complex_struct.MyEnum> getEnumSet() { return enumSet; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=7, name="struct_map", requiredness=Requiredness.NONE)
    public Map<test.fixtures.complex_struct.MyStruct, Long> getStructMap() { return structMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=8, name="union_map", requiredness=Requiredness.NONE)
    public Map<test.fixtures.complex_struct.MyUnion, Long> getUnionMap() { return unionMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=9, name="enum_map", requiredness=Requiredness.NONE)
    public Map<test.fixtures.complex_struct.MyEnum, Long> getEnumMap() { return enumMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=10, name="struct_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, test.fixtures.complex_struct.MyStruct> getStructMap2() { return structMap2; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=11, name="union_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, test.fixtures.complex_struct.MyUnion> getUnionMap2() { return unionMap2; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=12, name="enum_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, test.fixtures.complex_struct.MyEnum> getEnumMap2() { return enumMap2; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=13, name="list_map", requiredness=Requiredness.NONE)
    public Map<List<Integer>, Integer> getListMap() { return listMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=14, name="list_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, List<Integer>> getListMap2() { return listMap2; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=15, name="set_map", requiredness=Requiredness.NONE)
    public Map<Set<Integer>, Integer> getSetMap() { return setMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=16, name="set_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, Set<Integer>> getSetMap2() { return setMap2; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=17, name="map_map", requiredness=Requiredness.NONE)
    public Map<Map<Integer, Integer>, Integer> getMapMap() { return mapMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=18, name="map_map_2", requiredness=Requiredness.NONE)
    public Map<Integer, Map<Integer, Integer>> getMapMap2() { return mapMap2; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("structList", structList);
        helper.add("unionList", unionList);
        helper.add("enumList", enumList);
        helper.add("structSet", structSet);
        helper.add("unionSet", unionSet);
        helper.add("enumSet", enumSet);
        helper.add("structMap", structMap);
        helper.add("unionMap", unionMap);
        helper.add("enumMap", enumMap);
        helper.add("structMap2", structMap2);
        helper.add("unionMap2", unionMap2);
        helper.add("enumMap2", enumMap2);
        helper.add("listMap", listMap);
        helper.add("listMap2", listMap2);
        helper.add("setMap", setMap);
        helper.add("setMap2", setMap2);
        helper.add("mapMap", mapMap);
        helper.add("mapMap2", mapMap2);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Containers other = (Containers)o;
    
        return
            Objects.equals(structList, other.structList) &&
            Objects.equals(unionList, other.unionList) &&
            Objects.equals(enumList, other.enumList) &&
            Objects.equals(structSet, other.structSet) &&
            Objects.equals(unionSet, other.unionSet) &&
            Objects.equals(enumSet, other.enumSet) &&
            Objects.equals(structMap, other.structMap) &&
            Objects.equals(unionMap, other.unionMap) &&
            Objects.equals(enumMap, other.enumMap) &&
            Objects.equals(structMap2, other.structMap2) &&
            Objects.equals(unionMap2, other.unionMap2) &&
            Objects.equals(enumMap2, other.enumMap2) &&
            Objects.equals(listMap, other.listMap) &&
            Objects.equals(listMap2, other.listMap2) &&
            Objects.equals(setMap, other.setMap) &&
            Objects.equals(setMap2, other.setMap2) &&
            Objects.equals(mapMap, other.mapMap) &&
            Objects.equals(mapMap2, other.mapMap2) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            structList,
            unionList,
            enumList,
            structSet,
            unionSet,
            enumSet,
            structMap,
            unionMap,
            enumMap,
            structMap2,
            unionMap2,
            enumMap2,
            listMap,
            listMap2,
            setMap,
            setMap2,
            mapMap,
            mapMap2
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<Containers> asReader() {
      return Containers::read0;
    }
    
    public static Containers read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(Containers.NAMES_TO_IDS, Containers.THRIFT_NAMES_TO_IDS, Containers.FIELD_METADATA);
      Containers.Builder builder = new Containers.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _STRUCT_LIST:
          if (__field.type == TType.LIST) {
            List<test.fixtures.complex_struct.MyStruct> structList;
            {
            TList _list = oprot.readListBegin();
            structList = new ArrayList<test.fixtures.complex_struct.MyStruct>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                test.fixtures.complex_struct.MyStruct _value1 = test.fixtures.complex_struct.MyStruct.read0(oprot);
                structList.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setStructList(structList);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNION_LIST:
          if (__field.type == TType.LIST) {
            List<test.fixtures.complex_struct.MyUnion> unionList;
            {
            TList _list = oprot.readListBegin();
            unionList = new ArrayList<test.fixtures.complex_struct.MyUnion>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                test.fixtures.complex_struct.MyUnion _value1 = test.fixtures.complex_struct.MyUnion.read0(oprot);
                unionList.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setUnionList(unionList);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUM_LIST:
          if (__field.type == TType.LIST) {
            List<test.fixtures.complex_struct.MyEnum> enumList;
            {
            TList _list = oprot.readListBegin();
            enumList = new ArrayList<test.fixtures.complex_struct.MyEnum>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                test.fixtures.complex_struct.MyEnum _value1 = test.fixtures.complex_struct.MyEnum.fromInteger(oprot.readI32());
                enumList.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setEnumList(enumList);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRUCT_SET:
          if (__field.type == TType.SET) {
            Set<test.fixtures.complex_struct.MyStruct> structSet;
            {
            TSet _set = oprot.readSetBegin();
            structSet = new HashSet<test.fixtures.complex_struct.MyStruct>(Math.max(0, _set.size));
            for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                
                test.fixtures.complex_struct.MyStruct _value1 = test.fixtures.complex_struct.MyStruct.read0(oprot);
                structSet.add(_value1);
            }
            oprot.readSetEnd();
            }
            builder.setStructSet(structSet);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNION_SET:
          if (__field.type == TType.SET) {
            Set<test.fixtures.complex_struct.MyUnion> unionSet;
            {
            TSet _set = oprot.readSetBegin();
            unionSet = new HashSet<test.fixtures.complex_struct.MyUnion>(Math.max(0, _set.size));
            for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                
                test.fixtures.complex_struct.MyUnion _value1 = test.fixtures.complex_struct.MyUnion.read0(oprot);
                unionSet.add(_value1);
            }
            oprot.readSetEnd();
            }
            builder.setUnionSet(unionSet);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUM_SET:
          if (__field.type == TType.SET) {
            Set<test.fixtures.complex_struct.MyEnum> enumSet;
            {
            TSet _set = oprot.readSetBegin();
            enumSet = new HashSet<test.fixtures.complex_struct.MyEnum>(Math.max(0, _set.size));
            for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                
                test.fixtures.complex_struct.MyEnum _value1 = test.fixtures.complex_struct.MyEnum.fromInteger(oprot.readI32());
                enumSet.add(_value1);
            }
            oprot.readSetEnd();
            }
            builder.setEnumSet(enumSet);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRUCT_MAP:
          if (__field.type == TType.MAP) {
            Map<test.fixtures.complex_struct.MyStruct, Long> structMap;
            {
            TMap _map = oprot.readMapBegin();
            structMap = new HashMap<test.fixtures.complex_struct.MyStruct, Long>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                test.fixtures.complex_struct.MyStruct _key1 = test.fixtures.complex_struct.MyStruct.read0(oprot);
                long _value1 = oprot.readI64();
                structMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setStructMap(structMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNION_MAP:
          if (__field.type == TType.MAP) {
            Map<test.fixtures.complex_struct.MyUnion, Long> unionMap;
            {
            TMap _map = oprot.readMapBegin();
            unionMap = new HashMap<test.fixtures.complex_struct.MyUnion, Long>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                test.fixtures.complex_struct.MyUnion _key1 = test.fixtures.complex_struct.MyUnion.read0(oprot);
                long _value1 = oprot.readI64();
                unionMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setUnionMap(unionMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUM_MAP:
          if (__field.type == TType.MAP) {
            Map<test.fixtures.complex_struct.MyEnum, Long> enumMap;
            {
            TMap _map = oprot.readMapBegin();
            enumMap = new HashMap<test.fixtures.complex_struct.MyEnum, Long>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                test.fixtures.complex_struct.MyEnum _key1 = test.fixtures.complex_struct.MyEnum.fromInteger(oprot.readI32());
                long _value1 = oprot.readI64();
                enumMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setEnumMap(enumMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRUCT_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, test.fixtures.complex_struct.MyStruct> structMap2;
            {
            TMap _map = oprot.readMapBegin();
            structMap2 = new HashMap<Integer, test.fixtures.complex_struct.MyStruct>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                test.fixtures.complex_struct.MyStruct _value1 = test.fixtures.complex_struct.MyStruct.read0(oprot);
                structMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setStructMap2(structMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNION_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, test.fixtures.complex_struct.MyUnion> unionMap2;
            {
            TMap _map = oprot.readMapBegin();
            unionMap2 = new HashMap<Integer, test.fixtures.complex_struct.MyUnion>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                test.fixtures.complex_struct.MyUnion _value1 = test.fixtures.complex_struct.MyUnion.read0(oprot);
                unionMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setUnionMap2(unionMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUM_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, test.fixtures.complex_struct.MyEnum> enumMap2;
            {
            TMap _map = oprot.readMapBegin();
            enumMap2 = new HashMap<Integer, test.fixtures.complex_struct.MyEnum>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                test.fixtures.complex_struct.MyEnum _value1 = test.fixtures.complex_struct.MyEnum.fromInteger(oprot.readI32());
                enumMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setEnumMap2(enumMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LIST_MAP:
          if (__field.type == TType.MAP) {
            Map<List<Integer>, Integer> listMap;
            {
            TMap _map = oprot.readMapBegin();
            listMap = new HashMap<List<Integer>, Integer>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                List<Integer> _key1;
                            {
                            TList _list1 = oprot.readListBegin();
                            _key1 = new ArrayList<Integer>(Math.max(0, _list1.size));
                            for (int _i1 = 0; (_list1.size < 0) ? oprot.peekList() : (_i1 < _list1.size); _i1++) {
                                
                                int _value2 = oprot.readI32();
                                _key1.add(_value2);
                            }
                            oprot.readListEnd();
                            }
                                int _value1 = oprot.readI32();
                listMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setListMap(listMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LIST_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, List<Integer>> listMap2;
            {
            TMap _map = oprot.readMapBegin();
            listMap2 = new HashMap<Integer, List<Integer>>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                List<Integer> _value1;
                            {
                            TList _list1 = oprot.readListBegin();
                            _value1 = new ArrayList<Integer>(Math.max(0, _list1.size));
                            for (int _i1 = 0; (_list1.size < 0) ? oprot.peekList() : (_i1 < _list1.size); _i1++) {
                                
                                
                                int _value2 = oprot.readI32();
                                
                                
                                _value1.add(_value2);
                                
                            }
                            oprot.readListEnd();
                            }
                                listMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setListMap2(listMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SET_MAP:
          if (__field.type == TType.MAP) {
            Map<Set<Integer>, Integer> setMap;
            {
            TMap _map = oprot.readMapBegin();
            setMap = new HashMap<Set<Integer>, Integer>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                Set<Integer> _key1;
                            {
                            TSet _set1 = oprot.readSetBegin();
                            _key1 = new HashSet<Integer>(Math.max(0, _set1.size));
                            for (int _i1 = 0; (_set1.size < 0) ? oprot.peekSet() : (_i1 < _set1.size); _i1++) {
                                
                                int _value2 = oprot.readI32();
                                _key1.add(_value2);
                            }
                            oprot.readSetEnd();
                            }
                                int _value1 = oprot.readI32();
                setMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setSetMap(setMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SET_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, Set<Integer>> setMap2;
            {
            TMap _map = oprot.readMapBegin();
            setMap2 = new HashMap<Integer, Set<Integer>>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                Set<Integer> _value1;
                            {
                            TSet _set1 = oprot.readSetBegin();
                            _value1 = new HashSet<Integer>(Math.max(0, _set1.size));
                            for (int _i1 = 0; (_set1.size < 0) ? oprot.peekSet() : (_i1 < _set1.size); _i1++) {
                                
                                
                                int _value2 = oprot.readI32();
                                
                                
                                _value1.add(_value2);
                                
                            }
                            oprot.readSetEnd();
                            }
                                setMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setSetMap2(setMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAP_MAP:
          if (__field.type == TType.MAP) {
            Map<Map<Integer, Integer>, Integer> mapMap;
            {
            TMap _map = oprot.readMapBegin();
            mapMap = new HashMap<Map<Integer, Integer>, Integer>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                Map<Integer, Integer> _key1;
                            {
                            TMap _map1 = oprot.readMapBegin();
                            _key1 = new HashMap<Integer, Integer>(Math.max(0, _map1.size));
                            for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                
                                int _key2 = oprot.readI32();
                
                                int _value2 = oprot.readI32();
                                _key1.put(_key2, _value2);
                            }
                            oprot.readMapEnd();
                            }
                                int _value1 = oprot.readI32();
                mapMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setMapMap(mapMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAP_MAP_2:
          if (__field.type == TType.MAP) {
            Map<Integer, Map<Integer, Integer>> mapMap2;
            {
            TMap _map = oprot.readMapBegin();
            mapMap2 = new HashMap<Integer, Map<Integer, Integer>>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                int _key1 = oprot.readI32();
                Map<Integer, Integer> _value1;
                            {
                            TMap _map1 = oprot.readMapBegin();
                            _value1 = new HashMap<Integer, Integer>(Math.max(0, _map1.size));
                            for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                
                                
                                int _key2 = oprot.readI32();
                                
                
                                
                                int _value2 = oprot.readI32();
                                
                                
                                _value1.put(_key2, _value2);
                                
                            }
                            }
                            oprot.readMapEnd();
                                mapMap2.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setMapMap2(mapMap2);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (structList != null) {
        oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
        List<test.fixtures.complex_struct.MyStruct> _iter0 = structList;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
        for (test.fixtures.complex_struct.MyStruct _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (unionList != null) {
        oprot.writeFieldBegin(UNION_LIST_FIELD_DESC);
        List<test.fixtures.complex_struct.MyUnion> _iter0 = unionList;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
        for (test.fixtures.complex_struct.MyUnion _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (enumList != null) {
        oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
        List<test.fixtures.complex_struct.MyEnum> _iter0 = enumList;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (test.fixtures.complex_struct.MyEnum _iter1 : _iter0) {
          oprot.writeI32(_iter1 == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(_iter1));
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (structSet != null) {
        oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
        Set<test.fixtures.complex_struct.MyStruct> _iter0 = structSet;
        oprot.writeSetBegin(new TSet(TType.STRUCT, _iter0.size()));
        for (test.fixtures.complex_struct.MyStruct _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (unionSet != null) {
        oprot.writeFieldBegin(UNION_SET_FIELD_DESC);
        Set<test.fixtures.complex_struct.MyUnion> _iter0 = unionSet;
        oprot.writeSetBegin(new TSet(TType.STRUCT, _iter0.size()));
        for (test.fixtures.complex_struct.MyUnion _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (enumSet != null) {
        oprot.writeFieldBegin(ENUM_SET_FIELD_DESC);
        Set<test.fixtures.complex_struct.MyEnum> _iter0 = enumSet;
        oprot.writeSetBegin(new TSet(TType.I32, _iter0.size()));
        for (test.fixtures.complex_struct.MyEnum _iter1 : _iter0) {
          oprot.writeI32(_iter1 == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(_iter1));
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (structMap != null) {
        oprot.writeFieldBegin(STRUCT_MAP_FIELD_DESC);
        Map<test.fixtures.complex_struct.MyStruct, Long> _iter0 = structMap;
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, _iter0.size()));
        for (Map.Entry<test.fixtures.complex_struct.MyStruct, Long> _iter1 : _iter0.entrySet()) {
          _iter1.getKey().write0(oprot);
          oprot.writeI64(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (unionMap != null) {
        oprot.writeFieldBegin(UNION_MAP_FIELD_DESC);
        Map<test.fixtures.complex_struct.MyUnion, Long> _iter0 = unionMap;
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, _iter0.size()));
        for (Map.Entry<test.fixtures.complex_struct.MyUnion, Long> _iter1 : _iter0.entrySet()) {
          _iter1.getKey().write0(oprot);
          oprot.writeI64(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (enumMap != null) {
        oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
        Map<test.fixtures.complex_struct.MyEnum, Long> _iter0 = enumMap;
        oprot.writeMapBegin(new TMap(TType.I32, TType.I64, _iter0.size()));
        for (Map.Entry<test.fixtures.complex_struct.MyEnum, Long> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1 == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(_iter1.getKey()));
          oprot.writeI64(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (structMap2 != null) {
        oprot.writeFieldBegin(STRUCT_MAP_2_FIELD_DESC);
        Map<Integer, test.fixtures.complex_struct.MyStruct> _iter0 = structMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, _iter0.size()));
        for (Map.Entry<Integer, test.fixtures.complex_struct.MyStruct> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (unionMap2 != null) {
        oprot.writeFieldBegin(UNION_MAP_2_FIELD_DESC);
        Map<Integer, test.fixtures.complex_struct.MyUnion> _iter0 = unionMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, _iter0.size()));
        for (Map.Entry<Integer, test.fixtures.complex_struct.MyUnion> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (enumMap2 != null) {
        oprot.writeFieldBegin(ENUM_MAP_2_FIELD_DESC);
        Map<Integer, test.fixtures.complex_struct.MyEnum> _iter0 = enumMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter0.size()));
        for (Map.Entry<Integer, test.fixtures.complex_struct.MyEnum> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          oprot.writeI32(_iter1 == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(_iter1.getValue()));
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (listMap != null) {
        oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
        Map<List<Integer>, Integer> _iter0 = listMap;
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, _iter0.size()));
        for (Map.Entry<List<Integer>, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeListBegin(new TList(TType.I32, _iter1.getKey().size()));
        for (int _iter2 : _iter1.getKey()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
          oprot.writeI32(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (listMap2 != null) {
        oprot.writeFieldBegin(LIST_MAP_2_FIELD_DESC);
        Map<Integer, List<Integer>> _iter0 = listMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, _iter0.size()));
        for (Map.Entry<Integer, List<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          oprot.writeListBegin(new TList(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (setMap != null) {
        oprot.writeFieldBegin(SET_MAP_FIELD_DESC);
        Map<Set<Integer>, Integer> _iter0 = setMap;
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, _iter0.size()));
        for (Map.Entry<Set<Integer>, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getKey().size()));
        for (int _iter2 : _iter1.getKey()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
          oprot.writeI32(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (setMap2 != null) {
        oprot.writeFieldBegin(SET_MAP_2_FIELD_DESC);
        Map<Integer, Set<Integer>> _iter0 = setMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, _iter0.size()));
        for (Map.Entry<Integer, Set<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (mapMap != null) {
        oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
        Map<Map<Integer, Integer>, Integer> _iter0 = mapMap;
        oprot.writeMapBegin(new TMap(TType.MAP, TType.I32, _iter0.size()));
        for (Map.Entry<Map<Integer, Integer>, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter1.getKey().size()));
        for (Map.Entry<Integer, Integer> _iter2 : _iter1.getKey().entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
          oprot.writeI32(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (mapMap2 != null) {
        oprot.writeFieldBegin(MAP_MAP_2_FIELD_DESC);
        Map<Integer, Map<Integer, Integer>> _iter0 = mapMap2;
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, _iter0.size()));
        for (Map.Entry<Integer, Map<Integer, Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter1.getValue().size()));
        for (Map.Entry<Integer, Integer> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _ContainersLazy {
        private static final Containers _DEFAULT = new Containers.Builder().build();
    }
    
    public static Containers defaultInstance() {
        return  _ContainersLazy._DEFAULT;
    }
}
