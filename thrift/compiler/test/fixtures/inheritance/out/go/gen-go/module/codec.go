// Autogenerated by Thrift for thrift/compiler/test/fixtures/inheritance/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module


import (
    "sync"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO

// Premade codec specs
var (
    premadeCodecTypeSpec_void *thrift.TypeSpec = nil
)

// Premade codec specs initializer
var premadeCodecSpecsInitOnce = sync.OnceFunc(func() {
    premadeCodecTypeSpec_void = &thrift.TypeSpec{
        FullName: "void",
        CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_VOID,
},

    }
})

// Premade struct specs
var (
    premadeStructSpec_reqMyRootDoRoot *thrift.StructSpec = nil
    premadeStructSpec_respMyRootDoRoot *thrift.StructSpec = nil
    premadeStructSpec_reqMyNodeDoMid *thrift.StructSpec = nil
    premadeStructSpec_respMyNodeDoMid *thrift.StructSpec = nil
    premadeStructSpec_reqMyLeafDoLeaf *thrift.StructSpec = nil
    premadeStructSpec_respMyLeafDoLeaf *thrift.StructSpec = nil
)

// Premade struct specs initializer
var premadeStructSpecsInitOnce = sync.OnceFunc(func() {
    premadeStructSpec_reqMyRootDoRoot = &thrift.StructSpec{
    Name:                 "reqMyRootDoRoot",
    ScopedName:           "module.reqMyRootDoRoot",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_respMyRootDoRoot = &thrift.StructSpec{
    Name:                 "respMyRootDoRoot",
    ScopedName:           "module.respMyRootDoRoot",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_reqMyNodeDoMid = &thrift.StructSpec{
    Name:                 "reqMyNodeDoMid",
    ScopedName:           "module.reqMyNodeDoMid",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_respMyNodeDoMid = &thrift.StructSpec{
    Name:                 "respMyNodeDoMid",
    ScopedName:           "module.respMyNodeDoMid",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_reqMyLeafDoLeaf = &thrift.StructSpec{
    Name:                 "reqMyLeafDoLeaf",
    ScopedName:           "module.reqMyLeafDoLeaf",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_respMyLeafDoLeaf = &thrift.StructSpec{
    Name:                 "respMyLeafDoLeaf",
    ScopedName:           "module.respMyLeafDoLeaf",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
})

// Premade slice of all struct specs
var premadeStructSpecsOnce = sync.OnceValue(
    func() []*thrift.StructSpec {
        // Relies on premade struct specs
        premadeStructSpecsInitOnce()

        fbthriftResults := make([]*thrift.StructSpec, 0)
        return fbthriftResults
    },
)

var premadeCodecSpecsMapOnce = sync.OnceValue(
    func() map[string]*thrift.TypeSpec {
        // Relies on premade codec specs initialization
        premadeCodecSpecsInitOnce()

        fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_void.FullName] = premadeCodecTypeSpec_void
        return fbthriftTypeSpecsMap
    },
)

func init() {
    premadeCodecSpecsInitOnce()
    premadeStructSpecsInitOnce()
}

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMapOnce()[fullName]
}
