// Autogenerated by Thrift for thrift/annotation/cpp.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package cpp

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_cpp_RefType = &metadata.ThriftType{
        TEnum: &metadata.ThriftEnumType{
    Name: "cpp.RefType",
},

    }
    premadeThriftType_cpp_EnumUnderlyingType = &metadata.ThriftType{
        TEnum: &metadata.ThriftEnumType{
    Name: "cpp.EnumUnderlyingType",
},

    }
    premadeThriftType_string = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),

    }
    premadeThriftType_cpp_Name = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Name",
},

    }
    premadeThriftType_cpp_Type = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Type",
},

    }
    premadeThriftType_cpp_Ref = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Ref",
},

    }
    premadeThriftType_bool = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE),

    }
    premadeThriftType_cpp_Lazy = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Lazy",
},

    }
    premadeThriftType_cpp_DisableLazyChecksum = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.DisableLazyChecksum",
},

    }
    premadeThriftType_cpp_Adapter = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Adapter",
},

    }
    premadeThriftType_cpp_PackIsset = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.PackIsset",
},

    }
    premadeThriftType_cpp_MinimizePadding = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.MinimizePadding",
},

    }
    premadeThriftType_cpp_ScopedEnumAsUnionType = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.ScopedEnumAsUnionType",
},

    }
    premadeThriftType_cpp_FieldInterceptor = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.FieldInterceptor",
},

    }
    premadeThriftType_cpp_UseOpEncode = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.UseOpEncode",
},

    }
    premadeThriftType_cpp_EnumType = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.EnumType",
},

    }
    premadeThriftType_cpp_Frozen2Exclude = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Frozen2Exclude",
},

    }
    premadeThriftType_cpp_Frozen2RequiresCompleteContainerParams = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.Frozen2RequiresCompleteContainerParams",
},

    }
    premadeThriftType_cpp_ProcessInEbThreadUnsafe = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.ProcessInEbThreadUnsafe",
},

    }
    premadeThriftType_cpp_RuntimeAnnotation = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.RuntimeAnnotation",
},

    }
    premadeThriftType_cpp_UseCursorSerialization = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.UseCursorSerialization",
},

    }
    premadeThriftType_cpp_GenerateDeprecatedHeaderClientMethods = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.GenerateDeprecatedHeaderClientMethods",
},

    }
    premadeThriftType_cpp_AllowLegacyNonOptionalRef = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.AllowLegacyNonOptionalRef",
},

    }
    premadeThriftType_cpp_DeprecatedTerseWrite = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.DeprecatedTerseWrite",
},

    }
    premadeThriftType_cpp_AllowLegacyDeprecatedTerseWritesRef = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.AllowLegacyDeprecatedTerseWritesRef",
},

    }
    premadeThriftType_cpp_EnableCustomTypeOrdering = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.EnableCustomTypeOrdering",
},

    }
    premadeThriftType_cpp_GenerateServiceMethodDecorator = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "cpp.GenerateServiceMethodDecorator",
},

    }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["cpp.RefType"] = premadeThriftType_cpp_RefType
    fbthriftThriftTypesMap["cpp.EnumUnderlyingType"] = premadeThriftType_cpp_EnumUnderlyingType
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["cpp.Name"] = premadeThriftType_cpp_Name
    fbthriftThriftTypesMap["cpp.Type"] = premadeThriftType_cpp_Type
    fbthriftThriftTypesMap["cpp.Ref"] = premadeThriftType_cpp_Ref
    fbthriftThriftTypesMap["bool"] = premadeThriftType_bool
    fbthriftThriftTypesMap["cpp.Lazy"] = premadeThriftType_cpp_Lazy
    fbthriftThriftTypesMap["cpp.DisableLazyChecksum"] = premadeThriftType_cpp_DisableLazyChecksum
    fbthriftThriftTypesMap["cpp.Adapter"] = premadeThriftType_cpp_Adapter
    fbthriftThriftTypesMap["cpp.PackIsset"] = premadeThriftType_cpp_PackIsset
    fbthriftThriftTypesMap["cpp.MinimizePadding"] = premadeThriftType_cpp_MinimizePadding
    fbthriftThriftTypesMap["cpp.ScopedEnumAsUnionType"] = premadeThriftType_cpp_ScopedEnumAsUnionType
    fbthriftThriftTypesMap["cpp.FieldInterceptor"] = premadeThriftType_cpp_FieldInterceptor
    fbthriftThriftTypesMap["cpp.UseOpEncode"] = premadeThriftType_cpp_UseOpEncode
    fbthriftThriftTypesMap["cpp.EnumType"] = premadeThriftType_cpp_EnumType
    fbthriftThriftTypesMap["cpp.Frozen2Exclude"] = premadeThriftType_cpp_Frozen2Exclude
    fbthriftThriftTypesMap["cpp.Frozen2RequiresCompleteContainerParams"] = premadeThriftType_cpp_Frozen2RequiresCompleteContainerParams
    fbthriftThriftTypesMap["cpp.ProcessInEbThreadUnsafe"] = premadeThriftType_cpp_ProcessInEbThreadUnsafe
    fbthriftThriftTypesMap["cpp.RuntimeAnnotation"] = premadeThriftType_cpp_RuntimeAnnotation
    fbthriftThriftTypesMap["cpp.UseCursorSerialization"] = premadeThriftType_cpp_UseCursorSerialization
    fbthriftThriftTypesMap["cpp.GenerateDeprecatedHeaderClientMethods"] = premadeThriftType_cpp_GenerateDeprecatedHeaderClientMethods
    fbthriftThriftTypesMap["cpp.AllowLegacyNonOptionalRef"] = premadeThriftType_cpp_AllowLegacyNonOptionalRef
    fbthriftThriftTypesMap["cpp.DeprecatedTerseWrite"] = premadeThriftType_cpp_DeprecatedTerseWrite
    fbthriftThriftTypesMap["cpp.AllowLegacyDeprecatedTerseWritesRef"] = premadeThriftType_cpp_AllowLegacyDeprecatedTerseWritesRef
    fbthriftThriftTypesMap["cpp.EnableCustomTypeOrdering"] = premadeThriftType_cpp_EnableCustomTypeOrdering
    fbthriftThriftTypesMap["cpp.GenerateServiceMethodDecorator"] = premadeThriftType_cpp_GenerateServiceMethodDecorator
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Name))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Type))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Ref))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Lazy))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_DisableLazyChecksum))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Adapter))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_PackIsset))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_MinimizePadding))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_ScopedEnumAsUnionType))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_FieldInterceptor))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_UseOpEncode))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_EnumType))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Frozen2Exclude))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_Frozen2RequiresCompleteContainerParams))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_ProcessInEbThreadUnsafe))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_RuntimeAnnotation))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_UseCursorSerialization))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_GenerateDeprecatedHeaderClientMethods))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_AllowLegacyNonOptionalRef))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_DeprecatedTerseWrite))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_AllowLegacyDeprecatedTerseWritesRef))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_EnableCustomTypeOrdering))
    fbthriftResults = append(fbthriftResults, getMetadataThriftStruct(premadeStructSpec_GenerateServiceMethodDecorator))
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "cpp.RefType",
            Elements: map[int32]string{
                0: "Unique",
                1: "Shared",
                2: "SharedMutable",
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "cpp.EnumUnderlyingType",
            Elements: map[int32]string{
                0: "I8",
                1: "U8",
                2: "I16",
                3: "U16",
                4: "U32",
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}

func getMetadataThriftPrimitiveType(s *thrift.CodecPrimitiveSpec) *metadata.ThriftPrimitiveType {
	var value metadata.ThriftPrimitiveType

	switch s.PrimitiveType {
	case thrift.CODEC_PRIMITIVE_TYPE_BYTE:
		value = metadata.ThriftPrimitiveType_THRIFT_BYTE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BOOL:
		value = metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I16:
		value = metadata.ThriftPrimitiveType_THRIFT_I16_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I32:
		value = metadata.ThriftPrimitiveType_THRIFT_I32_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_I64:
		value = metadata.ThriftPrimitiveType_THRIFT_I64_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_FLOAT:
		value = metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_DOUBLE:
		value = metadata.ThriftPrimitiveType_THRIFT_DOUBLE_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_BINARY:
		value = metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE
	case thrift.CODEC_PRIMITIVE_TYPE_STRING:
		value = metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE
	}

	return thrift.Pointerize(value)
}

func getMetadataThriftEnumType(s *thrift.CodecEnumSpec) *metadata.ThriftEnumType {
	return metadata.NewThriftEnumType().
		SetName(s.ScopedName)
}

func getMetadataThriftSetType(s *thrift.CodecSetSpec) *metadata.ThriftSetType {
	return metadata.NewThriftSetType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftListType(s *thrift.CodecListSpec) *metadata.ThriftListType {
	return metadata.NewThriftListType().
		SetValueType(getMetadataThriftType(s.ElementTypeSpec))
}

func getMetadataThriftMapType(s *thrift.CodecMapSpec) *metadata.ThriftMapType {
	return metadata.NewThriftMapType().
		SetKeyType(getMetadataThriftType(s.KeyTypeSpec)).
		SetValueType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftTypedefType(s *thrift.CodecTypedefSpec) *metadata.ThriftTypedefType {
	return metadata.NewThriftTypedefType().
		SetName(s.ScopedName).
		SetUnderlyingType(getMetadataThriftType(s.UnderlyingTypeSpec))
}

func getMetadataThriftStructType(s *thrift.CodecStructSpec) *metadata.ThriftStructType {
	return metadata.NewThriftStructType().
		SetName(s.ScopedName)
}

func getMetadataThriftUnionType(s *thrift.CodecStructSpec) *metadata.ThriftUnionType {
	return metadata.NewThriftUnionType().
		SetName(s.ScopedName)
}

func getMetadataThriftType(s *thrift.TypeSpec) *metadata.ThriftType {
	thriftType := metadata.NewThriftType()
	switch {
	case s.CodecPrimitiveSpec != nil:
		thriftType.SetTPrimitive(getMetadataThriftPrimitiveType(s.CodecPrimitiveSpec))
	case s.CodecEnumSpec != nil:
		thriftType.SetTEnum(getMetadataThriftEnumType(s.CodecEnumSpec))
	case s.CodecSetSpec != nil:
		thriftType.SetTSet(getMetadataThriftSetType(s.CodecSetSpec))
	case s.CodecListSpec != nil:
		thriftType.SetTList(getMetadataThriftListType(s.CodecListSpec))
	case s.CodecMapSpec != nil:
		thriftType.SetTMap(getMetadataThriftMapType(s.CodecMapSpec))
	case s.CodecTypedefSpec != nil:
		thriftType.SetTTypedef(getMetadataThriftTypedefType(s.CodecTypedefSpec))
	case s.CodecStructSpec != nil:
		if s.CodecStructSpec.IsUnion {
			thriftType.SetTUnion(getMetadataThriftUnionType(s.CodecStructSpec))
		} else {
			thriftType.SetTStruct(getMetadataThriftStructType(s.CodecStructSpec))
		}
	}
	return thriftType
}

func getMetadataThriftField(s *thrift.FieldSpec) *metadata.ThriftField {
	return metadata.NewThriftField().
		SetId(int32(s.ID)).
		SetName(s.Name).
		SetIsOptional(s.IsOptional).
		SetType(getMetadataThriftType(s.ValueTypeSpec))
}

func getMetadataThriftStruct(s *thrift.StructSpec) *metadata.ThriftStruct {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftStruct().
		SetName(s.ScopedName).
		SetIsUnion(s.IsUnion).
		SetFields(metadataThriftFields)
}

func getMetadataThriftException(s *thrift.StructSpec) *metadata.ThriftException {
	metadataThriftFields := make([]*metadata.ThriftField, len(s.FieldSpecs), len(s.FieldSpecs))
	for i, fieldSpec := range s.FieldSpecs {
		metadataThriftFields[i] = getMetadataThriftField(&fieldSpec)
	}

	return metadata.NewThriftException().
		SetName(s.ScopedName).
		SetFields(metadataThriftFields)
}
