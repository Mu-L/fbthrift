// Autogenerated by Thrift for thrift/annotation/scope.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package scope

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_scope_Transitive = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Transitive"),
            )
    premadeThriftType_scope_Program = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Program"),
            )
    premadeThriftType_scope_Struct = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Struct"),
            )
    premadeThriftType_scope_Union = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Union"),
            )
    premadeThriftType_scope_Exception = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Exception"),
            )
    premadeThriftType_scope_Field = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Field"),
            )
    premadeThriftType_scope_Typedef = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Typedef"),
            )
    premadeThriftType_scope_Service = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Service"),
            )
    premadeThriftType_scope_Interaction = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Interaction"),
            )
    premadeThriftType_scope_Function = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Function"),
            )
    premadeThriftType_scope_EnumValue = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.EnumValue"),
            )
    premadeThriftType_scope_Const = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Const"),
            )
    premadeThriftType_scope_Enum = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Enum"),
            )
    premadeThriftType_scope_Structured = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Structured"),
            )
    premadeThriftType_scope_Interface = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Interface"),
            )
    premadeThriftType_scope_RootDefinition = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.RootDefinition"),
            )
    premadeThriftType_scope_Definition = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("scope.Definition"),
            )
)

var premadeThriftTypesMap = map[string]*metadata.ThriftType{
    "scope.Transitive": premadeThriftType_scope_Transitive,
    "scope.Program": premadeThriftType_scope_Program,
    "scope.Struct": premadeThriftType_scope_Struct,
    "scope.Union": premadeThriftType_scope_Union,
    "scope.Exception": premadeThriftType_scope_Exception,
    "scope.Field": premadeThriftType_scope_Field,
    "scope.Typedef": premadeThriftType_scope_Typedef,
    "scope.Service": premadeThriftType_scope_Service,
    "scope.Interaction": premadeThriftType_scope_Interaction,
    "scope.Function": premadeThriftType_scope_Function,
    "scope.EnumValue": premadeThriftType_scope_EnumValue,
    "scope.Const": premadeThriftType_scope_Const,
    "scope.Enum": premadeThriftType_scope_Enum,
    "scope.Structured": premadeThriftType_scope_Structured,
    "scope.Interface": premadeThriftType_scope_Interface,
    "scope.RootDefinition": premadeThriftType_scope_RootDefinition,
    "scope.Definition": premadeThriftType_scope_Definition,
}

var structMetadatas = []*metadata.ThriftStruct{
    metadata.NewThriftStruct().
    SetName("scope.Transitive").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Program").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Struct").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Union").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Exception").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Field").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Typedef").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Service").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Interaction").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Function").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.EnumValue").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Const").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Enum").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Structured").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Interface").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.RootDefinition").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("scope.Definition").
    SetIsUnion(false),
}

var exceptionMetadatas = []*metadata.ThriftException{
}

var enumMetadatas = []*metadata.ThriftEnum{
}

var serviceMetadatas = []*metadata.ThriftService{
}

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    allEnums := GetEnumsMetadata()
    allStructs := GetStructsMetadata()
    allExceptions := GetExceptionsMetadata()
    allServices := GetServicesMetadata()

    return metadata.NewThriftMetadata().
        SetEnums(allEnums).
        SetStructs(allStructs).
        SetExceptions(allExceptions).
        SetServices(allServices)
}

// GetEnumsMetadata returns Thrift metadata for enums in the current and recursively included packages.
func GetEnumsMetadata() map[string]*metadata.ThriftEnum {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }

    // ...now add enum metadatas from recursively included programs.

    return allEnumsMap
}

// GetStructsMetadata returns Thrift metadata for structs in the current and recursively included packages.
func GetStructsMetadata() map[string]*metadata.ThriftStruct {
    allStructsMap := make(map[string]*metadata.ThriftStruct)

    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }

    // ...now add struct metadatas from recursively included programs.

    return allStructsMap
}

// GetExceptionsMetadata returns Thrift metadata for exceptions in the current and recursively included packages.
func GetExceptionsMetadata() map[string]*metadata.ThriftException {
    allExceptionsMap := make(map[string]*metadata.ThriftException)

    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }

    // ...now add exception metadatas from recursively included programs.

    return allExceptionsMap
}

// GetServicesMetadata returns Thrift metadata for services in the current and recursively included packages.
func GetServicesMetadata() map[string]*metadata.ThriftService {
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // ...now add service metadatas from recursively included programs.

    return allServicesMap
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    thriftMetadata := GetThriftMetadata()

    allServicesMap := thriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    thriftMetadata.SetServices(relevantServicesMap)

    return thriftMetadata
}
