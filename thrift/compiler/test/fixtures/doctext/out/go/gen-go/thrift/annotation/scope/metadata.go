// Autogenerated by Thrift for thrift/annotation/scope.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package scope

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_scope_Transitive = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Transitive",
},

    }
    premadeThriftType_scope_Program = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Program",
},

    }
    premadeThriftType_scope_Struct = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Struct",
},

    }
    premadeThriftType_scope_Union = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Union",
},

    }
    premadeThriftType_scope_Exception = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Exception",
},

    }
    premadeThriftType_scope_Field = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Field",
},

    }
    premadeThriftType_scope_Typedef = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Typedef",
},

    }
    premadeThriftType_scope_Service = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Service",
},

    }
    premadeThriftType_scope_Interaction = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Interaction",
},

    }
    premadeThriftType_scope_Function = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Function",
},

    }
    premadeThriftType_scope_EnumValue = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.EnumValue",
},

    }
    premadeThriftType_scope_Const = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Const",
},

    }
    premadeThriftType_scope_Enum = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Enum",
},

    }
    premadeThriftType_scope_Structured = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Structured",
},

    }
    premadeThriftType_scope_Interface = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Interface",
},

    }
    premadeThriftType_scope_RootDefinition = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.RootDefinition",
},

    }
    premadeThriftType_scope_Definition = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.Definition",
},

    }
    premadeThriftType_scope_DisableSchemaConst = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "scope.DisableSchemaConst",
},

    }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["scope.Transitive"] = premadeThriftType_scope_Transitive
    fbthriftThriftTypesMap["scope.Program"] = premadeThriftType_scope_Program
    fbthriftThriftTypesMap["scope.Struct"] = premadeThriftType_scope_Struct
    fbthriftThriftTypesMap["scope.Union"] = premadeThriftType_scope_Union
    fbthriftThriftTypesMap["scope.Exception"] = premadeThriftType_scope_Exception
    fbthriftThriftTypesMap["scope.Field"] = premadeThriftType_scope_Field
    fbthriftThriftTypesMap["scope.Typedef"] = premadeThriftType_scope_Typedef
    fbthriftThriftTypesMap["scope.Service"] = premadeThriftType_scope_Service
    fbthriftThriftTypesMap["scope.Interaction"] = premadeThriftType_scope_Interaction
    fbthriftThriftTypesMap["scope.Function"] = premadeThriftType_scope_Function
    fbthriftThriftTypesMap["scope.EnumValue"] = premadeThriftType_scope_EnumValue
    fbthriftThriftTypesMap["scope.Const"] = premadeThriftType_scope_Const
    fbthriftThriftTypesMap["scope.Enum"] = premadeThriftType_scope_Enum
    fbthriftThriftTypesMap["scope.Structured"] = premadeThriftType_scope_Structured
    fbthriftThriftTypesMap["scope.Interface"] = premadeThriftType_scope_Interface
    fbthriftThriftTypesMap["scope.RootDefinition"] = premadeThriftType_scope_RootDefinition
    fbthriftThriftTypesMap["scope.Definition"] = premadeThriftType_scope_Definition
    fbthriftThriftTypesMap["scope.DisableSchemaConst"] = premadeThriftType_scope_DisableSchemaConst
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Transitive",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Program",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Struct",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Union",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Exception",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Field",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Typedef",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Service",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Interaction",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Function",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.EnumValue",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Const",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Enum",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Structured",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Struct",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Union",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Exception",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Transitive",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Interface",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Service",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Interaction",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Transitive",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.RootDefinition",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Structured",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Interface",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Typedef",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Enum",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Const",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Transitive",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.Definition",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.RootDefinition",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Field",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Function",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.EnumValue",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Transitive",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "scope.DisableSchemaConst",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "scope.Program",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                    },
                },
            },
        },
    )
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
