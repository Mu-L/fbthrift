/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/fatal/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_fatal.h"

#include <fatal/type/enum.h>

#include <type_traits>

namespace apache::thrift::detail {
template <>
struct ExtraEnumTraits<::test_cpp2::cpp_reflection::enum1> {
  static inline constexpr std::string_view name = "enum1";
  using module = ::test_cpp2::cpp_reflection::module_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::test_cpp2::cpp_reflection::enum1> = true;
template <>
struct ExtraEnumTraits<::test_cpp2::cpp_reflection::enum2> {
  static inline constexpr std::string_view name = "enum2";
  using module = ::test_cpp2::cpp_reflection::module_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::test_cpp2::cpp_reflection::enum2> = true;
template <>
struct ExtraEnumTraits<::test_cpp2::cpp_reflection::enum3> {
  static inline constexpr std::string_view name = "enum3";
  using module = ::test_cpp2::cpp_reflection::module_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::test_cpp2::cpp_reflection::enum3> = true;
template <>
struct ExtraEnumTraits<::test_cpp2::cpp_reflection::enum_with_special_names> {
  static inline constexpr std::string_view name = "enum_with_special_names";
  using module = ::test_cpp2::cpp_reflection::module_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::test_cpp2::cpp_reflection::enum_with_special_names> = true;
}
