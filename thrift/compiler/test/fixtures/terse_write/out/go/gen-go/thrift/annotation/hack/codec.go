// Autogenerated by Thrift for thrift/annotation/hack.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package hack


import (
    "reflect"
    "sync"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = reflect.Ptr

// Premade codec specs
var (
    premadeCodecTypeSpec_string *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_FieldWrapper *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_Wrapper *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_Adapter *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_SkipCodegen *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_Name *thrift.TypeSpec = nil
    premadeCodecTypeSpec_list_string *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_UnionEnumAttributes *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_StructTrait *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_Attributes *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_StructAsTrait *thrift.TypeSpec = nil
    premadeCodecTypeSpec_hack_ModuleInternal *thrift.TypeSpec = nil
)

// Premade codec specs initializer
var premadeCodecSpecsInitOnce = sync.OnceFunc(func() {
    premadeCodecTypeSpec_string = &thrift.TypeSpec{
        FullName: "string",
        CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
},

    }
    premadeCodecTypeSpec_hack_FieldWrapper = &thrift.TypeSpec{
        FullName: "hack.FieldWrapper",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.FieldWrapper",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewFieldWrapper() },
},

    }
    premadeCodecTypeSpec_hack_Wrapper = &thrift.TypeSpec{
        FullName: "hack.Wrapper",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.Wrapper",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewWrapper() },
},

    }
    premadeCodecTypeSpec_hack_Adapter = &thrift.TypeSpec{
        FullName: "hack.Adapter",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.Adapter",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewAdapter() },
},

    }
    premadeCodecTypeSpec_hack_SkipCodegen = &thrift.TypeSpec{
        FullName: "hack.SkipCodegen",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.SkipCodegen",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewSkipCodegen() },
},

    }
    premadeCodecTypeSpec_hack_Name = &thrift.TypeSpec{
        FullName: "hack.Name",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.Name",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewName() },
},

    }
    premadeCodecTypeSpec_list_string = &thrift.TypeSpec{
        FullName: "list<string>",
        CodecListSpec: &thrift.CodecListSpec{
    ElementWireType: thrift.STRING,
	ElementTypeSpec: premadeCodecTypeSpec_string,
},

    }
    premadeCodecTypeSpec_hack_UnionEnumAttributes = &thrift.TypeSpec{
        FullName: "hack.UnionEnumAttributes",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.UnionEnumAttributes",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewUnionEnumAttributes() },
},

    }
    premadeCodecTypeSpec_hack_StructTrait = &thrift.TypeSpec{
        FullName: "hack.StructTrait",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.StructTrait",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewStructTrait() },
},

    }
    premadeCodecTypeSpec_hack_Attributes = &thrift.TypeSpec{
        FullName: "hack.Attributes",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.Attributes",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewAttributes() },
},

    }
    premadeCodecTypeSpec_hack_StructAsTrait = &thrift.TypeSpec{
        FullName: "hack.StructAsTrait",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.StructAsTrait",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewStructAsTrait() },
},

    }
    premadeCodecTypeSpec_hack_ModuleInternal = &thrift.TypeSpec{
        FullName: "hack.ModuleInternal",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "hack.ModuleInternal",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewModuleInternal() },
},

    }
})

// Premade struct specs
var (
    premadeStructSpec_FieldWrapper *thrift.StructSpec = nil
    premadeStructSpec_Wrapper *thrift.StructSpec = nil
    premadeStructSpec_Adapter *thrift.StructSpec = nil
    premadeStructSpec_SkipCodegen *thrift.StructSpec = nil
    premadeStructSpec_Name *thrift.StructSpec = nil
    premadeStructSpec_UnionEnumAttributes *thrift.StructSpec = nil
    premadeStructSpec_StructTrait *thrift.StructSpec = nil
    premadeStructSpec_Attributes *thrift.StructSpec = nil
    premadeStructSpec_StructAsTrait *thrift.StructSpec = nil
    premadeStructSpec_ModuleInternal *thrift.StructSpec = nil
)

// Premade struct specs initializer
var premadeStructSpecsInitOnce = sync.OnceFunc(func() {
    premadeStructSpec_FieldWrapper = &thrift.StructSpec{
    Name:                 "FieldWrapper",
    ScopedName:           "hack.FieldWrapper",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    premadeStructSpec_Wrapper = &thrift.StructSpec{
    Name:                 "Wrapper",
    ScopedName:           "hack.Wrapper",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },        {
            ID:                   2,
            WireType:             thrift.STRING,
            Name:                 "underlyingName",
            ReflectIndex:         1,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },        {
            ID:                   3,
            WireType:             thrift.STRING,
            Name:                 "extraNamespace",
            ReflectIndex:         2,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
        2: 1,
        3: 2,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
        "underlyingName": 1,
        "extraNamespace": 2,
    },
}
    premadeStructSpec_Adapter = &thrift.StructSpec{
    Name:                 "Adapter",
    ScopedName:           "hack.Adapter",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    premadeStructSpec_SkipCodegen = &thrift.StructSpec{
    Name:                 "SkipCodegen",
    ScopedName:           "hack.SkipCodegen",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "reason",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "reason": 0,
    },
}
    premadeStructSpec_Name = &thrift.StructSpec{
    Name:                 "Name",
    ScopedName:           "hack.Name",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },        {
            ID:                   2,
            WireType:             thrift.STRING,
            Name:                 "reason",
            ReflectIndex:         1,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
        2: 1,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
        "reason": 1,
    },
}
    premadeStructSpec_UnionEnumAttributes = &thrift.StructSpec{
    Name:                 "UnionEnumAttributes",
    ScopedName:           "hack.UnionEnumAttributes",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.LIST,
            Name:                 "attributes",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_list_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "attributes": 0,
    },
}
    premadeStructSpec_StructTrait = &thrift.StructSpec{
    Name:                 "StructTrait",
    ScopedName:           "hack.StructTrait",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    premadeStructSpec_Attributes = &thrift.StructSpec{
    Name:                 "Attributes",
    ScopedName:           "hack.Attributes",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.LIST,
            Name:                 "attributes",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_list_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "attributes": 0,
    },
}
    premadeStructSpec_StructAsTrait = &thrift.StructSpec{
    Name:                 "StructAsTrait",
    ScopedName:           "hack.StructAsTrait",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    premadeStructSpec_ModuleInternal = &thrift.StructSpec{
    Name:                 "ModuleInternal",
    ScopedName:           "hack.ModuleInternal",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
})

var premadeCodecSpecsMapOnce = sync.OnceValue(
    func() map[string]*thrift.TypeSpec {
        // Relies on premade codec specs initialization
        premadeCodecSpecsInitOnce()

        fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_FieldWrapper.FullName] = premadeCodecTypeSpec_hack_FieldWrapper
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_Wrapper.FullName] = premadeCodecTypeSpec_hack_Wrapper
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_Adapter.FullName] = premadeCodecTypeSpec_hack_Adapter
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_SkipCodegen.FullName] = premadeCodecTypeSpec_hack_SkipCodegen
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_Name.FullName] = premadeCodecTypeSpec_hack_Name
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_UnionEnumAttributes.FullName] = premadeCodecTypeSpec_hack_UnionEnumAttributes
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_StructTrait.FullName] = premadeCodecTypeSpec_hack_StructTrait
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_Attributes.FullName] = premadeCodecTypeSpec_hack_Attributes
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_StructAsTrait.FullName] = premadeCodecTypeSpec_hack_StructAsTrait
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_hack_ModuleInternal.FullName] = premadeCodecTypeSpec_hack_ModuleInternal
        return fbthriftTypeSpecsMap
    },
)

func init() {
    premadeCodecSpecsInitOnce()
    premadeStructSpecsInitOnce()
}

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMapOnce()[fullName]
}
