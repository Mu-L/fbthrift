// Autogenerated by Thrift for thrift/annotation/cpp.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package cpp

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_cpp_RefType =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "cpp.RefType",
                },
        }
    premadeThriftType_cpp_EnumUnderlyingType =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "cpp.EnumUnderlyingType",
                },
        }
    premadeThriftType_string =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),
        }
    premadeThriftType_cpp_Name =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Name",
                },
        }
    premadeThriftType_cpp_Type =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Type",
                },
        }
    premadeThriftType_cpp_Ref =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Ref",
                },
        }
    premadeThriftType_bool =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE),
        }
    premadeThriftType_cpp_Lazy =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Lazy",
                },
        }
    premadeThriftType_cpp_DisableLazyChecksum =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.DisableLazyChecksum",
                },
        }
    premadeThriftType_cpp_Adapter =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Adapter",
                },
        }
    premadeThriftType_cpp_PackIsset =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.PackIsset",
                },
        }
    premadeThriftType_cpp_MinimizePadding =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.MinimizePadding",
                },
        }
    premadeThriftType_cpp_ScopedEnumAsUnionType =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.ScopedEnumAsUnionType",
                },
        }
    premadeThriftType_cpp_FieldInterceptor =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.FieldInterceptor",
                },
        }
    premadeThriftType_cpp_UseOpEncode =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.UseOpEncode",
                },
        }
    premadeThriftType_cpp_EnumType =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.EnumType",
                },
        }
    premadeThriftType_cpp_Frozen2Exclude =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Frozen2Exclude",
                },
        }
    premadeThriftType_cpp_Frozen2RequiresCompleteContainerParams =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.Frozen2RequiresCompleteContainerParams",
                },
        }
    premadeThriftType_cpp_ProcessInEbThreadUnsafe =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.ProcessInEbThreadUnsafe",
                },
        }
    premadeThriftType_cpp_RuntimeAnnotation =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.RuntimeAnnotation",
                },
        }
    premadeThriftType_cpp_UseCursorSerialization =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.UseCursorSerialization",
                },
        }
    premadeThriftType_cpp_GenerateDeprecatedHeaderClientMethods =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.GenerateDeprecatedHeaderClientMethods",
                },
        }
    premadeThriftType_cpp_AllowLegacyNonOptionalRef =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.AllowLegacyNonOptionalRef",
                },
        }
    premadeThriftType_cpp_DeprecatedTerseWrite =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.DeprecatedTerseWrite",
                },
        }
    premadeThriftType_cpp_AllowLegacyDeprecatedTerseWritesRef =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.AllowLegacyDeprecatedTerseWritesRef",
                },
        }
    premadeThriftType_cpp_EnableCustomTypeOrdering =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.EnableCustomTypeOrdering",
                },
        }
    premadeThriftType_cpp_GenerateServiceMethodDecorator =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "cpp.GenerateServiceMethodDecorator",
                },
        }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["cpp.RefType"] = premadeThriftType_cpp_RefType
    fbthriftThriftTypesMap["cpp.EnumUnderlyingType"] = premadeThriftType_cpp_EnumUnderlyingType
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["cpp.Name"] = premadeThriftType_cpp_Name
    fbthriftThriftTypesMap["cpp.Type"] = premadeThriftType_cpp_Type
    fbthriftThriftTypesMap["cpp.Ref"] = premadeThriftType_cpp_Ref
    fbthriftThriftTypesMap["bool"] = premadeThriftType_bool
    fbthriftThriftTypesMap["cpp.Lazy"] = premadeThriftType_cpp_Lazy
    fbthriftThriftTypesMap["cpp.DisableLazyChecksum"] = premadeThriftType_cpp_DisableLazyChecksum
    fbthriftThriftTypesMap["cpp.Adapter"] = premadeThriftType_cpp_Adapter
    fbthriftThriftTypesMap["cpp.PackIsset"] = premadeThriftType_cpp_PackIsset
    fbthriftThriftTypesMap["cpp.MinimizePadding"] = premadeThriftType_cpp_MinimizePadding
    fbthriftThriftTypesMap["cpp.ScopedEnumAsUnionType"] = premadeThriftType_cpp_ScopedEnumAsUnionType
    fbthriftThriftTypesMap["cpp.FieldInterceptor"] = premadeThriftType_cpp_FieldInterceptor
    fbthriftThriftTypesMap["cpp.UseOpEncode"] = premadeThriftType_cpp_UseOpEncode
    fbthriftThriftTypesMap["cpp.EnumType"] = premadeThriftType_cpp_EnumType
    fbthriftThriftTypesMap["cpp.Frozen2Exclude"] = premadeThriftType_cpp_Frozen2Exclude
    fbthriftThriftTypesMap["cpp.Frozen2RequiresCompleteContainerParams"] = premadeThriftType_cpp_Frozen2RequiresCompleteContainerParams
    fbthriftThriftTypesMap["cpp.ProcessInEbThreadUnsafe"] = premadeThriftType_cpp_ProcessInEbThreadUnsafe
    fbthriftThriftTypesMap["cpp.RuntimeAnnotation"] = premadeThriftType_cpp_RuntimeAnnotation
    fbthriftThriftTypesMap["cpp.UseCursorSerialization"] = premadeThriftType_cpp_UseCursorSerialization
    fbthriftThriftTypesMap["cpp.GenerateDeprecatedHeaderClientMethods"] = premadeThriftType_cpp_GenerateDeprecatedHeaderClientMethods
    fbthriftThriftTypesMap["cpp.AllowLegacyNonOptionalRef"] = premadeThriftType_cpp_AllowLegacyNonOptionalRef
    fbthriftThriftTypesMap["cpp.DeprecatedTerseWrite"] = premadeThriftType_cpp_DeprecatedTerseWrite
    fbthriftThriftTypesMap["cpp.AllowLegacyDeprecatedTerseWritesRef"] = premadeThriftType_cpp_AllowLegacyDeprecatedTerseWritesRef
    fbthriftThriftTypesMap["cpp.EnableCustomTypeOrdering"] = premadeThriftType_cpp_EnableCustomTypeOrdering
    fbthriftThriftTypesMap["cpp.GenerateServiceMethodDecorator"] = premadeThriftType_cpp_GenerateServiceMethodDecorator
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Name",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "value",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Type",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "name",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "template",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Ref",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "type",
                        IsOptional: false,
                        Type:       premadeThriftType_cpp_RefType,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Lazy",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "ref",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.DisableLazyChecksum",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Adapter",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "name",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "adaptedType",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         3,
                        Name:       "underlyingName",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         4,
                        Name:       "extraNamespace",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         5,
                        Name:       "moveOnly",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.PackIsset",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "atomic",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.MinimizePadding",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.ScopedEnumAsUnionType",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.FieldInterceptor",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "name",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "noinline",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.UseOpEncode",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.EnumType",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "type",
                        IsOptional: false,
                        Type:       premadeThriftType_cpp_EnumUnderlyingType,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Frozen2Exclude",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.Frozen2RequiresCompleteContainerParams",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.ProcessInEbThreadUnsafe",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.RuntimeAnnotation",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.UseCursorSerialization",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.GenerateDeprecatedHeaderClientMethods",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.AllowLegacyNonOptionalRef",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.DeprecatedTerseWrite",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.AllowLegacyDeprecatedTerseWritesRef",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.EnableCustomTypeOrdering",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "cpp.GenerateServiceMethodDecorator",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "cpp.RefType",
            Elements: map[int32]string{
                0: "Unique",
                1: "Shared",
                2: "SharedMutable",
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "cpp.EnumUnderlyingType",
            Elements: map[int32]string{
                0: "I8",
                1: "U8",
                2: "I16",
                3: "U16",
                4: "U32",
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
