/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/enums.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/enums_types.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/enums_fatal.h"

#include <fatal/type/enum.h>

#include <type_traits>

namespace apache::thrift::detail {
template <>
struct ExtraEnumTraits<::facebook::ns::qwerty::AnEnumA> {
  static inline constexpr std::string_view name = "AnEnumA";
  using module = ::facebook::ns::qwerty::enums_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::facebook::ns::qwerty::AnEnumA> = true;
template <>
struct ExtraEnumTraits<::facebook::ns::qwerty::AnEnumB> {
  static inline constexpr std::string_view name = "AnEnumB";
  using module = ::facebook::ns::qwerty::enums_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::facebook::ns::qwerty::AnEnumB> = true;
template <>
struct ExtraEnumTraits<::facebook::ns::qwerty::AnEnumC> {
  static inline constexpr std::string_view name = "AnEnumC";
  using module = ::facebook::ns::qwerty::enums_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::facebook::ns::qwerty::AnEnumC> = true;
template <>
struct ExtraEnumTraits<::facebook::ns::qwerty::AnEnumD> {
  static inline constexpr std::string_view name = "AnEnumD";
  using module = ::facebook::ns::qwerty::enums_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::facebook::ns::qwerty::AnEnumD> = true;
template <>
struct ExtraEnumTraits<::facebook::ns::qwerty::AnEnumE> {
  static inline constexpr std::string_view name = "AnEnumE";
  using module = ::facebook::ns::qwerty::enums_tags::module;
};
template<>
inline constexpr bool kHasExtraEnumTraits<::facebook::ns::qwerty::AnEnumE> = true;
}
