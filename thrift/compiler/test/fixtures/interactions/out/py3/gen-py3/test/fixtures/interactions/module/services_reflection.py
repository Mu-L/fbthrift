#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from thrift.py3.reflection import (
  ArgumentSpec as __ArgumentSpec,
  InterfaceSpec as __InterfaceSpec,
  MethodSpec as __MethodSpec,
  NumberType as __NumberType,
)

import folly.iobuf as _fbthrift_iobuf

import test.fixtures.another_interactions.shared.types as _test_fixtures_another_interactions_shared_types

import test.fixtures.interactions.module.types as _test_fixtures_interactions_module_types


def get_reflection__MyService(for_clients: bool):
    spec: __InterfaceSpec = __InterfaceSpec(
        name="MyService",
        methods=None,
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="foo",
            arguments=(
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="interact",
            arguments=(
                __ArgumentSpec.__new__(
                    __ArgumentSpec,
                    name="arg",
                    type=int,
                    kind=__NumberType.I32,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="interactFast",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="serialize",
            arguments=(
            ),
            result=_test_fixtures_interactions_module_types.ResponseAndClientBufferedStream__i32_i32 if for_clients else _test_fixtures_interactions_module_types.ResponseAndServerStream__i32_i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


def get_reflection__Factories(for_clients: bool):
    spec: __InterfaceSpec = __InterfaceSpec(
        name="Factories",
        methods=None,
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="foo",
            arguments=(
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="interact",
            arguments=(
                __ArgumentSpec.__new__(
                    __ArgumentSpec,
                    name="arg",
                    type=int,
                    kind=__NumberType.I32,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="interactFast",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="serialize",
            arguments=(
            ),
            result=_test_fixtures_interactions_module_types.ResponseAndClientBufferedStream__i32_i32 if for_clients else _test_fixtures_interactions_module_types.ResponseAndServerStream__i32_i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


def get_reflection__Perform(for_clients: bool):
    spec: __InterfaceSpec = __InterfaceSpec(
        name="Perform",
        methods=None,
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="foo",
            arguments=(
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


def get_reflection__InteractWithShared(for_clients: bool):
    spec: __InterfaceSpec = __InterfaceSpec(
        name="InteractWithShared",
        methods=None,
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="do_some_similar_things",
            arguments=(
            ),
            result=_test_fixtures_another_interactions_shared_types.DoSomethingResult,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


def get_reflection__BoxService(for_clients: bool):
    spec: __InterfaceSpec = __InterfaceSpec(
        name="BoxService",
        methods=None,
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.__new__(
            __MethodSpec,
            name="getABoxSession",
            arguments=(
                __ArgumentSpec.__new__(
                    __ArgumentSpec,
                    name="req",
                    type=_test_fixtures_interactions_module_types.ShouldBeBoxed,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_test_fixtures_interactions_module_types.ShouldBeBoxed,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec
