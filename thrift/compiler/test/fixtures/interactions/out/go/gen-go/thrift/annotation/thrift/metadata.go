// Autogenerated by Thrift for thrift/annotation/thrift.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package thrift

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_thrift_RpcPriority = &metadata.ThriftType{
        TEnum: &metadata.ThriftEnumType{
    Name: "thrift.RpcPriority",
},

    }
    premadeThriftType_thrift_Experimental = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Experimental",
},

    }
    premadeThriftType_i32 = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I32_TYPE),

    }
    premadeThriftType_list_i32 = &metadata.ThriftType{
        TList: &metadata.ThriftListType{
    ValueType: premadeThriftType_i32,
},

    }
    premadeThriftType_map_i32_i32 = &metadata.ThriftType{
        TMap: &metadata.ThriftMapType{
    KeyType:   premadeThriftType_i32,
    ValueType: premadeThriftType_i32,
},

    }
    premadeThriftType_thrift_ReserveIds = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.ReserveIds",
},

    }
    premadeThriftType_bool = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE),

    }
    premadeThriftType_thrift_RequiresBackwardCompatibility = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.RequiresBackwardCompatibility",
},

    }
    premadeThriftType_thrift_TerseWrite = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.TerseWrite",
},

    }
    premadeThriftType_thrift_Box = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Box",
},

    }
    premadeThriftType_thrift_Mixin = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Mixin",
},

    }
    premadeThriftType_thrift_SerializeInFieldIdOrder = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.SerializeInFieldIdOrder",
},

    }
    premadeThriftType_thrift_BitmaskEnum = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.BitmaskEnum",
},

    }
    premadeThriftType_thrift_ExceptionMessage = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.ExceptionMessage",
},

    }
    premadeThriftType_thrift_InternBox = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.InternBox",
},

    }
    premadeThriftType_thrift_Serial = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Serial",
},

    }
    premadeThriftType_string = &metadata.ThriftType{
        TPrimitive: thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),

    }
    premadeThriftType_thrift_Uri = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Uri",
},

    }
    premadeThriftType_thrift_Priority = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.Priority",
},

    }
    premadeThriftType_map_string_string = &metadata.ThriftType{
        TMap: &metadata.ThriftMapType{
    KeyType:   premadeThriftType_string,
    ValueType: premadeThriftType_string,
},

    }
    premadeThriftType_thrift_DeprecatedUnvalidatedAnnotations = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.DeprecatedUnvalidatedAnnotations",
},

    }
    premadeThriftType_thrift_AllowReservedIdentifier = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.AllowReservedIdentifier",
},

    }
    premadeThriftType_thrift_AllowReservedFilename = &metadata.ThriftType{
        TStruct: &metadata.ThriftStructType{
    Name: "thrift.AllowReservedFilename",
},

    }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["thrift.RpcPriority"] = premadeThriftType_thrift_RpcPriority
    fbthriftThriftTypesMap["thrift.Experimental"] = premadeThriftType_thrift_Experimental
    fbthriftThriftTypesMap["i32"] = premadeThriftType_i32
    fbthriftThriftTypesMap["thrift.ReserveIds"] = premadeThriftType_thrift_ReserveIds
    fbthriftThriftTypesMap["bool"] = premadeThriftType_bool
    fbthriftThriftTypesMap["thrift.RequiresBackwardCompatibility"] = premadeThriftType_thrift_RequiresBackwardCompatibility
    fbthriftThriftTypesMap["thrift.TerseWrite"] = premadeThriftType_thrift_TerseWrite
    fbthriftThriftTypesMap["thrift.Box"] = premadeThriftType_thrift_Box
    fbthriftThriftTypesMap["thrift.Mixin"] = premadeThriftType_thrift_Mixin
    fbthriftThriftTypesMap["thrift.SerializeInFieldIdOrder"] = premadeThriftType_thrift_SerializeInFieldIdOrder
    fbthriftThriftTypesMap["thrift.BitmaskEnum"] = premadeThriftType_thrift_BitmaskEnum
    fbthriftThriftTypesMap["thrift.ExceptionMessage"] = premadeThriftType_thrift_ExceptionMessage
    fbthriftThriftTypesMap["thrift.InternBox"] = premadeThriftType_thrift_InternBox
    fbthriftThriftTypesMap["thrift.Serial"] = premadeThriftType_thrift_Serial
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["thrift.Uri"] = premadeThriftType_thrift_Uri
    fbthriftThriftTypesMap["thrift.Priority"] = premadeThriftType_thrift_Priority
    fbthriftThriftTypesMap["thrift.DeprecatedUnvalidatedAnnotations"] = premadeThriftType_thrift_DeprecatedUnvalidatedAnnotations
    fbthriftThriftTypesMap["thrift.AllowReservedIdentifier"] = premadeThriftType_thrift_AllowReservedIdentifier
    fbthriftThriftTypesMap["thrift.AllowReservedFilename"] = premadeThriftType_thrift_AllowReservedFilename
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Experimental",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.ReserveIds",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "ids",
                    IsOptional: false,
                    Type:       premadeThriftType_list_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "id_ranges",
                    IsOptional: false,
                    Type:       premadeThriftType_map_i32_i32,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.RequiresBackwardCompatibility",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "field_name",
                    IsOptional: false,
                    Type:       premadeThriftType_bool,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.TerseWrite",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Box",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Mixin",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.SerializeInFieldIdOrder",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.BitmaskEnum",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.ExceptionMessage",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.InternBox",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Serial",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Uri",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "value",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.Priority",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "level",
                    IsOptional: false,
                    Type:       premadeThriftType_thrift_RpcPriority,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.DeprecatedUnvalidatedAnnotations",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "items",
                    IsOptional: false,
                    Type:       premadeThriftType_map_string_string,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.AllowReservedIdentifier",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftStruct{
            Name:    "thrift.AllowReservedFilename",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
            },
        },
    )
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "thrift.RpcPriority",
            Elements: map[int32]string{
                0: "HIGH_IMPORTANT",
                1: "HIGH",
                2: "IMPORTANT",
                3: "NORMAL",
                4: "BEST_EFFORT",
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
