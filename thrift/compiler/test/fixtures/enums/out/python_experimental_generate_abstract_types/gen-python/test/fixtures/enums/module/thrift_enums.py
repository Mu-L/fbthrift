#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import thrift.python.types as _fbthrift_python_types
import test.fixtures.enums.module.thrift_metadata

class _fbthrift_compatible_with_Metasyntactic:
    pass


class Metasyntactic(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_Metasyntactic):
    FOO = 1
    BAR = 2
    BAZ = 3
    BAX = 4
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.Metasyntactic"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/Metasyntactic"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_Metasyntactic()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.Metasyntactic(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyEnum1:
    pass


class MyEnum1(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyEnum1):
    ME1_0 = 0
    ME1_1 = 1
    ME1_2 = 2
    ME1_3 = 3
    ME1_5 = 5
    ME1_6 = 6
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyEnum1"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyEnum1"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyEnum1()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyEnum1(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyEnum2:
    pass


class MyEnum2(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyEnum2):
    ME2_0 = 0
    ME2_1 = 1
    ME2_2 = 2
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyEnum2"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyEnum2"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyEnum2()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyEnum2(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyEnum3:
    pass


class MyEnum3(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyEnum3):
    ME3_0 = 0
    ME3_1 = 1
    ME3_N2 = -2
    ME3_N1 = -1
    ME3_9 = 9
    ME3_10 = 10
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyEnum3"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyEnum3"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyEnum3()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyEnum3(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyEnum4:
    pass


class MyEnum4(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyEnum4):
    ME4_A = 2147483645
    ME4_B = 2147483646
    ME4_C = 2147483647
    ME4_D = -2147483648
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyEnum4"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyEnum4"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyEnum4()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyEnum4(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyBitmaskEnum1:
    pass


class MyBitmaskEnum1(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyBitmaskEnum1):
    ONE = 1
    TWO = 2
    FOUR = 4
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyBitmaskEnum1"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyBitmaskEnum1"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyBitmaskEnum1()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyBitmaskEnum1(self.value)

    def _to_py_deprecated(self):
        return self.value

class _fbthrift_compatible_with_MyBitmaskEnum2:
    pass


class MyBitmaskEnum2(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyBitmaskEnum2):
    ONE = 1
    TWO = 2
    FOUR = 4
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyBitmaskEnum2"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/enums/MyBitmaskEnum2"

    @staticmethod
    def __get_metadata__():
        return test.fixtures.enums.module.thrift_metadata.gen_metadata_enum_MyBitmaskEnum2()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.enums.module.types")
        return py3_types.MyBitmaskEnum2(self.value)

    def _to_py_deprecated(self):
        return self.value
