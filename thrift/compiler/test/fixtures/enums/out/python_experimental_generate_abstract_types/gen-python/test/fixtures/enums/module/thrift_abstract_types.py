
# EXPERIMENTAL - DO NOT USE !!!
# See `experimental_generate_abstract_types` documentation in thrift compiler

#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import abc as _abc
import typing as _typing

import test.fixtures.enums.module.thrift_abstract_types as _fbthrift_current_module
_fbthrift_property = property


import folly.iobuf as _fbthrift_iobuf
import thrift.python.abstract_types as _fbthrift_python_abstract_types
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_Metasyntactic
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyEnum1
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyEnum2
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyEnum3
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyEnum4
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyBitmaskEnum1
from test.fixtures.enums.module.thrift_enums import _fbthrift_compatible_with_MyBitmaskEnum2

from test.fixtures.enums.module.thrift_enums import *
class SomeStruct(_abc.ABC):
    @_fbthrift_property
    @_abc.abstractmethod
    def reasonable(self) -> _fbthrift_current_module.Metasyntactic: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def fine(self) -> _fbthrift_current_module.Metasyntactic: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def questionable(self) -> _fbthrift_current_module.Metasyntactic: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def tags(self) -> _typing.AbstractSet[int]: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_fbthrift_current_module.Metasyntactic, _fbthrift_current_module.Metasyntactic, _fbthrift_current_module.Metasyntactic, _typing.AbstractSet[int]]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "test.fixtures.enums.module.thrift_mutable_types.SomeStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "test.fixtures.enums.module.thrift_types.SomeStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "test.fixtures.enums.module.types.SomeStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.SomeStruct": ...  # type: ignore

class MyStruct(_abc.ABC):
    @_fbthrift_property
    @_abc.abstractmethod
    def me2_3(self) -> _fbthrift_current_module.MyEnum2: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def me3_n3(self) -> _fbthrift_current_module.MyEnum3: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def me1_t1(self) -> _fbthrift_current_module.MyEnum1: ...
    @_fbthrift_property
    @_abc.abstractmethod
    def me1_t2(self) -> _fbthrift_current_module.MyEnum1: ...
    @_abc.abstractmethod
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_fbthrift_current_module.MyEnum2, _fbthrift_current_module.MyEnum3, _fbthrift_current_module.MyEnum1, _fbthrift_current_module.MyEnum1]]]: ...
    @_abc.abstractmethod
    def _to_mutable_python(self) -> "test.fixtures.enums.module.thrift_mutable_types.MyStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_python(self) -> "test.fixtures.enums.module.thrift_types.MyStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py3(self) -> "test.fixtures.enums.module.types.MyStruct": ...  # type: ignore
    @_abc.abstractmethod
    def _to_py_deprecated(self) -> "module.ttypes.MyStruct": ...  # type: ignore
