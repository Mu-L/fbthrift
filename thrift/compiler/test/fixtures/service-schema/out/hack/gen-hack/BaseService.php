<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace facebook\thrift\test;

/**
 * Original thrift service:-
 * BaseService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/BaseService'))>>
interface BaseServiceAsyncIf extends \IThriftAsyncIf {
  /**
   * Original thrift definition:-
   * void
   *   base_method();
   */
  public function base_method(): Awaitable<void>;
}

/**
 * Original thrift service:-
 * BaseService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/BaseService'))>>
interface BaseServiceAsyncClientIf extends BaseServiceAsyncIf {
}

/**
 * Original thrift service:-
 * BaseService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/BaseService'))>>
interface BaseServiceClientIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * void
   *   base_method();
   */
  public function base_method(): Awaitable<void>;
}

/**
 * Original thrift service:-
 * BaseService
 */
trait BaseServiceClientBase {
  require extends \ThriftClientBase;

  /**
   * Original thrift definition:-
   * void
   *   base_method();
   */
  public async function base_method(): Awaitable<void> {
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $args = \facebook\thrift\test\BaseService_base_method_args::withDefaultValues();
    await $this->asyncHandler_->genBefore(BaseServiceStaticMetadata::THRIFT_SVC_NAME, "base_method", $args);
    $currentseqid = $this->sendImplHelper($args, "base_method", false, BaseServiceStaticMetadata::THRIFT_SVC_NAME );
    await $this->genAwaitResponse(\facebook\thrift\test\BaseService_base_method_result::class, "base_method", true, $currentseqid, $rpc_options);
  }

}

class BaseServiceAsyncClient extends \ThriftClientBase implements BaseServiceAsyncClientIf {
  use BaseServiceClientBase;

  const string THRIFT_SVC_NAME = BaseServiceStaticMetadata::THRIFT_SVC_NAME;

}

class BaseServiceClient extends \ThriftClientBase implements BaseServiceClientIf {
  use BaseServiceClientBase;

  const string THRIFT_SVC_NAME = BaseServiceStaticMetadata::THRIFT_SVC_NAME;

}

// HELPER FUNCTIONS AND STRUCTURES

class BaseService_base_method_args implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'BaseService_base_method_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "extend.base_method_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class BaseService_base_method_result extends \ThriftSyncStructWithoutResult implements \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'BaseService_base_method_result';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "extend.BaseService_base_method_result",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class BaseServiceStaticMetadata implements \IThriftServiceStaticMetadata {
  const string THRIFT_SVC_NAME = 'BaseService';

  public static function getServiceMetadata()[]: \tmeta_ThriftService {
    return \tmeta_ThriftService::fromShape(
      shape(
        "name" => "extend.BaseService",
        "functions" => vec[
          \tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "base_method",
              "return_type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                )
              ),
            )
          ),
        ],
      )
    );
  }

  public static function getServiceMetadataResponse()[]: \tmeta_ThriftServiceMetadataResponse {
    return \tmeta_ThriftServiceMetadataResponse::fromShape(
      shape(
        'context' => \tmeta_ThriftServiceContext::fromShape(
          shape(
            'service_info' => self::getServiceMetadata(),
            'module' => \tmeta_ThriftModuleContext::fromShape(
              shape(
                'name' => 'extend',
              )
            ),
          )
        ),
        'metadata' => \tmeta_ThriftMetadata::fromShape(
          shape(
            'enums' => dict[
            ],
            'structs' => dict[
            ],
            'exceptions' => dict[
            ],
            'services' => dict[
            ],
          )
        ),
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TServiceAnnotations {
    return shape(
      'service' => dict[],
      'functions' => dict[
      ],
    );
  }
}

