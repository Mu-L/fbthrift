/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-enum/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/basic-enum/gen-cpp2/module_constants.h"

#include <thrift/lib/cpp2/gen/module_constants_cpp.h>


#if FBTHRIFT_CAN_POPULATE_SCHEMA_LIST

#endif

namespace test::fixtures::enumstrict {
namespace module_constants {


::std::map<::test::fixtures::enumstrict::MyEnum, ::std::string> const& enumNames() {
  static folly::Indestructible<::std::map<::test::fixtures::enumstrict::MyEnum, ::std::string>> const instance{ std::initializer_list<::std::map<::test::fixtures::enumstrict::MyEnum, ::std::string>::value_type>{ {  ::test::fixtures::enumstrict::MyEnum::ONE, apache::thrift::StringTraits<std::string>::fromStringLiteral("one") },
  {  ::test::fixtures::enumstrict::MyEnum::TWO, apache::thrift::StringTraits<std::string>::fromStringLiteral("two") } } };
  return *instance;
}


::std::string_view _fbthrift_schema_e97c3188d96b91fe() {
  return "";
}
::folly::Range<const ::std::string_view*> _fbthrift_schema_e97c3188d96b91fe_includes() {
#if FBTHRIFT_CAN_POPULATE_SCHEMA_LIST
  static const ::std::array<::std::string_view, 1> includes = {
    _fbthrift_schema_e97c3188d96b91fe(),
  };
  return ::folly::range(includes);
#else
  return {};
#endif
}

} // namespace module_constants
} // namespace test::fixtures::enumstrict
