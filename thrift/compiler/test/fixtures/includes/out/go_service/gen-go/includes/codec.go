// Autogenerated by Thrift for includes.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package includes


import (
    "reflect"
    "sync"

    transitive "transitive"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

var _ = transitive.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = reflect.Ptr

// Premade codec specs
var (
    premadeCodecTypeSpec_i64 *thrift.TypeSpec = nil
    premadeCodecTypeSpec_includes_Included *thrift.TypeSpec = nil
    premadeCodecTypeSpec_includes_IncludedInt64 *thrift.TypeSpec = nil
    premadeCodecTypeSpec_includes_TransitiveFoo *thrift.TypeSpec = nil
)

// Premade codec specs initializer
var premadeCodecSpecsInitOnce = sync.OnceFunc(func() {
    premadeCodecTypeSpec_i64 = &thrift.TypeSpec{
        FullName: "i64",
        CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_I64,
},

    }
    premadeCodecTypeSpec_includes_Included = &thrift.TypeSpec{
        FullName: "includes.Included",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "includes.Included",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewIncluded() },
},

    }
    premadeCodecTypeSpec_includes_IncludedInt64 = &thrift.TypeSpec{
        FullName: "includes.IncludedInt64",
        CodecTypedefSpec: &thrift.CodecTypedefSpec{
    ScopedName:         "includes.IncludedInt64",
	UnderlyingTypeSpec: premadeCodecTypeSpec_i64,
},

    }
    premadeCodecTypeSpec_includes_TransitiveFoo = &thrift.TypeSpec{
        FullName: "includes.TransitiveFoo",
        CodecTypedefSpec: &thrift.CodecTypedefSpec{
    ScopedName:         "includes.TransitiveFoo",
	UnderlyingTypeSpec: transitive.GetCodecTypeSpec("transitive.Foo"),
},

    }
})

// Premade struct specs
var (
    premadeStructSpec_Included *thrift.StructSpec = nil
)

// Premade struct specs initializer
var premadeStructSpecsInitOnce = sync.OnceFunc(func() {
    premadeStructSpec_Included = &thrift.StructSpec{
    Name:                 "Included",
    ScopedName:           "includes.Included",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.I64,
            Name:                 "MyIntField",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_i64,
            MustBeSetToSerialize: false,
        },        {
            ID:                   2,
            WireType:             thrift.STRUCT,
            Name:                 "MyTransitiveField",
            ReflectIndex:         1,
            IsOptional:           false,
            ValueTypeSpec:        transitive.GetCodecTypeSpec("transitive.Foo"),
            MustBeSetToSerialize: true,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
        2: 1,
    },
    FieldSpecNameToIndex: map[string]int{
        "MyIntField": 0,
        "MyTransitiveField": 1,
    },
}
})

var premadeCodecSpecsMapOnce = sync.OnceValue(
    func() map[string]*thrift.TypeSpec {
        // Relies on premade codec specs initialization
        premadeCodecSpecsInitOnce()

        fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_i64.FullName] = premadeCodecTypeSpec_i64
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_includes_Included.FullName] = premadeCodecTypeSpec_includes_Included
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_includes_IncludedInt64.FullName] = premadeCodecTypeSpec_includes_IncludedInt64
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_includes_TransitiveFoo.FullName] = premadeCodecTypeSpec_includes_TransitiveFoo
        return fbthriftTypeSpecsMap
    },
)

func init() {
    premadeCodecSpecsInitOnce()
    premadeStructSpecsInitOnce()
}

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMapOnce()[fullName]
}
