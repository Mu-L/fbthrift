// Autogenerated by Thrift for thrift/compiler/test/fixtures/exceptions/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = strings.Split
var _ = thrift.ZERO


type Fiery struct {
    Message string `thrift:"message,1,required" json:"message" db:"message"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Fiery)(nil)

func NewFiery() *Fiery {
    return (&Fiery{}).setDefaults()
}

func (x *Fiery) GetMessage() string {
    return x.Message
}

func (x *Fiery) SetMessageNonCompat(value string) *Fiery {
    x.Message = value
    return x
}

func (x *Fiery) SetMessage(value string) *Fiery {
    x.Message = value
    return x
}

func (x *Fiery) writeField1(p thrift.Encoder) error {  // Message
    if err := p.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Message
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Fiery) readField1(p thrift.Decoder) error {  // Message
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Message = result
    return nil
}

func (x *Fiery) toString1() string {  // Message
    return fmt.Sprintf("%v", x.Message)
}



func (x *Fiery) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Fiery"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Fiery) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // message
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Fiery) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Fiery({")
    sb.WriteString(fmt.Sprintf("Message:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
func (x *Fiery) setDefaults() *Fiery {
    return x.
        SetMessageNonCompat("")
}

func (x *Fiery) Error() string {
    return x.String()
}

type Serious struct {
    Sonnet *string `thrift:"sonnet,1,optional" json:"sonnet,omitempty" db:"sonnet"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Serious)(nil)

func NewSerious() *Serious {
    return (&Serious{}).setDefaults()
}

func (x *Serious) GetSonnet() string {
    if !x.IsSetSonnet() {
        return ""
    }
    return *x.Sonnet
}

func (x *Serious) SetSonnetNonCompat(value string) *Serious {
    x.Sonnet = &value
    return x
}

func (x *Serious) SetSonnet(value *string) *Serious {
    x.Sonnet = value
    return x
}

func (x *Serious) IsSetSonnet() bool {
    return x != nil && x.Sonnet != nil
}

func (x *Serious) writeField1(p thrift.Encoder) error {  // Sonnet
    if !x.IsSetSonnet() {
        return nil
    }

    if err := p.WriteFieldBegin("sonnet", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Sonnet
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Serious) readField1(p thrift.Decoder) error {  // Sonnet
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Sonnet = &result
    return nil
}

func (x *Serious) toString1() string {  // Sonnet
    if x.IsSetSonnet() {
        return fmt.Sprintf("%v", *x.Sonnet)
    }
    return fmt.Sprintf("%v", x.Sonnet)
}




func (x *Serious) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Serious"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Serious) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // sonnet
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Serious) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Serious({")
    sb.WriteString(fmt.Sprintf("Sonnet:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
func (x *Serious) setDefaults() *Serious {
    return x
}

func (x *Serious) Error() string {
    return x.String()
}

type ComplexFieldNames struct {
    ErrorMessage string `thrift:"error_message,1" json:"error_message" db:"error_message"`
    InternalErrorMessage string `thrift:"internal_error_message,2" json:"internal_error_message" db:"internal_error_message"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ComplexFieldNames)(nil)

func NewComplexFieldNames() *ComplexFieldNames {
    return (&ComplexFieldNames{}).setDefaults()
}

func (x *ComplexFieldNames) GetErrorMessage() string {
    return x.ErrorMessage
}

func (x *ComplexFieldNames) GetInternalErrorMessage() string {
    return x.InternalErrorMessage
}

func (x *ComplexFieldNames) SetErrorMessageNonCompat(value string) *ComplexFieldNames {
    x.ErrorMessage = value
    return x
}

func (x *ComplexFieldNames) SetErrorMessage(value string) *ComplexFieldNames {
    x.ErrorMessage = value
    return x
}

func (x *ComplexFieldNames) SetInternalErrorMessageNonCompat(value string) *ComplexFieldNames {
    x.InternalErrorMessage = value
    return x
}

func (x *ComplexFieldNames) SetInternalErrorMessage(value string) *ComplexFieldNames {
    x.InternalErrorMessage = value
    return x
}

func (x *ComplexFieldNames) writeField1(p thrift.Encoder) error {  // ErrorMessage
    if err := p.WriteFieldBegin("error_message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ErrorMessage
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ComplexFieldNames) writeField2(p thrift.Encoder) error {  // InternalErrorMessage
    if err := p.WriteFieldBegin("internal_error_message", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.InternalErrorMessage
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ComplexFieldNames) readField1(p thrift.Decoder) error {  // ErrorMessage
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.ErrorMessage = result
    return nil
}

func (x *ComplexFieldNames) readField2(p thrift.Decoder) error {  // InternalErrorMessage
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.InternalErrorMessage = result
    return nil
}

func (x *ComplexFieldNames) toString1() string {  // ErrorMessage
    return fmt.Sprintf("%v", x.ErrorMessage)
}

func (x *ComplexFieldNames) toString2() string {  // InternalErrorMessage
    return fmt.Sprintf("%v", x.InternalErrorMessage)
}



func (x *ComplexFieldNames) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ComplexFieldNames"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ComplexFieldNames) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // error_message
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // internal_error_message
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ComplexFieldNames) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ComplexFieldNames({")
    sb.WriteString(fmt.Sprintf("ErrorMessage:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("InternalErrorMessage:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}
func (x *ComplexFieldNames) setDefaults() *ComplexFieldNames {
    return x.
        SetErrorMessageNonCompat("").
        SetInternalErrorMessageNonCompat("")
}

func (x *ComplexFieldNames) Error() string {
    return x.String()
}

type CustomFieldNames struct {
    ErrorMessage string `thrift:"error_message,1" json:"error_message" db:"error_message"`
    InternalErrorMessage string `thrift:"internal_error_message,2" json:"internal_error_message" db:"internal_error_message"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*CustomFieldNames)(nil)

func NewCustomFieldNames() *CustomFieldNames {
    return (&CustomFieldNames{}).setDefaults()
}

func (x *CustomFieldNames) GetErrorMessage() string {
    return x.ErrorMessage
}

func (x *CustomFieldNames) GetInternalErrorMessage() string {
    return x.InternalErrorMessage
}

func (x *CustomFieldNames) SetErrorMessageNonCompat(value string) *CustomFieldNames {
    x.ErrorMessage = value
    return x
}

func (x *CustomFieldNames) SetErrorMessage(value string) *CustomFieldNames {
    x.ErrorMessage = value
    return x
}

func (x *CustomFieldNames) SetInternalErrorMessageNonCompat(value string) *CustomFieldNames {
    x.InternalErrorMessage = value
    return x
}

func (x *CustomFieldNames) SetInternalErrorMessage(value string) *CustomFieldNames {
    x.InternalErrorMessage = value
    return x
}

func (x *CustomFieldNames) writeField1(p thrift.Encoder) error {  // ErrorMessage
    if err := p.WriteFieldBegin("error_message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ErrorMessage
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *CustomFieldNames) writeField2(p thrift.Encoder) error {  // InternalErrorMessage
    if err := p.WriteFieldBegin("internal_error_message", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.InternalErrorMessage
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *CustomFieldNames) readField1(p thrift.Decoder) error {  // ErrorMessage
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.ErrorMessage = result
    return nil
}

func (x *CustomFieldNames) readField2(p thrift.Decoder) error {  // InternalErrorMessage
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.InternalErrorMessage = result
    return nil
}

func (x *CustomFieldNames) toString1() string {  // ErrorMessage
    return fmt.Sprintf("%v", x.ErrorMessage)
}

func (x *CustomFieldNames) toString2() string {  // InternalErrorMessage
    return fmt.Sprintf("%v", x.InternalErrorMessage)
}



func (x *CustomFieldNames) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("CustomFieldNames"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *CustomFieldNames) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // error_message
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // internal_error_message
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *CustomFieldNames) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("CustomFieldNames({")
    sb.WriteString(fmt.Sprintf("ErrorMessage:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("InternalErrorMessage:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}
func (x *CustomFieldNames) setDefaults() *CustomFieldNames {
    return x.
        SetErrorMessageNonCompat("").
        SetInternalErrorMessageNonCompat("")
}

func (x *CustomFieldNames) Error() string {
    return x.String()
}

type ExceptionWithPrimitiveField struct {
    Message string `thrift:"message,1" json:"message" db:"message"`
    ErrorCode int32 `thrift:"error_code,2" json:"error_code" db:"error_code"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ExceptionWithPrimitiveField)(nil)

func NewExceptionWithPrimitiveField() *ExceptionWithPrimitiveField {
    return (&ExceptionWithPrimitiveField{}).setDefaults()
}

func (x *ExceptionWithPrimitiveField) GetMessage() string {
    return x.Message
}

func (x *ExceptionWithPrimitiveField) GetErrorCode() int32 {
    return x.ErrorCode
}

func (x *ExceptionWithPrimitiveField) SetMessageNonCompat(value string) *ExceptionWithPrimitiveField {
    x.Message = value
    return x
}

func (x *ExceptionWithPrimitiveField) SetMessage(value string) *ExceptionWithPrimitiveField {
    x.Message = value
    return x
}

func (x *ExceptionWithPrimitiveField) SetErrorCodeNonCompat(value int32) *ExceptionWithPrimitiveField {
    x.ErrorCode = value
    return x
}

func (x *ExceptionWithPrimitiveField) SetErrorCode(value int32) *ExceptionWithPrimitiveField {
    x.ErrorCode = value
    return x
}

func (x *ExceptionWithPrimitiveField) writeField1(p thrift.Encoder) error {  // Message
    if err := p.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Message
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithPrimitiveField) writeField2(p thrift.Encoder) error {  // ErrorCode
    if err := p.WriteFieldBegin("error_code", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ErrorCode
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithPrimitiveField) readField1(p thrift.Decoder) error {  // Message
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Message = result
    return nil
}

func (x *ExceptionWithPrimitiveField) readField2(p thrift.Decoder) error {  // ErrorCode
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.ErrorCode = result
    return nil
}

func (x *ExceptionWithPrimitiveField) toString1() string {  // Message
    return fmt.Sprintf("%v", x.Message)
}

func (x *ExceptionWithPrimitiveField) toString2() string {  // ErrorCode
    return fmt.Sprintf("%v", x.ErrorCode)
}



func (x *ExceptionWithPrimitiveField) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ExceptionWithPrimitiveField"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithPrimitiveField) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // message
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // error_code
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ExceptionWithPrimitiveField) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ExceptionWithPrimitiveField({")
    sb.WriteString(fmt.Sprintf("Message:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ErrorCode:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}
func (x *ExceptionWithPrimitiveField) setDefaults() *ExceptionWithPrimitiveField {
    return x.
        SetMessageNonCompat("").
        SetErrorCodeNonCompat(0)
}

func (x *ExceptionWithPrimitiveField) Error() string {
    return x.String()
}

type ExceptionWithStructuredAnnotation struct {
    MessageField string `thrift:"message_field,1" json:"message_field" db:"message_field"`
    ErrorCode int32 `thrift:"error_code,2" json:"error_code" db:"error_code"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ExceptionWithStructuredAnnotation)(nil)

func NewExceptionWithStructuredAnnotation() *ExceptionWithStructuredAnnotation {
    return (&ExceptionWithStructuredAnnotation{}).setDefaults()
}

func (x *ExceptionWithStructuredAnnotation) GetMessageField() string {
    return x.MessageField
}

func (x *ExceptionWithStructuredAnnotation) GetErrorCode() int32 {
    return x.ErrorCode
}

func (x *ExceptionWithStructuredAnnotation) SetMessageFieldNonCompat(value string) *ExceptionWithStructuredAnnotation {
    x.MessageField = value
    return x
}

func (x *ExceptionWithStructuredAnnotation) SetMessageField(value string) *ExceptionWithStructuredAnnotation {
    x.MessageField = value
    return x
}

func (x *ExceptionWithStructuredAnnotation) SetErrorCodeNonCompat(value int32) *ExceptionWithStructuredAnnotation {
    x.ErrorCode = value
    return x
}

func (x *ExceptionWithStructuredAnnotation) SetErrorCode(value int32) *ExceptionWithStructuredAnnotation {
    x.ErrorCode = value
    return x
}

func (x *ExceptionWithStructuredAnnotation) writeField1(p thrift.Encoder) error {  // MessageField
    if err := p.WriteFieldBegin("message_field", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MessageField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithStructuredAnnotation) writeField2(p thrift.Encoder) error {  // ErrorCode
    if err := p.WriteFieldBegin("error_code", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ErrorCode
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithStructuredAnnotation) readField1(p thrift.Decoder) error {  // MessageField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.MessageField = result
    return nil
}

func (x *ExceptionWithStructuredAnnotation) readField2(p thrift.Decoder) error {  // ErrorCode
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.ErrorCode = result
    return nil
}

func (x *ExceptionWithStructuredAnnotation) toString1() string {  // MessageField
    return fmt.Sprintf("%v", x.MessageField)
}

func (x *ExceptionWithStructuredAnnotation) toString2() string {  // ErrorCode
    return fmt.Sprintf("%v", x.ErrorCode)
}



func (x *ExceptionWithStructuredAnnotation) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ExceptionWithStructuredAnnotation"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ExceptionWithStructuredAnnotation) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // message_field
            fieldReadErr = x.readField1(p)
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // error_code
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ExceptionWithStructuredAnnotation) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ExceptionWithStructuredAnnotation({")
    sb.WriteString(fmt.Sprintf("MessageField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ErrorCode:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}
func (x *ExceptionWithStructuredAnnotation) setDefaults() *ExceptionWithStructuredAnnotation {
    return x.
        SetMessageFieldNonCompat("").
        SetErrorCodeNonCompat(0)
}

func (x *ExceptionWithStructuredAnnotation) Error() string {
    return x.String()
}

type Banal struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*Banal)(nil)

func NewBanal() *Banal {
    return (&Banal{}).setDefaults()
}



func (x *Banal) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Banal"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Banal) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Banal) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Banal({")
    sb.WriteString("})")

    return sb.String()
}
func (x *Banal) setDefaults() *Banal {
    return x
}

func (x *Banal) Error() string {
    return x.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
