/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::test::fixtures::python_capi::Shallot> {

  template <typename F, typename T>
  decltype(auto) operator()([[maybe_unused]] F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::myEnum:
      return f(0, *static_cast<T&&>(t).myEnum_ref());
    case Union::Type::myStruct:
      return f(1, *static_cast<T&&>(t).myStruct_ref());
    case Union::Type::intSet:
      return f(2, *static_cast<T&&>(t).intSet_ref());
    case Union::Type::myString:
      return f(3, *static_cast<T&&>(t).myString_ref());
    case Union::Type::doubleList:
      return f(4, *static_cast<T&&>(t).doubleList_ref());
    case Union::Type::strMap:
      return f(5, *static_cast<T&&>(t).strMap_ref());
    case Union::Type::adapted_int:
      return f(6, *static_cast<T&&>(t).adapted_int_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).myEnum_ref()))();
    default:
      throw std::runtime_error{folly::to<std::string>(
          "Enum got invalid value ",
          static_cast<std::underlying_type_t<decltype(t.getType())>>(
              t.getType()))};
    }
  }
};
template <>
struct VisitUnion<::test::fixtures::python_capi::SomeBinary> {

  template <typename F, typename T>
  decltype(auto) operator()([[maybe_unused]] F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::iobuf:
      return f(0, *static_cast<T&&>(t).iobuf_ref());
    case Union::Type::iobuf_ptr:
      return f(1, *static_cast<T&&>(t).iobuf_ptr_ref());
    case Union::Type::iobufRef:
      return f(2, *static_cast<T&&>(t).iobufRef_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).iobuf_ref()))();
    default:
      throw std::runtime_error{folly::to<std::string>(
          "Enum got invalid value ",
          static_cast<std::underlying_type_t<decltype(t.getType())>>(
              t.getType()))};
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
