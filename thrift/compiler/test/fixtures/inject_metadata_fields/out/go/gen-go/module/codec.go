// Autogenerated by Thrift for thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module


import (
    "reflect"
    "sync"

    foo "foo"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

var _ = foo.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = reflect.Ptr

// Premade codec specs
var (
    premadeCodecTypeSpec_string *thrift.TypeSpec = nil
    premadeCodecTypeSpec_module_Fields *thrift.TypeSpec = nil
    premadeCodecTypeSpec_module_FieldsInjectedToEmptyStruct *thrift.TypeSpec = nil
    premadeCodecTypeSpec_module_FieldsInjectedToStruct *thrift.TypeSpec = nil
    premadeCodecTypeSpec_module_FieldsInjectedWithIncludedStruct *thrift.TypeSpec = nil
)

// Premade codec specs initializer
var premadeCodecSpecsInitOnce = sync.OnceFunc(func() {
    premadeCodecTypeSpec_string = &thrift.TypeSpec{
        FullName: "string",
        CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
},

    }
    premadeCodecTypeSpec_module_Fields = &thrift.TypeSpec{
        FullName: "module.Fields",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.Fields",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewFields() },
},

    }
    premadeCodecTypeSpec_module_FieldsInjectedToEmptyStruct = &thrift.TypeSpec{
        FullName: "module.FieldsInjectedToEmptyStruct",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.FieldsInjectedToEmptyStruct",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewFieldsInjectedToEmptyStruct() },
},

    }
    premadeCodecTypeSpec_module_FieldsInjectedToStruct = &thrift.TypeSpec{
        FullName: "module.FieldsInjectedToStruct",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.FieldsInjectedToStruct",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewFieldsInjectedToStruct() },
},

    }
    premadeCodecTypeSpec_module_FieldsInjectedWithIncludedStruct = &thrift.TypeSpec{
        FullName: "module.FieldsInjectedWithIncludedStruct",
        CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.FieldsInjectedWithIncludedStruct",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewFieldsInjectedWithIncludedStruct() },
},

    }
})

// Premade struct specs
var (
    premadeStructSpec_Fields *thrift.StructSpec = nil
    premadeStructSpec_FieldsInjectedToEmptyStruct *thrift.StructSpec = nil
    premadeStructSpec_FieldsInjectedToStruct *thrift.StructSpec = nil
    premadeStructSpec_FieldsInjectedWithIncludedStruct *thrift.StructSpec = nil
)

// Premade struct specs initializer
var premadeStructSpecsInitOnce = sync.OnceFunc(func() {
    premadeStructSpec_Fields = &thrift.StructSpec{
    Name:                 "Fields",
    ScopedName:           "module.Fields",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   100,
            WireType:             thrift.STRING,
            Name:                 "injected_field",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        100: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "injected_field": 0,
    },
}
    premadeStructSpec_FieldsInjectedToEmptyStruct = &thrift.StructSpec{
    Name:                 "FieldsInjectedToEmptyStruct",
    ScopedName:           "module.FieldsInjectedToEmptyStruct",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   -1100,
            WireType:             thrift.STRING,
            Name:                 "injected_field",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        -1100: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "injected_field": 0,
    },
}
    premadeStructSpec_FieldsInjectedToStruct = &thrift.StructSpec{
    Name:                 "FieldsInjectedToStruct",
    ScopedName:           "module.FieldsInjectedToStruct",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   -1100,
            WireType:             thrift.STRING,
            Name:                 "injected_field",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "string_field",
            ReflectIndex:         1,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        -1100: 0,
        1: 1,
    },
    FieldSpecNameToIndex: map[string]int{
        "injected_field": 0,
        "string_field": 1,
    },
}
    premadeStructSpec_FieldsInjectedWithIncludedStruct = &thrift.StructSpec{
    Name:                 "FieldsInjectedWithIncludedStruct",
    ScopedName:           "module.FieldsInjectedWithIncludedStruct",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   -1102,
            WireType:             thrift.STRING,
            Name:                 "injected_unstructured_annotation_field",
            ReflectIndex:         0,
            IsOptional:           true,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: true,
        },        {
            ID:                   -1101,
            WireType:             thrift.STRING,
            Name:                 "injected_structured_annotation_field",
            ReflectIndex:         1,
            IsOptional:           true,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: true,
        },        {
            ID:                   -1100,
            WireType:             thrift.STRING,
            Name:                 "injected_field",
            ReflectIndex:         2,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "string_field",
            ReflectIndex:         3,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        -1102: 0,
        -1101: 1,
        -1100: 2,
        1: 3,
    },
    FieldSpecNameToIndex: map[string]int{
        "injected_unstructured_annotation_field": 0,
        "injected_structured_annotation_field": 1,
        "injected_field": 2,
        "string_field": 3,
    },
}
})

// Premade slice of all struct specs
var premadeStructSpecsOnce = sync.OnceValue(
    func() []*thrift.StructSpec {
        // Relies on premade struct specs
        premadeStructSpecsInitOnce()

        fbthriftResults := make([]*thrift.StructSpec, 0)
        fbthriftResults = append(fbthriftResults, premadeStructSpec_Fields)
        fbthriftResults = append(fbthriftResults, premadeStructSpec_FieldsInjectedToEmptyStruct)
        fbthriftResults = append(fbthriftResults, premadeStructSpec_FieldsInjectedToStruct)
        fbthriftResults = append(fbthriftResults, premadeStructSpec_FieldsInjectedWithIncludedStruct)
        return fbthriftResults
    },
)

var premadeCodecSpecsMapOnce = sync.OnceValue(
    func() map[string]*thrift.TypeSpec {
        // Relies on premade codec specs initialization
        premadeCodecSpecsInitOnce()

        fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_Fields.FullName] = premadeCodecTypeSpec_module_Fields
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FieldsInjectedToEmptyStruct.FullName] = premadeCodecTypeSpec_module_FieldsInjectedToEmptyStruct
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FieldsInjectedToStruct.FullName] = premadeCodecTypeSpec_module_FieldsInjectedToStruct
        fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FieldsInjectedWithIncludedStruct.FullName] = premadeCodecTypeSpec_module_FieldsInjectedWithIncludedStruct
        return fbthriftTypeSpecsMap
    },
)

func init() {
    premadeCodecSpecsInitOnce()
    premadeStructSpecsInitOnce()
}

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMapOnce()[fullName]
}
