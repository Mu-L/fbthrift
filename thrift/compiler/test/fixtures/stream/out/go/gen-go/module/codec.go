// Autogenerated by Thrift for thrift/compiler/test/fixtures/stream/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module


import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID

// Premade codec specs
var (
    premadeCodecTypeSpec_module_FooStreamEx = &thrift.TypeSpec{
        FullName: "module.FooStreamEx",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.FooStreamEx",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewFooStreamEx() },
            },
    }
    premadeCodecTypeSpec_module_FooEx = &thrift.TypeSpec{
        FullName: "module.FooEx",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.FooEx",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewFooEx() },
            },
    }
    premadeCodecTypeSpec_module_FooEx2 = &thrift.TypeSpec{
        FullName: "module.FooEx2",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.FooEx2",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewFooEx2() },
            },
    }
)

// Premade struct specs
var (
    premadeStructSpec_FooStreamEx =
        &thrift.StructSpec{
            Name:                 "FooStreamEx",
            ScopedName:           "module.FooStreamEx",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
            },
            FieldSpecIDToIndex:   map[int16]int{
            },
            FieldSpecNameToIndex: map[string]int{
            },
        }
    premadeStructSpec_FooEx =
        &thrift.StructSpec{
            Name:                 "FooEx",
            ScopedName:           "module.FooEx",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
            },
            FieldSpecIDToIndex:   map[int16]int{
            },
            FieldSpecNameToIndex: map[string]int{
            },
        }
    premadeStructSpec_FooEx2 =
        &thrift.StructSpec{
            Name:                 "FooEx2",
            ScopedName:           "module.FooEx2",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
            },
            FieldSpecIDToIndex:   map[int16]int{
            },
            FieldSpecNameToIndex: map[string]int{
            },
        }
)

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FooStreamEx.FullName] = premadeCodecTypeSpec_module_FooStreamEx
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FooEx.FullName] = premadeCodecTypeSpec_module_FooEx
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FooEx2.FullName] = premadeCodecTypeSpec_module_FooEx2
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
